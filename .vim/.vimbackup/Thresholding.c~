/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2006 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: Thresholding.h,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: 
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/


#include "Thresholding.h"
#include "AppNvram.h"
#include "ErrorManager.h"
#include "smath32.h"
#include "AhsAuxDevice.h"

/**
 * 反射強度閾値テーブル
 */
static const sint16 HighSensitivity1[2][6] =    // 人間検知(LEV1)
{
    {  20,   40,   60,   80,  100,  120 },
    { -50,  -50,  -50,  -50,  -50,  -50 }
};
static const sint16 HighSensitivity2[2][6] =    // 人間検知(LEV1)
{
    {  20,   40,   60,   80,  100,  120 },
    { -48,  -48,  -48,  -48,  -48,  -48 }
};
static const sint16 HighSensitivity3[2][6] =    // 人間検知(LEV1)
{
    {  20,   40,   60,   80,  100,  120 },
    { -45,  -45,  -45,  -45,  -45,  -45 }
};
static const sint16 HighSensitivity4[2][6] =    // 人間検知(LEV1)
{
    {  20,   40,   60,   80,  100,  120 },
    { -43,  -43,  -43,  -43,  -43,  -43 }
};

static const sint16 MediumSensitivity[2][6] =   // 人間、ライトビークル
{
    {  20,   40,   60,   80,  100,  120 },
    { -43,  -43,  -43,  -43,  -43,  -43 }
};
static const sint16 LowSensitivity1[2][6] =     // ライトビークル
{
    {  20,   40,   60,   80,  100,  120 },
    { -40,  -40,  -40,  -40,  -40,  -40 }
};
static const sint16 LowSensitivity2[2][6] =
{
    {  20,   40,   60,   80,  100,  120 },
    { -35,  -35,  -35,  -35,  -35,  -35 }
};
static const sint16 LowSensitivity3[2][6] =
{
    {  20,   40,   60,   80,  100,  120 },
    { -30,  -30,  -30,  -30,  -30,  -30 }
};
static const sint16 LowSensitivity4[2][6] =
{
    {  20,   40,   60,   80,  100,  120 },
    { -30,  -30,  -30,  -30,  -30,  -30 }
};
static const sint16 KillSensitivity[2][6] =    // レーダ無視
{
    {  20,   40,   60,   80,  100,  120 },
    { 100,  100,  100,  100,  100,  100 }
};


//---------------For ESR--------------------------
static const sint16 EsrHighSensitivity3[2][6] =   // 人間、ライトビークル
{
    {  20,   40,   60,   80,  100,  120 },
    { -45,  -45,  -45,  -40,  -40,  100 }
};
static const sint16 EsrHighSensitivity2[2][6] =   // 人間、ライトビークル
{
    {  20,   40,   50,   80,  100,  120 },
    { -42,  -42,  -42,  -34,  -34,  100 }
};
static const sint16 EsrHighSensitivity1[2][6] =   // 人間、ライトビークル
{
    {  20,   40,   50,   80,  100,  120 },
    { -40,  -40,  -40,  -32,  -32,  100 }
};
static const sint16 EsrMediumSensitivity[2][6] =     // ライトビークル(基本)
{
    {  20,   40,   50,   80,  100,  120 },
    { -38,  -38,  -38,  -30,  -30,  100 }
};
static const sint16 EsrLowSensitivity1[2][6] =     // ライトビークル
{
    {  20,   40,   50,   80,  100,  120 },
    { -36,  -36,  -36,  -28,  -28,  100 }
};
static const sint16 EsrLowSensitivity2[2][6] =     // ライトビークル
{
    {  20,   40,   50,   80,  100,  120 },
    { -34,  -34,  -34,  -26,  -26,  100 }
};
static const sint16 EsrLowSensitivity3[2][6] =     // ライトビークル
{
    {  20,   40,   50,   80,  100,  120 },
    { -32,  -32,  -32,  -24,  -24,  100 }
};
static const sint16 EsrLowSensitivity4[2][6] =     // ライトビークル
{
    {  20,   40,   50,   80,  100,  120 },
    { -30,  -30,  -30,  -22,  -22,  100 }
};


/**
 *
 */
static StructThesholdTable theshTable;

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void Thresholding_Init(void)
{
    sint16 defaultThresh;
    sint16 acc3PowerThreshold;//maskRegularのときの反射強度閾値
    sint16 odsType;

    // マスクの種類は、デフォルトの閾値に対して決定する
    defaultThresh = SfNvram_GetRadarDefaultThreshold();
    
    acc3PowerThreshold = SfNvram_GetRadarPowerThreshold();

    odsType = AppNvram_GetOdsType();

    if( defaultThresh == (sint16)maskRegular )
    {
        //マスクなしのときの反射強度の決定
        if( acc3PowerThreshold == 0){
			if( (odsType == ESRX3_LUXX2_SRRX4)||(odsType == ESRX3_LUXX2) )
			{
				theshTable.regularTable = (short*)&EsrMediumSensitivity;
			}
			else
			{
	            theshTable.regularTable = (short*)&HighSensitivity1;
			}
        }
        else if( acc3PowerThreshold == 1 ){
			if( (odsType == ESRX3_LUXX2_SRRX4)||(odsType == ESRX3_LUXX2) )
			{
				theshTable.regularTable = (short*)&EsrHighSensitivity1;
			}
			else
			{
				theshTable.regularTable = (short*)&HighSensitivity2;
			}
        }
        else if( acc3PowerThreshold == 2 ){
			if( (odsType == ESRX3_LUXX2_SRRX4)||(odsType == ESRX3_LUXX2) )
			{
				theshTable.regularTable = (short*)&EsrHighSensitivity2;
			}
			else
			{
				theshTable.regularTable = (short*)&HighSensitivity3;
			}
        }
        else if( acc3PowerThreshold == 3 ){
			if( (odsType == ESRX3_LUXX2_SRRX4)||(odsType == ESRX3_LUXX2) )
			{
				theshTable.regularTable = (short*)&EsrHighSensitivity3;
			}
			else
			{
				theshTable.regularTable = (short*)&HighSensitivity4;
			}
        }
        else if( acc3PowerThreshold == 4 ){
			if( (odsType == ESRX3_LUXX2_SRRX4)||(odsType == ESRX3_LUXX2) )
			{
				theshTable.regularTable = (short*)&EsrLowSensitivity1;
			}
			else
			{
				theshTable.regularTable = (short*)&HighSensitivity3;
			}
        }
        else if( acc3PowerThreshold == 5 ){
			if( (odsType == ESRX3_LUXX2_SRRX4)||(odsType == ESRX3_LUXX2) )
			{
				theshTable.regularTable = (short*)&EsrLowSensitivity2;
			}
			else
			{
				theshTable.regularTable = (short*)&HighSensitivity3;
			}
        }
        else{
			if( (odsType == ESRX3_LUXX2_SRRX4)||(odsType == ESRX3_LUXX2) )
			{
				theshTable.regularTable = (short*)&EsrMediumSensitivity;
			}
			else
			{
				theshTable.regularTable = (short*)&HighSensitivity3;
			}
        }
        
		if( (odsType == ESRX3_LUXX2_SRRX4)||(odsType == ESRX3_LUXX2) )
		{
        	theshTable.mediumTable  = (short*)&EsrLowSensitivity1;
        	theshTable.low1Table    = (short*)&EsrLowSensitivity2;
        	theshTable.low2Table    = (short*)&EsrLowSensitivity3;
        	theshTable.low3Table    = (short*)&EsrLowSensitivity4;
		}
		else
		{
        	theshTable.mediumTable  = (short*)&MediumSensitivity;
        	theshTable.low1Table    = (short*)&LowSensitivity1;
        	theshTable.low2Table    = (short*)&LowSensitivity2;
        	theshTable.low3Table    = (short*)&LowSensitivity3;
        }
    }
    else if( defaultThresh == (sint16)maskAcc3MediumSensitivity )
    {
		if( (odsType == ESRX3_LUXX2_SRRX4)||(odsType == ESRX3_LUXX2) )
		{
        	theshTable.regularTable = (short*)&EsrMediumSensitivity;
        	theshTable.mediumTable  = (short*)&EsrLowSensitivity1;
        	theshTable.low1Table    = (short*)&EsrLowSensitivity2;
        	theshTable.low2Table    = (short*)&EsrLowSensitivity3;
        	theshTable.low3Table    = (short*)&EsrLowSensitivity4;
		}
		else
		{
			theshTable.regularTable = (short*)&MediumSensitivity;
        	theshTable.mediumTable  = (short*)&LowSensitivity1;
        	theshTable.low1Table    = (short*)&LowSensitivity2;
        	theshTable.low2Table    = (short*)&LowSensitivity3;
        	theshTable.low3Table    = (short*)&LowSensitivity4;
        }
    }
    else if( defaultThresh == (sint16)maskAcc3Low1Sensitivity )
    {
		if( (odsType == ESRX3_LUXX2_SRRX4)||(odsType == ESRX3_LUXX2) )
		{
        	theshTable.regularTable = (short*)&EsrLowSensitivity1;
        	theshTable.mediumTable  = (short*)&EsrLowSensitivity2;
        	theshTable.low1Table    = (short*)&EsrLowSensitivity3;
        	theshTable.low2Table    = (short*)&EsrLowSensitivity4;
        	theshTable.low3Table    = (short*)&EsrLowSensitivity4;
		}
		else
		{
        	theshTable.regularTable = (short*)&LowSensitivity1;
        	theshTable.mediumTable  = (short*)&LowSensitivity2;
        	theshTable.low1Table    = (short*)&LowSensitivity3;
        	theshTable.low2Table    = (short*)&LowSensitivity4;
        	theshTable.low3Table    = (short*)&LowSensitivity4;
        }
    }
    else if( defaultThresh == (sint16)maskAcc3Low2Sensitivity )
    {
		if( (odsType == ESRX3_LUXX2_SRRX4)||(odsType == ESRX3_LUXX2) )
		{
        	theshTable.regularTable = (short*)&EsrLowSensitivity2;
        	theshTable.mediumTable  = (short*)&EsrLowSensitivity3;
        	theshTable.low1Table    = (short*)&EsrLowSensitivity4;
        	theshTable.low2Table    = (short*)&EsrLowSensitivity4;
        	theshTable.low3Table    = (short*)&EsrLowSensitivity4;
		}
		else
		{
        	theshTable.regularTable = (short*)&LowSensitivity2;
        	theshTable.mediumTable  = (short*)&LowSensitivity3;
        	theshTable.low1Table    = (short*)&LowSensitivity4;
        	theshTable.low2Table    = (short*)&LowSensitivity4;
        	theshTable.low3Table    = (short*)&LowSensitivity4;
        }
    }
    else if( defaultThresh == (sint16)maskAcc3Low3Sensitivity )
    {
		if( (odsType == ESRX3_LUXX2_SRRX4)||(odsType == ESRX3_LUXX2) )
		{
        	theshTable.regularTable = (short*)&EsrLowSensitivity2;
        	theshTable.mediumTable  = (short*)&EsrLowSensitivity3;
        	theshTable.low1Table    = (short*)&EsrLowSensitivity3;
        	theshTable.low2Table    = (short*)&EsrLowSensitivity3;
        	theshTable.low3Table    = (short*)&EsrLowSensitivity3;
		}
		else
		{
        	theshTable.regularTable = (short*)&LowSensitivity3;
        	theshTable.mediumTable  = (short*)&LowSensitivity4;
        	theshTable.low1Table    = (short*)&LowSensitivity4;
        	theshTable.low2Table    = (short*)&LowSensitivity4;
        	theshTable.low3Table    = (short*)&LowSensitivity4;
        }
    }
    else if( ( defaultThresh == (sint16)maskAcc3Disable ) || ( defaultThresh == (sint16)maskAllRadarKill ) )
    {
        theshTable.regularTable = (short*)&KillSensitivity;
        theshTable.mediumTable  = (short*)&KillSensitivity;
        theshTable.low1Table    = (short*)&KillSensitivity;
        theshTable.low2Table    = (short*)&KillSensitivity;
        theshTable.low3Table    = (short*)&KillSensitivity;
    }
    else  // Regularと同じ
    {
		if( (odsType == ESRX3_LUXX2_SRRX4)||(odsType == ESRX3_LUXX2) )
		{
        	theshTable.regularTable = (short*)&EsrMediumSensitivity;
        	theshTable.mediumTable  = (short*)&EsrLowSensitivity1;
        	theshTable.low1Table    = (short*)&EsrLowSensitivity2;
        	theshTable.low2Table    = (short*)&EsrLowSensitivity3;
        	theshTable.low3Table    = (short*)&EsrLowSensitivity4;
		}
		else
		{
        	theshTable.regularTable = (short*)&HighSensitivity3;
        	theshTable.mediumTable  = (short*)&MediumSensitivity;
        	theshTable.low1Table    = (short*)&LowSensitivity1;
        	theshTable.low2Table    = (short*)&LowSensitivity2;
        	theshTable.low3Table    = (short*)&LowSensitivity3;
        }
    }
}

//---------------------------------------------------------------------------
/** 
 * @return 閾値 [dB]
 */
//---------------------------------------------------------------------------
sint16 Thresholding_GetThreshold(sint32 range, MaskType mask)
{
    sint16 th;
    sint16 r;
    
    r = (sint16)(range/1000);

    // 閾値の決定
    if( mask == maskRegular )
    {
        th = hokan1((short)r, 6, theshTable.regularTable);
    }
    else if( mask == maskAcc3MediumSensitivity )
    {
        th = hokan1((short)r, 6, theshTable.mediumTable);
    }
    else if( mask == maskAcc3Low1Sensitivity )
    {
        th = hokan1((short)r, 6, theshTable.low1Table);
    }
    else if( mask == maskAcc3Low2Sensitivity )
    {
        th = hokan1((short)r, 6, theshTable.low2Table);
    }
    else if( mask == maskAcc3Low3Sensitivity )
    {
        th = hokan1((short)r, 6, theshTable.low3Table);
    }
    else if( ( mask == maskAcc3Disable ) || ( mask == maskAllRadarKill ) )
    {
        th = 100;  // 閾値100dB、事実上レーダ無視
    }
    else
    {
        Error_Set(E_SOFTWARE_EXCEPTION3);
        
        th = hokan1((short)r, 6, theshTable.regularTable); // あり得ないが一応
    }

    return(th*10);
}

