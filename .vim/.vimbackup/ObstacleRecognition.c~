/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2006 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: ObstacleRecognition.c,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: Safety Controller
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/

#include "ObstacleRecognition.h"
#include "AppMain.h"
#include "ErrorManager.h"
#include "WarningManager.h"
#include "ModeManager.h"
#include "ObstReport.h"
#include "OdsDisable.h"
#include "AhsLocation.h"
#include "TruckInfo.h"
#include "Horn.h"
#include "OdsAction.h"
#include "IbeoObstacleRecognition.h"
#include "SrrObstacleRecognition.h"

#define NUM_OBSTALCE_LIST  20

#define STOP_SCORE   100
#define SLOW_SCORE    50
#define WARN_SCORE     1


/**
 * ObstacleRecognitionクラスの属性定義
 */
typedef struct{
    OdsAction          warningFlag[ODS_SENSOR_NUM];  // アクション
    StructObstacleList list[NUM_OBSTALCE_LIST];      // 障害物リスト
    bool               detectFlag;
    bool               disable;                      // ﾃｽﾄ用（ODS無視）
} StructObstRecog;

/**
 * インスタンス定義
 */
static StructObstRecog  obstRecog;

/**
 * プライベート関数定義
 */
static bool   ObstRecog_isListEmpty(sint16 index);
static sint16 ObstRecog_GetAvailableList(void);
static sint16 ObstRecog_SearchList(sint32 range, uint32 time);
static void   ObstRecog_DetectObstale(void);
static void   ObstRecog_ClearPassedList(void);
static void   ObstRecog_UpdateExpectedRange(void);
static void   ObstRecog_SetError(RadarPosition pos);
static void   ObstRecog_WarningClear(void);
static void   ObstRecog_SetWarning(RadarPosition pos);
static void   ObstRecog_SetWarningEx(RadarPosition pos);

//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void ObstRecog_Init(void)
{
    sint16 i;

    obstRecog.detectFlag  = OFF;
    obstRecog.disable     = FALSE;

    for(i=0;i<ODS_SENSOR_NUM;i++)
    {
        obstRecog.warningFlag[i] = odsOk;
    }

    ObstRecog_ClearAllObstacle();

}

//---------------------------------------------------------------------------
/**
 * メインルーチン
 */
//---------------------------------------------------------------------------
void ObstRecog_Main(void)
{
    ModeType mode, modePrev;
    static bool prevDetectFlag;
    
    mode     = Mode_GetCurrentMode();
    modePrev = Mode_GetPreviousMode();

    // レーダが障害物を検出してから、モードがAから変わったら、リストをクリアし
    // セントラルに検知情報を送信する
    if( obstRecog.detectFlag == ON )
    {
        if( ( mode != modeAuto ) && ( modePrev == modeAuto ) )
        {
            obstRecog.detectFlag = OFF;

            // 障害物リストをクリア
            ObstRecog_ClearAllObstacle();

            // BlindRUNを開始
            OdsDisable_BlindRunStart();
        }
    }

    // Sモードになったら一旦障害物リストをクリア
    if( ( mode == modeStop ) && ( modePrev != modeStop ) )
    {
        ObstRecog_ClearAllObstacle();

        obstRecog.detectFlag = OFF;
    }
    else
    {
        //
    }

    // 積込点から10mはBlindRunを実行する
    if( AhsLocation_IsRealLoadingSpotPoint( TruckInfo_GetCurrentIndex() ) == TRUE )
    {
        OdsDisable_BlindRunStart();
    }

    // 通り過ぎたもの、遠くに去ったものは削除
    ObstRecog_ClearPassedList();

    // 得点閾値を超えたものがあったらエラーまたはワーニング
    // 1点   : ワーニング（減速しない）
    // 50点  : ワーニング（10km/hに減速）
    // 100点 : エラー（停止）
    ObstRecog_DetectObstale();

    // リストに登録されている障害物の次の予想距離を計算
    ObstRecog_UpdateExpectedRange();

    // 障害物を検知したらホーンを鳴らす
    // （他のレーダが既に検知中でないとき）
    if( ( obstRecog.detectFlag == ON ) 
     && ( prevDetectFlag == OFF ) 
     && ( IbeoObstRecog_GetDetectFlag() == OFF ) 
     && ( SrrObstRecog_GetDetectFlag() == OFF ) 
    )
    {
        Horn_Honk(hornWarning);
    }
    
    prevDetectFlag = obstRecog.detectFlag;
}

//---------------------------------------------------------------------------
/**
 * 障害物リストのクリア
 */
//---------------------------------------------------------------------------
void ObstRecog_ClearAllObstacle(void)
{
    int i;

    for(i=0;i<NUM_OBSTALCE_LIST;i++)
    {
        ObstList_Clear(&obstRecog.list[i]);
    }
}

//---------------------------------------------------------------------------
/**
 * 検知障害物情報をリストに登録する
 * @retval TRUE
 * @retval FALSE
 */
//---------------------------------------------------------------------------
bool ObstRecog_SetObstacle(sint32 range,      /** < 距離 [mm] */
                           sint16 speed,      /** < 相対速度 [mm/sec] */
                           sint32 xpos,       /** < 検知ターゲットのX座標 [mm] */
                           sint32 ypos,       /** < 検知ターゲットのY座標 [mm] */
                           sint16 power,      /** < [0.1dB] */
                           sint16 score,      /** < 検知ターゲットの得点 */
                           RadarPosition pos  /** < 検知レーダの種類 */
                           )
{
    sint16 index;
    uint32 nowTime;

    // 現在時刻
    nowTime = AdtMain_GetMainCounter();

    // 登録されている障害物から同一と思われるものを探す
    // 見つからなければ空いているリストを探す
    index = ObstRecog_SearchList(range,nowTime);

    // バッファフル
    if(index == -1)
    {
        // 障害物リストバッファフル（エラーにする）
        Error_Set(E_TOO_MANY_OBSTACLE);
        
        return(FALSE);
    }
    else
    {
        // リストに登録（更新）
        ObstList_SetTargetInfo(&obstRecog.list[index],  // ストアする障害物リストの場所
                                range,                  // 距離
                                speed,                  // 速度
                                xpos,
                                ypos,
                                score,                  // 得点
                                power,
                                pos);                   // 検知したレーダ種類

        return(TRUE);
    }
}
//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
StructObstacleList* ObstRecog_GetObstList(sint16 index)
{
    return( &obstRecog.list[index] );
}

//---------------------------------------------------------------------------
/**
 * （テスト用）
 */
//---------------------------------------------------------------------------
void ObstRecog_DisableRecognition(bool flag)
{
    obstRecog.disable = flag;
}

//---------------------------------------------------------------------------
/**
 * レーダが障害物を検知し、停止しようとしているかどうか
 */
//---------------------------------------------------------------------------
bool ObstRecog_GetDetectFlag(void)
{
    return(obstRecog.detectFlag);
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**
 * 障害物リストが空かどうか
 * @retval TRUE  空
 * @retval FALSE 使用中
 */
//---------------------------------------------------------------------------
static bool ObstRecog_isListEmpty(sint16 index)
{
    if( obstRecog.list[index].radar == posNone )
    {
        return(TRUE);
    }
    else
    {
        return(FALSE);
    }
}

//---------------------------------------------------------------------------
/**
 * 登録されている障害物から同一と思われるものを探す
 * 見つからなければ空いているリストを探す
 * @param range 障害物の距離 [mm]
 * @param time [50msec:システムタイム]
 * @return リストのインデックス
 */
//---------------------------------------------------------------------------
static sint16 ObstRecog_SearchList(sint32 range, uint32 time)
{
    sint16 i;
    sint32 diffRange, diffRangeLimit;
    uint32 diffTime;
    
    for( i=0; i<NUM_OBSTALCE_LIST; i++ )
    {
        // 登録されている障害物と距離の差を計算する
        diffRange = labs((sint32)(obstRecog.list[i].expectRange - range));
        
        // 登録されている障害物の検知時刻の時間差を計算する
        diffTime  = time - obstRecog.list[i].time;
        
        // もし1秒以上前に見たものなら、15m以内のものを同じ物とみなす
        // もし、0.5秒以上1秒以下なら7.5m以内のもの
        // もし、0.5秒以下なら5m以内のもの
        if( diffTime > T_1SEC ) { diffRangeLimit = 15000; }
        else if( diffTime > T_500MSEC ) { diffRangeLimit = 7500; }
        else { diffRangeLimit = 5000; }
        
        if( diffRange <= diffRangeLimit )
        {
            return(i);
        }
    }
    
    // 該当するものがなければ新しい障害物
    return( ObstRecog_GetAvailableList() );
}

//---------------------------------------------------------------------------
/**
 * 障害物リストの空きを探す
 * @retval 0-20 リストのインデックス
 * @retval -1 リストに空きがない
 */
//---------------------------------------------------------------------------
static sint16 ObstRecog_GetAvailableList(void)
{
    sint16 i;
    
    // 空いているバッファを探す
    for(i=0;i<NUM_OBSTALCE_LIST;i++)
    {
        if( ObstRecog_isListEmpty(i)==TRUE ) return(i);
    }
    
    // バッファフル
    return(-1);
}

//---------------------------------------------------------------------------
/**
 * 得点閾値を超えたものがあったらエラーまたはワーニング
 * 1点   : ワーニング（減速しない）
 * 50点  : ワーニング（10km/hに減速）
 * 100点 : エラー（停止）
 */
//---------------------------------------------------------------------------
static void ObstRecog_DetectObstale(void)
{
    sint16 i,index;
    sint16 maxScore = 0;

    // テスト用、障害物を検出しても、エラーにさせない
    if( obstRecog.disable == TRUE ) return;

    index = -1;
    for( i=0; i<NUM_OBSTALCE_LIST; i++ )
    {
        if( ObstRecog_isListEmpty(i)==FALSE ) 
        {
            // 最も得点の高いものを探す
            if( obstRecog.list[i].score > maxScore ) 
            {
                maxScore = obstRecog.list[i].score;
                index = i;
            }
        }
    }

    if( index == -1 )
    {
        // 障害物なし、もしワーニングが立っていたらクリアする
        ObstRecog_WarningClear();
    }
    else
    {
        if( maxScore >= STOP_SCORE )  // 停止 (100点）
        {
            obstRecog.detectFlag = ON;      // 

            // セントラルに報告する障害物情報をセットする
            ObstReport_SetObstacleInfo( obstRecog.list[index].radar,
                                        obstRecog.list[index].xpos,
                                        obstRecog.list[index].ypos,
                                        (uint8)(obstRecog.list[index].range/1000),
                                        (sint8)(obstRecog.list[index].power/10)
                                      );

            ObstReport_MmwrUpdateInhibit();     // セントラルへ送信する障害物情報の更新を禁止する

            ObstRecog_SetError(obstRecog.list[index].radar);
        }
        else if( maxScore >= SLOW_SCORE ) // 減速 (50点）
        {
            ObstRecog_SetWarningEx(obstRecog.list[index].radar);
        }
        else if( maxScore >= WARN_SCORE )  // ワーニングのみ (1点）
        {
            ObstRecog_SetWarning(obstRecog.list[index].radar);
        }
    }
    
}

//---------------------------------------------------------------------------
/**
 * 通り過ぎたものは削除（ワーニングも解除）
 */
//---------------------------------------------------------------------------
static void ObstRecog_ClearPassedList(void)
{
    int i;

    for(i=0;i<NUM_OBSTALCE_LIST;i++)
    {
        if( ObstRecog_isListEmpty(i)==FALSE ) 
        {
            // 通り過ぎたら削除
            if( obstRecog.list[i].expectRange <= 0 )
            {
                ObstList_Clear(&obstRecog.list[i]);
            }
            // 200mより遠くに言ったら削除
            else if(obstRecog.list[i].expectRange > 200000 )
            {
                ObstList_Clear(&obstRecog.list[i]);
            }
            else
            {
                //
            }
        }
    }
}

//---------------------------------------------------------------------------
/**
 * リストに登録されている障害物の次の予想距離を計算
 */
//---------------------------------------------------------------------------
static void ObstRecog_UpdateExpectedRange(void)
{
    int i;

    for(i=0;i<NUM_OBSTALCE_LIST;i++)
    {
        if( ObstRecog_isListEmpty(i)==FALSE ) 
        {
            ObstList_CalcExpectedRange(&obstRecog.list[i]);
        }
    }
}

//---------------------------------------------------------------------------
/**
 * 障害物検知によるワーニングの解除
 */
//---------------------------------------------------------------------------
static void ObstRecog_WarningClear(void)
{
    if( obstRecog.warningFlag[(int)posRight] != odsOk )
    {
        Warning_Clear(E_DETECT_RADAR1);
        obstRecog.warningFlag[(int)posRight] = odsOk;
    }
    else if( obstRecog.warningFlag[(int)posCenter] != odsOk )
    {
        Warning_Clear(E_DETECT_RADAR2);
        obstRecog.warningFlag[(int)posCenter] = odsOk;
    }
    else if( obstRecog.warningFlag[(int)posLeft] != odsOk )
    {
        Warning_Clear(E_DETECT_RADAR3);
        obstRecog.warningFlag[(int)posLeft] = odsOk;
    }
    else if( obstRecog.warningFlag[(int)posSteer] != odsOk )
    {
        Warning_Clear(E_DETECT_RADAR4);
        obstRecog.warningFlag[(int)posSteer] = odsOk;
    }
}

//---------------------------------------------------------------------------
/**
 * 障害物検知による停止
 * @param レーダの種類
 */
//---------------------------------------------------------------------------
static void ObstRecog_SetError(RadarPosition pos)
{
    uint16 code;
    
    if( pos == posRight ) { code = E_DETECT_RADAR1; }
    else if( pos == posCenter ) { code = E_DETECT_RADAR2; }
    else if( pos == posLeft  )  { code = E_DETECT_RADAR3; }
    else if( pos == posSteer )  { code = E_DETECT_RADAR4; }
    else { return; }

    Error_Set(code);
}

//---------------------------------------------------------------------------
/**
 * 障害物検知による減速
 * @param レーダの種類
 */
//---------------------------------------------------------------------------
static void ObstRecog_SetWarningEx(RadarPosition pos)
{
    uint16 code;
    
    if( pos == posRight ) { code = E_DETECT_RADAR1; }
    else if( pos == posCenter ) { code = E_DETECT_RADAR2; }
    else if( pos == posLeft  )  { code = E_DETECT_RADAR3; }
    else if( pos == posSteer )  { code = E_DETECT_RADAR4; }
    else { return; }

    if( ( obstRecog.warningFlag[(int)pos] == odsOk )
     || ( obstRecog.warningFlag[(int)pos] == odsWarning ) )
    {
        Warning_SetEx(code,wSlow10Now); 
        obstRecog.warningFlag[(int)pos] = odsSlowDown;
    }
}

//---------------------------------------------------------------------------
/**
 * 障害物検知（ワーニングのみ）
 * @param レーダの種類
 */
//---------------------------------------------------------------------------
static void ObstRecog_SetWarning(RadarPosition pos)
{
    uint16 code;
    
    if( pos == posRight ) { code = E_DETECT_RADAR1; }
    else if( pos == posCenter ) { code = E_DETECT_RADAR2; }
    else if( pos == posLeft  )  { code = E_DETECT_RADAR3; }
    else if( pos == posSteer )  { code = E_DETECT_RADAR4; }
    else { return; }

    if( obstRecog.warningFlag[(int)pos] == odsOk)
    {
        Warning_Set(code); 
        obstRecog.warningFlag[(int)pos] = odsWarning;
    }
}

/* end of file */
