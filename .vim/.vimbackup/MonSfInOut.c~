/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2005 Komatsu Ltd. All rights reserved.
 * 
 * $RCSfile: MonSfInOut.h,v $
 * $Revision: 1.1.1.1 $
 * $Author: tojima $
 * $Date: 2005/07/06 06:36:19 $
 * $State: Exp $
 *
 * @brief: Safety Controller
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/

#include "ahscommon.h"
#include "MonCtrl.h"
#include "DataTypes.h"
#include "AppMain.h"
#include "AhsTools.h"

#include "MonSfInOut.h"

#include "AppIoDefine.h"
#include "TurnLight.h"
#include "HeadLight.h"
#include "ModeLamp.h"
#include "Horn.h"
#include "SfHeartbeat.h"
#include "OdsPower.h"
#include "BrakeControl.h"
#include "EGStart.h"
#include "LuxPower.h"
#include "AppNvram.h"
#include "AhsAuxDevice.h"

/**
 * IN/OUT Data Msgの構造定義
 */
typedef struct{
	uint16    timestamp;  // タイムスタンプ
	uint16    id;         // データID
	BitDword  din;
	BitWord   dout;
	uint16    ain[3];
} MonInOutMsg;

/**
 */
typedef struct{
	MonInOutMsg   data;  // データメッセージ構造体
	StructMonCtrl ctrl;  // 送信コントロールクラス
} StructMonInOutData;
 
/**
 * インスタンス定義
 */
static StructMonInOutData monio;

//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void MonSfInOut_Init( void )
{
	MonCtrl_Init( &monio.ctrl, 
				  (sint16)sizeof( MonInOutMsg ),
				  (uint8*)&monio.data,
				  MonSfInOut_SetData
				 );
}

//---------------------------------------------------------------------------
/**
 * メイン
 */
//---------------------------------------------------------------------------
void MonSfInOut_Main( void )
{
	MonCtrl_Main( &monio.ctrl );
}

//---------------------------------------------------------------------------
/**
 * データのセット
 */
//---------------------------------------------------------------------------
void MonSfInOut_SetData( void )
{
	sint16 odsType;
	
	// レーダ構成の取得
	odsType = AppNvram_GetOdsType();

	monio.data.timestamp = (uint16)AdtMain_GetMainCounter();
	monio.data.id        = GET_SF_IN_OUT;

	// DIN
	monio.data.din.bitf.bit31 = GetDinStatus(32);
	monio.data.din.bitf.bit30 = GetDinStatus(31);
	monio.data.din.bitf.bit29 = GetDinStatus(30);
	monio.data.din.bitf.bit28 = GetDinStatus(29);
	monio.data.din.bitf.bit27 = GetDinStatus(28);
	monio.data.din.bitf.bit26 = GetDinStatus(27);
	monio.data.din.bitf.bit25 = GetDinStatus(26);
	monio.data.din.bitf.bit24 = GetDinStatus(25);
	monio.data.din.bitf.bit23 = GetDinStatus(24);
	monio.data.din.bitf.bit22 = GetDinStatus(23);
	monio.data.din.bitf.bit21 = GetDinStatus(22);
	monio.data.din.bitf.bit20 = GetDinStatus(21);
	monio.data.din.bitf.bit19 = GetDinStatus(20);
	monio.data.din.bitf.bit18 = GetDinStatus(19);
	monio.data.din.bitf.bit17 = GetDinStatus(18);
	monio.data.din.bitf.bit16 = GetDinStatus(17);
	monio.data.din.bitf.bit15 = GetDinStatus(16);
	monio.data.din.bitf.bit14 = GetDinStatus(15);
	monio.data.din.bitf.bit13 = GetDinStatus(14);
	monio.data.din.bitf.bit12 = GetDinStatus(13);
	monio.data.din.bitf.bit11 = GetDinStatus(12);
	monio.data.din.bitf.bit10 = GetDinStatus(11);
	monio.data.din.bitf.bit9  = GetDinStatus(10);
	monio.data.din.bitf.bit8  = GetDinStatus(9);
	monio.data.din.bitf.bit7  = GetDinStatus(8);
	monio.data.din.bitf.bit6  = GetDinStatus(7);
	monio.data.din.bitf.bit5  = GetDinStatus(6);
	monio.data.din.bitf.bit4  = GetDinStatus(5);
	monio.data.din.bitf.bit3  = GetDinStatus(4);
	monio.data.din.bitf.bit2  = GetDinStatus(3);
	monio.data.din.bitf.bit1  = GetDinStatus(2);
	monio.data.din.bitf.bit0  = GetDinStatus(1);
	
	// AIN
	monio.data.ain[0]  = (sint16)GetAinVoltage( AIN_ALT_R );
	monio.data.ain[1]  = (sint16)GetAinVoltage( AIN_OBSERVER_STATUS_SIG );
	monio.data.ain[10] = (sint16)GetAinVoltage( AIN_REG_BANK_SENSOR );

	monio.data.dout.bitf.bit0  = Turnlight_GetOutput( tlRight );
	monio.data.dout.bitf.bit1  = LuxPower_GetOutput();
	monio.data.dout.bitf.bit2  = Turnlight_GetOutput( tlLeft );
	monio.data.dout.bitf.bit3  = EGStart_GetOutput();
	monio.data.dout.bitf.bit4  = ModeLamp_GetOutput( clGreen );
	monio.data.dout.bitf.bit5  = ModeLamp_GetOutput( clYellow );
	monio.data.dout.bitf.bit6  = ModeLamp_GetOutput( clRed );
	monio.data.dout.bitf.bit7  = Headlight_GetOutput();
	monio.data.dout.bitf.bit8  = Horn_GetOutput();
	monio.data.dout.bitf.bit9  = SafetyHeartbeat_GetOutput();
	monio.data.dout.bitf.bit10 = Headlight_GetBeamOutput();
	monio.data.dout.bitf.bit11 = OdsPower_GetOutput();
	monio.data.dout.bitf.bit12 = 0; // 未使用
	monio.data.dout.bitf.bit13 = 0; // 未使用
	monio.data.dout.bitf.bit14 = 0; // 未使用
	monio.data.dout.bitf.bit15 = ParkingBrake_GetOutput(); 
}

//---------------------------------------------------------------------------
/**
 * 送信要求コマンドの受信
 */
//---------------------------------------------------------------------------
void MonSfInOut_ReceiveSendReq( uint8 dest, uint8* buf )
{
	sint16 interval;
	
	interval = Tools_GetPtrToShortS( &buf[0] );

	MonCtrl_SendMonData( &monio.ctrl, dest, interval );
}


