/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2006 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: LuxAngleMaint.c,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: Safety Controller
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/

#include "ahscommon.h"
#include "SfMaintenance.h"
#include "CanIDManager.h"
#include "RpcManager.h"
#include "ModeManager.h"
#include "LuxAngleMaint.h"
#include "FurukawaCommon.h"
//#include "LuxAngleCalib.h"

/**
 * プライベート関数
 */
static void LuxAngleMaint_SendProgress(MntItem item, sint16 prog);

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
sint8 LuxAngleMaint_Start(MntItem item)
{
    sint16 ret;

    // キャリブレーション開始
    if( item==mntItemCalibLuxR )
    {
		//ret = LuxAngleCalib_Start(posLuxRight);
	}
	else if( item==mntItemCalibLuxL )
	{
		//ret = LuxAngleCalib_Start(posLuxLeft);
    }
    else
    {
        ret = FAIL;
    }

    if( ret==SUCCESS )
    {
        // メンテナンスアイテム変更
        Maintenance_ChangeItem(item);
    }

    return(ret);
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
sint8 LuxAngleMaint_Cancel(MntItem item)
{
    sint16 ret;
    
    // キャンセルできるかどうか
    if( item==mntItemCalibLuxR )
	{
		//ret = LuxAngleCalib_Cancel(posLuxRight);
	}
	else if( item==mntItemCalibLuxL )
	{
		//ret = LuxAngleCalib_Cancel(posLuxLeft);
    }
    else
    {
		ret = FAIL;
	}
    
    if( ret==SUCCESS )
    {
        Maintenance_ChangeItem(mntItemNone);
    }

    return(ret);
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void  LuxAngleMaint_Main(MntItem item)
{
    static uint16 timer;
    sint16  prog;
	LuxPosition pos;

    if( item == mntItemCalibLuxR ) 
    {
		pos = posLuxRight;
	}
    else if( item == mntItemCalibLuxL ) 
    {
		pos = posLuxLeft;
	}
    else { return; }


    // プログレスの送信（１秒毎）
    if( timer++ % T_1SEC == 0 )
    {
		//
		//prog = LuxAngleCalib_GetProgress(pos);

        LuxAngleMaint_SendProgress(item,prog);
        
        if( prog == 100 ) // 成功
        {
            // resultの送信
            Maintenance_SendMntResult(item,SUCCESS);

            Maintenance_ChangeItem(mntItemNone);
        }
        else if (prog == -1 ) // 失敗
        {
            // resultの送信
            Maintenance_SendMntResult(item,FAIL);

            Maintenance_ChangeItem(mntItemNone);
        }
    }
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
bool LuxAngleMaint_Reset(void)
{
    if( Mode_GetCurrentMode() != modeMaintenance ) return(FAIL);

   // LuxAngleCalib_RestoreDefault();

    return(SUCCESS);
}


//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
void LuxAngleMaint_SendProgress(MntItem item, sint16 prog)
{
	uint8  prior, dest;

    StructMntProgress msg;
    
    if( prog == -1 ) return;

    msg.item     = (sint8)item;
    msg.progress = prog;
    msg.value    = 0;
    
    // 送信先アドレスのセット
    dest = Maintenance_GetSource();

    if( dest == CanIDManager_GetSupervisorCanID() ) { prior = CanIDManager_GetSupervisorPriority(); }
    else if( dest==MBI_A ) { prior = PRIOR_MBI; }
    else { prior = PRIOR5; }
    
    // 送信
//  RpcManager_SendMsg( CAN_A,
    RpcManager_SendMsg( Maintenance_GetCANPort(dest),
                        MNT_PROGRESS,
                        dest,
                        prior,
                        sizeof(StructMntProgress),
                        (uint8*)&msg);
}

