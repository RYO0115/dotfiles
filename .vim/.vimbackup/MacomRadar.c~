/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2009 Komatsu Ltd. All rights reserved.
 * 
 *    $RCSfile: MacomDataMsg.h,v $
 *    $Revision: 1.1.1.1 $
 *    $Author: tojima $
 *    $Date: 2009/09/15 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: Communication module with MMR1C
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/

#include "ahscommon.h"
#include "MacomRadar.h"
#include "AhsTools.h"
#include "ModeManager.h"
#include "ErrorManager.h"
#include "ClippingAreaManager.h"
#include "AppIfdef.h"



/**
 * プロトタイプ宣言
 */
static void MacomRadar_CopyRpcData(StructMacom *pRadar);
static void MacomRadar_ClearClippedObject(StructMacom *pRadar);

//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void MacomRadar_Init(
      StructMacom *pRadar,  /**< レーダオブジェクトのポインタ */
      MacomPosition pos,    /**< レーダチャンネル */
      bool flag,            /**< レーダがあるかないか */
      sint16 xpos,          /**< リアアクスルからのレーダの位置[mm] */
      sint16 ypos,          /**< 車両中央からのレーダの位置[mm]     */
      sint16 angle          /**< 基本取り付け角度オフセット [2pi/65536] */
      )
{
    uint16 offset;

    pRadar->pos   = pos;

    pRadar->baseX     = (float32)xpos;  // [mm]
    pRadar->baseY     = (float32)ypos;  // [mm]
    pRadar->baseAngle = angle;

    pRadar->valid = flag;
    
    pRadar->mode      = BLANK_MODE;
    pRadar->updated   = FALSE;
    pRadar->targetNum = 0;
    pRadar->healthy   = FALSE;


    // ダブルバッファ
    pRadar->ptrRec = &(pRadar->msg1);
    pRadar->ptrUse = &(pRadar->msg2);

    // 
    MacomRadar_ClearClippedObject(pRadar);
    
    // 故障コード
    offset = (uint16)pos;
    MacomSelfDiag_Init( &(pRadar->selfdiag[0]),  MACOM_ERR_TEMPERATURE_HIGH,          (E_SRR_TEMP_HIGH1        + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[1]),  MACOM_ERR_VOLTAGE_LOW,               (E_SRR_VOLTAGE1          + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[2]),  MACOM_ERR_VOLTAGE_HIGH,              (E_SRR_VOLTAGE1          + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[3]),  MACOM_ERR_SENSITIVITY_LOW_EXTERNAL,  (E_SRR_SENSITIVITY1      + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[4]),  MACOM_ERR_ADDRESS_UNSTABLE,          (E_SRR_ADDRESS1          + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[5]),  MACOM_ERR_SENSITIVITY_LOW_INTERNAL,  (E_SRR_SENSITIVITY1      + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[6]),  MACOM_ERR_HARDWARE_FAILURE_INIT,     (E_SRR_HARDWARE_FAILURE1 + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[7]),  MACOM_ERR_CALIBRATION_FAILURE,       (E_SRR_CALIBRATION_FAIL1 + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[8]),  MACOM_ERR_HARDWARE_FAILURE_ONLINE,   (E_SRR_HARDWARE_FAILURE1 + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[9]),  MACOM_ERR_HIGH_ERROR_FRAMES,         (E_SRR_CAN_ERROR1        + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[10]), MACOM_ERR_CONTENT_INVALID,           (E_SRR_CAN_ERROR1        + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[11]), MACOM_ERR_SYNC_TIMENG_INVALID,       (E_SRR_CAN_ERROR1        + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[12]), MACOM_ERR_BLOCKAGE,                  (E_SRR_BLOCKAGE1         + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[13]), MACOM_ERR_SENSITIVITY_LOW_EXT_NOVEL, (E_SRR_SENSITIVITY1      + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[14]), MACOM_ERR_ASIL_FAILURE,              (E_SRR_HARDWARE_FAILURE1 + (0x10 * offset)) );
    MacomSelfDiag_Init( &(pRadar->selfdiag[15]), MACOM_ERR_SOFTFAULT,                 (E_SRR_OTHER1            + (0x10 * offset)) );
    
    pRadar->packetCounter = 0;
}

//---------------------------------------------------------------------------
/**
 * メイン
 */
//---------------------------------------------------------------------------
void MacomRadar_PreMain(
     StructMacom *pRadar,   /**< レーダオブジェクトのポインタ */
     sint32 truckX,         /**< 車両の位置 [mm] */
     sint32 truckY,         /**< 車両の位置 [mm] */
     sint16 truckDir,       /**< 車両の方位角 [1/65536] */
     float32  cs,           /**< 方位角のCOS成分 */
     float32  sn            /**< 方位角のSIN成分 */
     )
{
    float32 rx, ry;
    ZoneType zoneType;

    // RPCバッファのコピー
    MacomRadar_CopyRpcData(pRadar);

    // ClippingAreaのZoneTypeの取得
    zoneType = ClippingArea_GetZoneType();

    // 絶対座標(通常走行)
    if( ( zoneType == zoneAutoRun )
     || ( zoneType == zoneTest2 )
     || ( zoneType == zoneTest4 )
     || ( zoneType == zoneTestRear2 )
     )
    {
        // レーダの位置の計算
        // 車両の方位角分だけ回転
        rx = (pRadar->baseX * cs) - (pRadar->baseY * sn);   // [mm]
        ry = (pRadar->baseX * sn) + (pRadar->baseY * cs);   // [mm]

        // 車両の位置だけ平行移動
        pRadar->radarX  = (sint32)rx + truckX;
        pRadar->radarY  = (sint32)ry + truckY;

        // 基本レーダの向き（車両の方位角＋取り付けオフセット）
        pRadar->radarTheta = truckDir + pRadar->baseAngle;
    }
    else
    {
        // 点検中などは後輪中心座標にする
        pRadar->radarX     = (sint32)pRadar->baseX;
        pRadar->radarY     = (sint32)pRadar->baseY;
        pRadar->radarTheta = pRadar->baseAngle;
    }
}


void MacomRadar_Main(const StructMacom *pRadar)
{
    //
}

void MacomRadar_PostMain(StructMacom *pRadar)
{
    pRadar->updated = FALSE;
    
    // 検知ターゲット情報をクリア
    pRadar->targetNum = 0;

    // 
    MacomRadar_ClearClippedObject(pRadar);
}

//---------------------------------------------------------------------------
/**
 * TrackDataMsgの受信
 */
//---------------------------------------------------------------------------
void MacomRadar_SetTracks(StructMacom *pRadar, const uint8 *msg)
{
    sint16  i;
    sint16  range, speed, power;
    sint8   deg;
    float32 rangef, cs, sn;
    StructMacomDataMsg*   ptrTmp;

    #ifdef _MACOM_PRINTF_
    uint8 str[128];
    #endif

    pRadar->ptrRec->numMode      = (sint8)msg[0];
    pRadar->ptrRec->msgCntSnsrNo = (sint8)msg[1];
    pRadar->ptrRec->diagnosis    = Tools_GetPtrToShortU(&msg[2]);
    
    pRadar->ptrRec->targetNum  = (sint16)( pRadar->ptrRec->numMode & 0x0f);
    pRadar->ptrRec->msgCounter = (sint16)((pRadar->ptrRec->msgCntSnsrNo & 0xf0) >> 4 );
    pRadar->ptrRec->mode       = (uint8)( (pRadar->ptrRec->numMode & 0xf0) >> 4 );

    for( i=0; i<pRadar->ptrRec->targetNum; i++ )
    {
        range = Tools_GetPtrToShortU(&msg[4+6*i]);
        speed = Tools_GetPtrToShortU(&msg[6+6*i]);
        deg   = msg[8+6*i];
        power = msg[9+6*i];

        pRadar->ptrRec->tracks[i].range = 10 * (sint32)range;                 // [mm]
        pRadar->ptrRec->tracks[i].speed = 10 * (sint32)speed;                 // [mm/s]
        pRadar->ptrRec->tracks[i].angle = Tools_deg2circular((float32)deg);   // 
        pRadar->ptrRec->tracks[i].power = (sint16)power;                      // [dB]

        // ターゲットのXY座標(グローバル座標)
        cs = Tools_GetCos(pRadar->radarTheta + pRadar->ptrRec->tracks[i].angle);
        sn = Tools_GetSin(pRadar->radarTheta + pRadar->ptrRec->tracks[i].angle);

        rangef = (float32)pRadar->ptrRec->tracks[i].range;

        pRadar->ptrRec->tracks[i].xpos  = (sint32)( (rangef * cs) + (float32)pRadar->radarX );  // [mm]
        pRadar->ptrRec->tracks[i].ypos  = (sint32)( (rangef * sn) + (float32)pRadar->radarY );  // [mm]

		// リア中心座標系での位置も計算する
        cs = Tools_GetCos(pRadar->baseAngle + pRadar->ptrRec->tracks[i].angle);
        sn = Tools_GetSin(pRadar->baseAngle + pRadar->ptrRec->tracks[i].angle);

        pRadar->ptrRec->tracks[i].localX  = (sint32)( (rangef * cs) + pRadar->baseX );  // [mm]
        pRadar->ptrRec->tracks[i].localY  = (sint32)( (rangef * sn) + pRadar->baseY );  // [mm]

    }

    // 受信し終わったらスワップ
    ptrTmp         = pRadar->ptrUse;
    pRadar->ptrUse = pRadar->ptrRec;
    pRadar->ptrRec = ptrTmp;

    pRadar->updated = TRUE;
    
    pRadar->packetCounter++;
}

//---------------------------------------------------------------------------
/**
 * VersionMsgの受信
 */
//---------------------------------------------------------------------------
void MacomRadar_SetVersion(StructMacom *pRadar, const uint8 *msg)
{
    pRadar->hw_version      = Tools_GetPtrToShortU(&msg[0]);
    pRadar->sw_version      = Tools_GetPtrToShortU(&msg[2]);
    pRadar->VCO_temperature = Tools_GetPtrToShortS(&msg[4]);
}
//---------------------------------------------------------------------------
/**
 * 故障診断
 */
//---------------------------------------------------------------------------
void MacomRadar_CheckRbiSrrCommunication(StructMacom *pRadar)
{
    // SRBI-MACOMの通信チェック
    // 通信異常状態が1秒以上続いたら、エラーとする
    if( (pRadar->valid == TRUE) && (pRadar->comValid == FALSE) )
    {
        pRadar->healthy = FALSE;

        if( pRadar->pos == posSrrRight)
        {
            Error_Set(E_SRR_NORESPONCE1);
        }
        else if( pRadar->pos == posSrrCenter)
        {
            Error_Set(E_SRR_NORESPONCE2);
        }
        else if( pRadar->pos == posSrrLeft)
        {
            Error_Set(E_SRR_NORESPONCE3);
        }
        else if( pRadar->pos == posSrrRear)
        {
            Error_Set(E_SRR_NORESPONCE4);
        }
        else
        {
            // do nothing
        }
    }
    else
    {
        
    }
}

//---------------------------------------------------------------------------
/**
 * SRR内部の故障診断
 */
//---------------------------------------------------------------------------
void MacomRadar_SelfDiagnosis(StructMacom *pRadar)
{
    sint16 i;
    bool   ret;

    if( pRadar->valid == TRUE )
    {
        if( pRadar->comValid == FALSE )     // 通信異常のときは故障診断をしない
        {
            MacomRadar_SelfDiagnosisClear(pRadar);  // カウンタはクリア
        }
        else
        {
            for( i=0 ; i<NUM_MACOM_ERROR_CODE; i++ )
            {
                ret = MacomSelfDiag_CheckIfHealthy( &(pRadar->selfdiag[i]), pRadar->packet.diagnosis );

                if( ret == FALSE )
                {
                    pRadar->healthy = FALSE;  // レーダ異常
                }
                else
                {
                    // そのまま
                }
            }
        }
    }
    else
    {
        //
    }
}
//---------------------------------------------------------------------------
/**
 * SRR内部の故障診断
 */
//---------------------------------------------------------------------------
void MacomRadar_SelfDiagnosisClear(const StructMacom *pRadar)
{
    sint16 i;
    
    if( pRadar->valid == TRUE )
    {
        for( i=0 ; i<NUM_MACOM_ERROR_CODE; i++ )
        {
            MacomSelfDiag_ClearError( &(pRadar->selfdiag[i]) );
        }
    }
    else
    {
        //
    }
}

//---------------------------------------------------------------------------
/**
 * 最短距離のターゲットをセットする
 */
//---------------------------------------------------------------------------
void MacomRadar_SetClippedObject(
     StructMacom *pRadar,
     sint32 range,
     sint16 angle,
     sint16 power,
     sint32 xpos,
     sint32 ypos
     )
{
    if( pRadar->closestObject.range > range )
    {
        pRadar->closestObject.range = range;
        pRadar->closestObject.angle = angle;
        pRadar->closestObject.power = power;
        pRadar->closestObject.xpos  = xpos;
        pRadar->closestObject.ypos  = ypos;

        #ifdef _MACOM_PRINTF_
/*
        sprintf(str,"%d: %d %ld %ld",pRadar->pos,
                                     pRadar->closestObject.range,
                                     pRadar->closestObject.xpos,
                                     pRadar->closestObject.ypos);
        CanDebugPrintf(str);
*/
        #endif

    }
    else
    {
        //
    }
}

//---------------------------------------------------------------------------
/**
 * レーダ取付け角度を変更する
 */
//---------------------------------------------------------------------------
void MacomRadar_SetBaseAngle(
      StructMacom *pRadar, 
      sint16 angle
      )
{
    if( pRadar->valid == TRUE )
    {
        pRadar->baseAngle = angle;
    }
    else
    {
        //
    }
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
/**
 * RPC受信バッファから外部参照用データ領域にコピー
 */
//---------------------------------------------------------------------------
static void MacomRadar_CopyRpcData(StructMacom *pRadar)
{
    sint16 i, num;

    #ifdef _MACOM_PRINTF_
    uint8 str[128];
    #endif

    if( pRadar->updated == TRUE )
    {
        // RPCの一次バッファからコピー
        pRadar->packet.numMode      = pRadar->ptrUse->numMode;
        pRadar->packet.msgCntSnsrNo = pRadar->ptrUse->msgCntSnsrNo;
        pRadar->packet.diagnosis    = pRadar->ptrUse->diagnosis;
        pRadar->packet.targetNum    = pRadar->ptrUse->targetNum;
        pRadar->packet.msgCounter   = pRadar->ptrUse->msgCounter;
        pRadar->packet.mode         = pRadar->ptrUse->mode;

        num = 0;
        for(i=0;i<pRadar->packet.targetNum;i++)
        {
            if( pRadar->ptrUse->tracks[i].range > 0 )
            {
                pRadar->packet.tracks[num].range  = pRadar->ptrUse->tracks[i].range;
                pRadar->packet.tracks[num].speed  = pRadar->ptrUse->tracks[i].speed;
                pRadar->packet.tracks[num].xpos   = pRadar->ptrUse->tracks[i].xpos;
                pRadar->packet.tracks[num].ypos   = pRadar->ptrUse->tracks[i].ypos;
                pRadar->packet.tracks[num].localX = pRadar->ptrUse->tracks[i].localX;
                pRadar->packet.tracks[num].localY = pRadar->ptrUse->tracks[i].localY;
                pRadar->packet.tracks[num].power  = pRadar->ptrUse->tracks[i].power;
                pRadar->packet.tracks[num].angle  = pRadar->ptrUse->tracks[i].angle;
                num++;
            }
            else
            {
                // do nothing
                #ifdef _MACOM_PRINTF_
                CanDebugPrintf("range negative");
                #endif
            }
        }

        pRadar->targetNum = num;

        #ifdef _MACOM_PRINTF_
        
        if( ( pRadar->pos == posSrrCenter ) || ( pRadar->pos == posSrrRear ) )
        {
            for( i=0; i<pRadar->targetNum; i++ )
            {
                sprintf(str,"%d: %d %d %d %d",i,
                                            pRadar->packet.tracks[i].range,
                                            pRadar->packet.tracks[i].xpos,
                                            pRadar->packet.tracks[i].ypos,
                                            pRadar->packet.tracks[i].angle);
                CanDebugPrintf(str);
            }
        }
        
        #endif

    }
    else
    {
        //
    }
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
static void MacomRadar_ClearClippedObject(StructMacom *pRadar)
{
    pRadar->closestObject.range = 100000;   // 100m
    pRadar->closestObject.angle = 0;
    pRadar->closestObject.power = 0;
}

