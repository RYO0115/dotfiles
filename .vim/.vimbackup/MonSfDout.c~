/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2005 Komatsu Ltd. All rights reserved.
 * 
 * $RCSfile: MonSfDout.h,v $
 * $Revision: 1.1.1.1 $
 * $Author: tojima $
 * $Date: 2005/07/06 06:36:19 $
 * $State: Exp $
 *
 * @brief: Safety Controller
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/

#include "ahscommon.h"
#include "MonCtrl.h"
#include "DataTypes.h"
#include "AppMain.h"
#include "AhsTools.h"

#include "MonSfDout.h"

#include "AppIoDefine.h"
#include "HeadLight.h"
#include "ModeLamp.h"
#include "Horn.h"
#include "SfHeartbeat.h"
#include "OdsPower.h"
#include "BrakeControl.h"
#include "EGStart.h"
#include "LuxPower.h"
#include "TurnLight.h"
#include "AppNvram.h"
#include "AhsAuxDevice.h"
#include "ParkingBrake.h"

/**
 * IN/OUT Data Msgの構造定義
 */
typedef struct{
	uint16    timestamp;  // タイムスタンプ
	uint16    id;         // データID
	BitWord   dout;
	BitWord   doutOpen;
	BitWord   doutGShort;
	BitWord   doutHShort;
} MonDoutMsg;

/**
 */
typedef struct{
	MonDoutMsg    data; // データメッセージ構造体
	StructMonCtrl ctrl; // 送信コントロールクラス
} StructMonDoutData;
 
/**
 * インスタンス定義
 */
static StructMonDoutData mondout;

//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void MonSfDout_Init( void )
{
	MonCtrl_Init( &mondout.ctrl, 
				  (sint16)sizeof(MonDoutMsg),
				  (uint8*)&mondout.data,
				  MonSfDout_SetData 
				);
}

//---------------------------------------------------------------------------
/**
 * メイン
 */
//---------------------------------------------------------------------------
void MonSfDout_Main( void )
{
	MonCtrl_Main( &mondout.ctrl );
}

//---------------------------------------------------------------------------
/**
 * データのセット
 */
//---------------------------------------------------------------------------
void MonSfDout_SetData( void )
{
	sint16 odsType;
	
	// レーダ構成の取得
	odsType = AppNvram_GetOdsType();

	mondout.data.timestamp = (uint16)AdtMain_GetMainCounter();
	mondout.data.id        = GET_SF_DOUT;
	
	// DOUT
	mondout.data.dout.bitf.bit0  = Turnlight_GetOutput( tlRight ); //  0  SOL_OUT_0
	mondout.data.dout.bitf.bit1  = LuxPower_GetOutput();           //  1  SOL_OUT_1
	mondout.data.dout.bitf.bit2  = Turnlight_GetOutput( tlLeft );  //  2  SOL_OUT_2
	mondout.data.dout.bitf.bit3  = EGStart_GetOutput();            //  3  SOL_OUT_3
	mondout.data.dout.bitf.bit4  = ModeLamp_GetOutput( clGreen );  //  4  SOL_OUT_4
	mondout.data.dout.bitf.bit5  = ModeLamp_GetOutput( clYellow ); //  5  SOL_OUT_5
	mondout.data.dout.bitf.bit6  = ModeLamp_GetOutput( clRed );    //  6  SOL_OUT_6
	mondout.data.dout.bitf.bit7  = Headlight_GetOutput();          //  7  SOL_OUT_7
	mondout.data.dout.bitf.bit8  = Horn_GetOutput();               //  8  SOL_OUT_8
	mondout.data.dout.bitf.bit9  = SafetyHeartbeat_GetOutput();    //  9  SOL_OUT_9
	mondout.data.dout.bitf.bit10 = Headlight_GetBeamOutput();      // 10  SOL_OUT_10A
	mondout.data.dout.bitf.bit11 = OdsPower_GetOutput();           // 11  SOL_OUT_10B
	//12  SOL_OUT_11A  空き
	//13  SOL_OUT_11B  空き
	//14  SIG_OUT_0    空き
	mondout.data.dout.bitf.bit15 = BrakeControl_GetParkingOutput();// 15 SIG_OUT_1
	
	// DOUT(断線フラグ)
	if( Turnlight_GetDiagnosis( tlRight ) == ioOpen ) { mondout.data.doutOpen.bitf.bit0  = ON;  }
	else                                              { mondout.data.doutOpen.bitf.bit0  = OFF; }
	if( LuxPower_GetDiagnosis()           == ioOpen ) { mondout.data.doutOpen.bitf.bit1  = ON;  }
	else                                              { mondout.data.doutOpen.bitf.bit1  = OFF; }
	if( Turnlight_GetDiagnosis( tlLeft )  == ioOpen ) { mondout.data.doutOpen.bitf.bit2  = ON;  }
	else                                              { mondout.data.doutOpen.bitf.bit2  = OFF; }
	if( EGStart_GetDiagnosis()            == ioOpen ) { mondout.data.doutOpen.bitf.bit3  = ON;  }
	else                                              { mondout.data.doutOpen.bitf.bit3  = OFF; }
	if( ModeLamp_GetDiagnosis( clGreen )  == ioOpen ) { mondout.data.doutOpen.bitf.bit4  = ON;  }
	else                                              { mondout.data.doutOpen.bitf.bit4  = OFF; }
	if( ModeLamp_GetDiagnosis( clYellow ) == ioOpen ) { mondout.data.doutOpen.bitf.bit5  = ON;  }
	else                                              { mondout.data.doutOpen.bitf.bit5  = OFF; }
	if( ModeLamp_GetDiagnosis( clRed )    == ioOpen ) { mondout.data.doutOpen.bitf.bit6  = ON;  }
	else                                              { mondout.data.doutOpen.bitf.bit6  = OFF; }
	if( Headlight_GetDiagnosis()          == ioOpen ) { mondout.data.doutOpen.bitf.bit7  = ON;  }
	else                                              { mondout.data.doutOpen.bitf.bit7  = OFF; }
	if( Horn_GetDiagnosis()               == ioOpen ) { mondout.data.doutOpen.bitf.bit8  = ON;  }
	else                                              { mondout.data.doutOpen.bitf.bit8  = OFF; }
	// DOUT 9  はハートビート
	if( Headlight_GetBeamDiagnosis()      == ioOpen ) { mondout.data.doutOpen.bitf.bit10 = ON;  }
	else                                              { mondout.data.doutOpen.bitf.bit10 = OFF; }
	if( OdsPower_GetDiagnosis()           == ioOpen ) { mondout.data.doutOpen.bitf.bit11 = ON;  }
	else                                              { mondout.data.doutOpen.bitf.bit11 = OFF; }
	// DOUT 12 は未使用
	// DOUT 13 は未使用
	// DOUT 14 は未使用
	if( ParkingBrake_GetDiagnosis()       == ioOpen ) { mondout.data.doutOpen.bitf.bit15 = ON;  }
	else                                              { mondout.data.doutOpen.bitf.bit15 = OFF; }
	
	// DOUT(短絡フラグ)
	if( Turnlight_GetDiagnosis( tlRight ) == ioGndShort ) { mondout.data.doutGShort.bitf.bit0  = ON;  }
	else                                                  { mondout.data.doutGShort.bitf.bit0  = OFF; }
	if( LuxPower_GetDiagnosis()           == ioGndShort ) { mondout.data.doutGShort.bitf.bit1  = ON;  }
	else                                                  { mondout.data.doutGShort.bitf.bit1  = OFF; }
	if( Turnlight_GetDiagnosis( tlLeft )  == ioGndShort ) { mondout.data.doutGShort.bitf.bit2  = ON;  }
	else                                                  { mondout.data.doutGShort.bitf.bit2  = OFF; }
	if( EGStart_GetDiagnosis()            == ioGndShort ) { mondout.data.doutGShort.bitf.bit3  = ON;  }
	else                                                  { mondout.data.doutGShort.bitf.bit3  = OFF; }
	if( ModeLamp_GetDiagnosis( clGreen )  == ioGndShort ) { mondout.data.doutGShort.bitf.bit4  = ON;  }
	else                                                  { mondout.data.doutGShort.bitf.bit4  = OFF; }
	if( ModeLamp_GetDiagnosis( clYellow ) == ioGndShort ) { mondout.data.doutGShort.bitf.bit5  = ON;  }
	else                                                  { mondout.data.doutGShort.bitf.bit5  = OFF; }
	if( ModeLamp_GetDiagnosis( clRed )    == ioGndShort ) { mondout.data.doutGShort.bitf.bit6  = ON;  }
	else                                                  { mondout.data.doutGShort.bitf.bit6  = OFF; }
	if( Headlight_GetDiagnosis()          == ioGndShort ) { mondout.data.doutGShort.bitf.bit7  = ON;  }
	else                                                  { mondout.data.doutGShort.bitf.bit7  = OFF; }
	if( Horn_GetDiagnosis()               == ioGndShort ) { mondout.data.doutGShort.bitf.bit8  = ON;  }
	else                                                  { mondout.data.doutGShort.bitf.bit8  = OFF; }
	// DOUT 9 はハートビート
	//
	if( Headlight_GetBeamDiagnosis()      == ioGndShort ) { mondout.data.doutGShort.bitf.bit10 = ON;  }
	else                                                  { mondout.data.doutGShort.bitf.bit10 = OFF; }
	if( OdsPower_GetDiagnosis()           == ioGndShort ) { mondout.data.doutGShort.bitf.bit11 = ON;  }
	else                                                  { mondout.data.doutGShort.bitf.bit11 = OFF; }
	// DOUT 12 は未使用
	// DOUT 13 は未使用
	// DOUT 14 は未使用
	if( ParkingBrake_GetDiagnosis()       == ioGndShort ) { mondout.data.doutGShort.bitf.bit15 = ON;  }
	else                                                  { mondout.data.doutGShort.bitf.bit15 = OFF; }


	// DOUT(天絡フラグ)
	if( Turnlight_GetDiagnosis( tlRight ) == ioHotShort ) { mondout.data.doutHShort.bitf.bit0  = ON;  }
	else                                                  { mondout.data.doutHShort.bitf.bit0  = OFF; }
	if( LuxPower_GetDiagnosis()           == ioHotShort ) { mondout.data.doutHShort.bitf.bit1  = ON;  }
	else                                                  { mondout.data.doutHShort.bitf.bit1  = OFF; }
	if( Turnlight_GetDiagnosis( tlLeft )  == ioHotShort ) { mondout.data.doutHShort.bitf.bit2  = ON;  }
	else                                                  { mondout.data.doutHShort.bitf.bit2  = OFF; }
	if( EGStart_GetDiagnosis()            == ioHotShort ) { mondout.data.doutHShort.bitf.bit3  = ON;  }
	else                                                  { mondout.data.doutHShort.bitf.bit3  = OFF; }
	if( ModeLamp_GetDiagnosis( clGreen )  == ioHotShort ) { mondout.data.doutHShort.bitf.bit4  = ON;  }
	else                                                  { mondout.data.doutHShort.bitf.bit4  = OFF; }
	if( ModeLamp_GetDiagnosis( clYellow ) == ioHotShort ) { mondout.data.doutHShort.bitf.bit5  = ON;  }
	else                                                  { mondout.data.doutHShort.bitf.bit5  = OFF; }
	if( ModeLamp_GetDiagnosis( clRed )    == ioHotShort ) { mondout.data.doutHShort.bitf.bit6  = ON;  }
	else                                                  { mondout.data.doutHShort.bitf.bit6  = OFF; }
	if( Headlight_GetDiagnosis()          == ioHotShort ) { mondout.data.doutHShort.bitf.bit7  = ON;  }
	else                                                  { mondout.data.doutHShort.bitf.bit7  = OFF; }
	if( Horn_GetDiagnosis()               == ioHotShort ) { mondout.data.doutHShort.bitf.bit8  = ON;  }
	else                                                  { mondout.data.doutHShort.bitf.bit8  = OFF; }
	// DOUT 9 はハートビート
	if( Headlight_GetBeamDiagnosis()      == ioHotShort ) { mondout.data.doutHShort.bitf.bit10 = ON;  }
	else                                                  { mondout.data.doutHShort.bitf.bit10 = OFF; }
	if( OdsPower_GetDiagnosis()           == ioHotShort ) { mondout.data.doutHShort.bitf.bit12 = ON;  }
	else                                                  { mondout.data.doutHShort.bitf.bit12 = OFF; }
	// DOUT 12 は未使用
	// DOUT 13 は未使用
	// DOUT 14 は未使用
	if( ParkingBrake_GetDiagnosis()       == ioHotShort ) { mondout.data.doutHShort.bitf.bit15 = ON;  }
	else                                                  { mondout.data.doutHShort.bitf.bit15 = OFF; }
}

//---------------------------------------------------------------------------
/**
 * 送信要求コマンドの受信
 */
//---------------------------------------------------------------------------
void MonSfDout_ReceiveSendReq( uint8 dest, uint8* buf )
{
	sint16 interval;
	
	interval = Tools_GetPtrToShortS( &buf[0] );

	MonCtrl_SendMonData( &mondout.ctrl, dest, interval);
}


