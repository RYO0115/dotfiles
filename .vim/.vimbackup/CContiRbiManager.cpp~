
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "CContiRbiManager.h"

CContiRbiManager::CContiRbiManager(void)
{
	//
}

void CContiRbiManager::RbiManagerInit(void)
{
#ifdef _CONTIRBI_SIMULATOR

	ContirbiObj.RbiInit(RBI2, CRBI_MOUNT_XC,    0.0,      0.0);  // Center

	ClipAreaObj.ClipAreaInit(LBI1);

    //SIMPCだとSafetyコンの転送機能に対応していないため、MBIとFRのVersionが取得できない
    //そのため、ノードアドレスをPCTOOLにする。
	CRpcVersionInfoObj.Init(PCTOOL);

#endif
}

void CContiRbiManager::RbiManagerClose(void)
{
#ifdef _CONTIRBI_SIMULATOR
	ContirbiObj.RbiClose();

	ClipAreaObj.ClipAreaClose();
	CRpcVersionInfoObj.Close();

#endif
}

void CContiRbiManager::RbiManagerMain(double xpos, double ypos, double yaw)
{
#ifdef _CONTIRBI_SIMULATOR

	ContirbiObj.RadarMain(xpos,ypos,yaw);
	ContirbiObj.RbiMain();		// RBIのメインルーチン

	ClipAreaObj.ClipAreaMain(xpos,ypos,yaw);
    CRpcVersionInfoObj.Main();

#endif
}

void CContiRbiManager::setHandle(HWND hnd)
{
    ContirbiObj.setHandle(hnd);

	ClipAreaObj.setHandle(hnd);
    CRpcVersionInfoObj.setHandle(hnd);
}

int CContiRbiManager::GetHandle(void)
{
	return(handle);
}

int CContiRbiManager::CanOpen(int ch)
{
	int ret = 0;
#ifdef _CONTIRBI_SIMULATOR

	// ハンドルクリア
	ContirbiObj.SetHandle(canINVALID_HANDLE);

	ClipAreaObj.SetHandle(canINVALID_HANDLE);
    CRpcVersionInfoObj.SetHandle(canINVALID_HANDLE);

	ContirbiObj.CanClose();

	ClipAreaObj.CanClose();
    CRpcVersionInfoObj.CanClose();


	handle = canOpenChannel(ch, canWANT_EXCLUSIVE|canWANT_VIRTUAL);

	ret = ContirbiObj.SetHandle(handle);

	ClipAreaObj.SetHandle(handle);
    CRpcVersionInfoObj.SetHandle(handle);

	ContirbiObj.SetGpsCanONOFF(ON);

//	ClipAreaObj.SetGpsCanONOFF(ON);
  CRpcVersionInfoObj.SetCanONOFF(ON);


#endif

	return(ret);
}


int CContiRbiManager::SetReceiveBuffer( long id, uchar *data, uint dlc )
{
	uchar addr;
	int ret = 0;

	id = (0x00FF & id);
	addr = (uchar)id;

	// ブロードキャスト
	if( addr == 0xFF )
	{
		ContirbiObj.SetReceiveBuffer(id,data,dlc);
		ret = ClipAreaObj.SetReceiveBuffer(id,data,dlc);
		ret = CRpcVersionInfoObj.SetReceiveBuffer(id,data,dlc);
	}
	else if( addr == ClipAreaObj.GetSelfId() )
	{
		ret = ClipAreaObj.SetReceiveBuffer(id,data,dlc);
	}
	else if( addr == CRpcVersionInfoObj.GetSelfId() )
	{
		ret = CRpcVersionInfoObj.SetReceiveBuffer(id,data,dlc);
	}
	else
	{
		// 自分あてか、ブロードキャストは受け取る
		if( addr == ContirbiObj.GetSelfId() )
		{
			ret = ContirbiObj.SetReceiveBuffer(id,data,dlc);
		//	break;
		}
	}

	return(ret);
}


void CContiRbiManager::RadarSetOnceDetected(int ch)
{
	ContirbiObj.RadarSetOnceDetected(); 
}
void CContiRbiManager::RadarSetDetected(int ch)
{
	ContirbiObj.RadarSetDetected(); 
}
void CContiRbiManager::RadarSetNotDetected(int ch)
{
	ContirbiObj.RadarSetNotDetected(); 
}

void CContiRbiManager::RadarTestStopScanning(bool flag)
{

}
void CContiRbiManager::RadarTestStopRadiating(bool flag)
{
    ContirbiObj.RadarTestStopRadiating(flag);
}

