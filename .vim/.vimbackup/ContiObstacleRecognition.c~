/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2006 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: ContiObstacleRecognition.h,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: Safety Controller
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/


#include "ahscommon.h"
#include "AppMain.h"
#include "ContiObstacleRecognition.h"
#include "AhsLocation.h"
#include "Horn.h"
#include "ModeManager.h"
#include "ErrorManager.h"
#include "ContiObstList.h"
#include "Ars408Manager.h"
#include "OdsDisable.h"
#include "ObstReport.h"
#include "RpcManager.h"
#include "OdsAction.h"
//#include "ObstacleRecognition.h"
//#include "SrrObstacleRecognition.h"
#include "FurukawaObstacleRecognition.h"
#include "MaskContain.h"
#include "ClippingAreaManager.h"
//#include "Acc3Manager.h"
#include "TruckInfo.h"
#include "AhsTools.h"
#include "RpcService.h"
#include "ContiThreshold.h"
#include "WarningManager.h"
#include "AppIfdef.h"


#define _ARS408_RECOG_PRINTF_

#ifdef _ARS408_RECOG_PRINTF_
static uint8  arsDebugStr[128];
#endif


#define CONTI_NUM_OBST_LIST  10      /**< トラッキングできるターゲット数 */
#define STOP_SCORE         100      /**<  */
#define SLOW_SCORE          40      /**<  */

#define SAME_OBJECT_DISTANCE    5000  /**< 同一物体と認識する距離 [mm] */
#define VANISH_DISTANCE       120000  /**< 遠くに消えて忘れる距離 [mm] */

/**
 * ObstacleRecognitionクラスの属性定義
 */
typedef struct{
	OdsAction          warningFlag;
	StructContiObstList list[CONTI_NUM_OBST_LIST];   /**< 障害物候補リスト     */
	bool               detectFlag;
	bool               suspend;                   /**< BlindRun用に一時的にレーダを殺す */
    bool               disable;                   /**< テスト用（ODS無視）*/
    bool               sendListInfoToPc;          /**< テスト用モニパソ出力 */
} StructContiObstRecog;


/**
 * インスタンス定義
 */
static StructContiObstRecog  contiObst;


/**
 * プライベート関数定義
 */
static void   ContiObstRecog_ExtractCandidate(void);
static bool ContiObstRecog_SetObstacle(
       sint32 range,      /** < 距離 [mm] */
       sint16 speed,      /** < 相対速度 [mm/sec] */
       sint32 xpos,       /** < 検知ターゲットのX座標 [mm] */
       sint32 ypos,       /** < 検知ターゲットのY座標 [mm] */
       sint16 power,     /** < 検知ターゲットの反射強度 */
       sint16 score      /** < 検知ターゲットの得点 */
       );
static void   ContiObstRecog_ClearAllObstacle(void);
static bool   ContiObstRecog_isListEmpty(sint16 index);
static sint16 ContiObstRecog_SearchList(sint32 range, uint32 time);
static sint16 ContiObstRecog_GetAvailableList(void);
static void   ContiObstRecog_DetectObstale(void);
static void   ContiObstRecog_ClearPassedList(ModeType mode);
static void   ContiObstRecog_UpdateExpectedRange(void);
//static sint16 ContiObstRecog_CalcScore(sint16 speed);
static void   ContiObstRecog_SendListToMonitor(void);
static void   ContiObstRecog_WarningClear(void);
static void   ContiObstRecog_SetWarning(void);
static void   ContiObstRecog_SetError(void);
static bool   ContiObstRecog_CheckRelativeSpeed(
	 sint16 speed             /**< 計測された速度 */
     );
static sint16 ContiObstRecog_CalcScore(void);

//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void ContiObstRecog_Init(void)
{
    contiObst.detectFlag       = OFF;
    contiObst.disable          = FALSE;
    contiObst.suspend          = FALSE;
    contiObst.sendListInfoToPc = TRUE;
    contiObst.warningFlag      = odsOk;

    ContiObstRecog_ClearAllObstacle();
    ContiThreshold_Init();
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void ContiObstRecog_PreMain(void)
{
    sint16 stat;
    ModeType mode;
    
    if( ( contiObst.disable == FALSE ) && ( contiObst.suspend == FALSE ) )
    {
        mode = Mode_GetCurrentMode();

        // ターゲットの抽出
    	if( mode == modeAuto || mode == modeManual)
        {
            stat = TruckInfo_GetMovingStatus();

            if( stat == MOVE_FORWARD )
            {
                ContiObstRecog_ExtractCandidate();
            }
            else
            {
                //
            }
        }
        else
        {
			;
        }
    }
    else
    {
        //
    }
}

//---------------------------------------------------------------------------
/**
 * メイン
 */
//---------------------------------------------------------------------------
void ContiObstRecog_Main(void)
{
    ModeType mode, modePrev;
    static bool prevDetectFlag = OFF;
    
    mode     = Mode_GetCurrentMode();
    modePrev = Mode_GetPreviousMode();
    
    if( contiObst.detectFlag == ON )
    {
        if( ( mode != modeAuto ) && ( modePrev == modeAuto ) )
        {
            contiObst.detectFlag = OFF;

            // 障害物リストをクリア
            ContiObstRecog_ClearAllObstacle();
            
            // BlindRUNを開始
            OdsDisable_BlindRunStart();
        }
    }
    else
    {
        //
    }

    // Sモードになったら一旦障害物リストをクリア
    if( ( mode == modeStop ) && ( modePrev != modeStop ) )
    {
        // 障害物リストをクリア
        ContiObstRecog_ClearAllObstacle();

        contiObst.detectFlag = OFF;
    }
    else
    {
        //
    }

    // 通り過ぎたもの、遠くに去ったものは削除
    ContiObstRecog_ClearPassedList(mode);

    // 得点閾値を超えたものがあったらエラーまたはワーニング
    ContiObstRecog_DetectObstale();

    // リストに登録されている障害物の次の予想距離を計算
    ContiObstRecog_UpdateExpectedRange();

    // 障害物を検知したらホーンを鳴らす
    // （他のレーダが既に検知中でないとき）
    if( ( contiObst.detectFlag == ON ) 
     && ( prevDetectFlag == OFF ) 
     && ( ContiObstRecog_GetDetectFlag() == OFF ) 
    )
    {
        Horn_Honk(hornWarning);
    }

    // テスト用モニパソに送信
    ContiObstRecog_SendListToMonitor();

    prevDetectFlag = contiObst.detectFlag;

}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void ContiObstRecog_PostMain(void)
{
    // 
}

//---------------------------------------------------------------------------
/**
 * Conti機能を殺す
 */
//---------------------------------------------------------------------------
void ContiObstRecog_Disable(void)
{
    contiObst.disable = TRUE;
}
//---------------------------------------------------------------------------
/**
 * Conti機能を使う
 */
//---------------------------------------------------------------------------
void ContiObstRecog_Enable(void)
{
    contiObst.disable = FALSE;
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void ContiObstRecog_Suspend(bool flag)
{
    contiObst.suspend = flag;
}

//---------------------------------------------------------------------------
/**
 * レーダが障害物を検知し、停止しようとしているかどうか
 */
//---------------------------------------------------------------------------
bool ContiObstRecog_GetDetectFlag(void)
{
    return(contiObst.detectFlag);
		
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**
 * 相対速度による危険度のチェック
 * @return
 */
//---------------------------------------------------------------------------
bool ContiObstRecog_CheckRelativeSpeed(
	 sint16 speed               /**< 計測された速度 [0.1m/s = 100mm/s]]*/
     )
{
    bool ret;
    
    if( speed > 0 ) 
	{
		ret = TRUE;  // 符号の定義がわからないので、とれあえず、両方TRUEとした
	}
	else
	{
		ret = TRUE;
	}
   
    return(ret);
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
MaskType ContiObstRecog_CompareWithMask(sint32 xmm, sint32 ymm)
{
    MaskType mask;

    if( Mode_GetCurrentMode() == modeAuto )
    {
        mask = MaskContain_RadarMask(xmm,ymm);
    }
    else
    {
        mask = maskRegular;
    }

    return(mask);
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void ContiObstRecog_ExtractCandidate(void)
{
    sint16 num, i;
	sint16 ret;
	sint16 score, speed, minPower;
	sint32 latpos;
    StructArs408TargetInfo *pTarget;
	StructStatusMsgARS408* ars408Status;

    bool   valid;
    MaskType targetMask;
    sint8  type;

    // レーダ情報取得
    num = Ars408Manager_GetTargetNum();

	#ifdef _ARS408_RECOG_PRINTF_
	sprintf(arsDebugStr,"targetNum = %d",num);
	CanDebugPrintf(arsDebugStr);
	#endif

	ars408Status = Ars408Manager_GetStatus();

    for( i=0; i<num; i++ )
    {
        // 検知ターゲットの取得
        pTarget = Ars408Manager_GetTarget(i);
        
        if( pTarget != NULL && ars408Status->Status_Info3.bit.RadarState_OutputTypeCfg==0x01)
        {
            // マスク判定
            targetMask = ContiObstRecog_CompareWithMask(pTarget->xpos, pTarget->ypos);

	        // 反射強度閾値の取得
			minPower = ContiThreshold_GetThreshold(pTarget->range, targetMask);

	        // 反射強度
	        if( pTarget->power < minPower ) 
	        {
	            continue;
	        }
	        else
	        {
	            //
	        }

			/*
            // 相対速度のチェック
			valid = ContiObstRecog_CheckRelativeSpeed(pTarget->speed);
			if( valid == FALSE )
	        {
	            continue;
	        }
	        else
	        {
	            //
	        }
			*/

	        // クリッピング
			ret = ClippingArea_ZoneContains(pTarget->xpos, pTarget->ypos, &latpos, &type);
			#ifdef _ARS408_RECOG_PRINTF_
				sprintf(arsDebugStr,"clippingCandidateTarget[%ld]: ret=%ld, (x,y)=(%ld,%ld), power=%ld, speed=%ld, score=%d",
						i,
						ret,
						pTarget->xpos,
						pTarget->ypos,
						pTarget->power,
						pTarget->speed,
						score);
				CanDebugPrintf(arsDebugStr);
			#endif

			if( ret != ZONE_OUT )
			{
	            // scoreの計算
				score = ContiObstRecog_CalcScore();

                // 登録
                ContiObstRecog_SetObstacle(pTarget->range, // [mm]   
                                          pTarget->speed,                         // [mm/s] 
                                          pTarget->xpos,  // [mm] 
                                          pTarget->ypos,  // [mm] 
                                          pTarget->power,  //  
                                          score
                                          );
				// ヘッドライト点灯
				
            }
            else
            {
                // 障害物として登録しない
            }
        }
        else
        {
            // 検知ターゲットなし
        }
    }
}

//---------------------------------------------------------------------------
/**
 * 検知障害物情報をリストに登録する
 * @retval TRUE
 * @retval FALSE
 */
//---------------------------------------------------------------------------
bool ContiObstRecog_SetObstacle(
       sint32 range,      /** < 距離 [mm] */
       sint16 speed,      /** < 相対速度 [mm/sec] 近づく方向が負*/
       sint32 xpos,       /** < 検知ターゲットのX座標 [mm] */
       sint32 ypos,       /** < 検知ターゲットのY座標 [mm] */
       sint16 power,      /** < 検知ターゲットの反射強度 */
       sint16 score       /** < 検知ターゲットの得点 */
       )
{
    sint16 index;
    uint32 nowTime;

    // 現在時刻
    nowTime = AdtMain_GetMainCounter();

    // 登録されている障害物から同一と思われるものを探す
    // 見つからなければ空いているリストを探す
    index = ContiObstRecog_SearchList(range,nowTime);

    // バッファフル
    if(index == -1)
    {
        // 障害物リストバッファフル（エラーにする）
        Error_Set(E_TOO_MANY_OBSTACLE);

        return(FALSE);
    }
    else
    {
        // リストに登録（更新）
        ContiObstList_SetTargetInfo(&contiObst.list[index],  // ストアする障害物リストの場所
                                   range,                // 距離 [mm]
                                   speed,                // 速度 [mm/s]
                                   xpos,                 // [mm]
                                   ypos,                 // [mm]
                                   power,                // 
                                   score);               // 得点

		#ifdef _ARS408_RECOG_PRINTF_
			sprintf(arsDebugStr,"ContiObstList[%ld]:(x,y)=(%ld,%ld), power=%ld, speed=%ld, range=%d, expectRange=%d, score=%d",
					index,
					contiObst.list[index].xpos,
					contiObst.list[index].ypos,
					contiObst.list[index].power,
					contiObst.list[index].speed,
					contiObst.list[index].range,
					contiObst.list[index].expectRange,
					contiObst.list[index].score);
			CanDebugPrintf(arsDebugStr);
		#endif
        return(TRUE);
    }
}
//---------------------------------------------------------------------------
/**
 * 障害物リストのクリア
 */
//---------------------------------------------------------------------------
void ContiObstRecog_ClearAllObstacle(void)
{
    sint16 i;

    for( i=0; i<CONTI_NUM_OBST_LIST; i++ )
    {
        ContiObstList_Clear(&contiObst.list[i]);
    }
}

//---------------------------------------------------------------------------
/**
 * 障害物リストが空かどうか
 * @retval TRUE  空
 * @retval FALSE 使用中
 */
//---------------------------------------------------------------------------
bool ContiObstRecog_isListEmpty(sint16 index)
{
    if( contiObst.list[index].score == 0 )
    {
        return(TRUE);
    }
    else
    {
        return(FALSE);
    }
}

//---------------------------------------------------------------------------
/**
 * 登録されている障害物から同一と思われるものを探す
 * 見つからなければ空いているリストを探す
 * @param range 障害物の距離 [mm]
 * @param time [50msec:システムタイム]
 * @return リストのインデックス
 */
//---------------------------------------------------------------------------
sint16 ContiObstRecog_SearchList(sint32 range, uint32 time)
{
    sint16 i;
    sint32 diffRange, diffRangeLimit;
    uint32 diffTime;

    for( i=0; i<CONTI_NUM_OBST_LIST; i++ )
    {
        // 登録されている障害物と距離の差を計算する
        diffRange = labs((sint32)(contiObst.list[i].expectRange - range));
        
        if( diffRange <= SAME_OBJECT_DISTANCE )
        {
            return(i);
        }
        else
        {
            //
        }
    }
    
    // 該当するものがなければ新しい障害物
    return( ContiObstRecog_GetAvailableList() );
}

//---------------------------------------------------------------------------
/**
 * 障害物リストの空きを探す
 * @retval 0-20 リストのインデックス
 * @retval -1 リストに空きがない
 */
//---------------------------------------------------------------------------
sint16 ContiObstRecog_GetAvailableList(void)
{
    sint16 i;
    
    // 空いているバッファを探す
    for( i=0; i<CONTI_NUM_OBST_LIST; i++ )
    {
        if( ContiObstRecog_isListEmpty(i)==TRUE )
        {
            return(i);
        }
        else
        {
            //
        }
    }
    
    // バッファフル
    return(-1);
}
//---------------------------------------------------------------------------
/**
 * 得点閾値を超えたものがあったらエラーまたはワーニング
 * 1点   : ワーニング（減速しない）
 * 50点  : ワーニング（10km/hに減速）
 * 100点 : エラー（停止）
 */
//---------------------------------------------------------------------------
void ContiObstRecog_DetectObstale(void)
{
    sint16 i,index;
    sint16 maxScore = 0;

    // レーダDisable
    if( ( contiObst.disable == TRUE ) || ( contiObst.suspend == TRUE ) )
    {
        return;
    }
    else
    {
        //
    }

    // 最も得点の高いものを探す
    index = -1;
    for( i=0; i<CONTI_NUM_OBST_LIST; i++ )
    {
        if( ContiObstRecog_isListEmpty(i)==FALSE ) 
        {
            if( contiObst.list[i].score > maxScore ) 
            {
                maxScore = contiObst.list[i].score;
                index = i;
            }
            else
            {
                //
            }
        }
        else
        {
            //
        }
    }

    if( index == -1 )
    {
        // リストは空（何も検知していない）
        // ワーニング発生中ならクリアする
        ContiObstRecog_WarningClear();
    }
    else
    {
        if( STOP_SCORE <= maxScore )  // 停止 (100点）
        {
            contiObst.detectFlag = ON;      // 

            // セントラルに報告する障害物情報をセットする
            ObstReport_SetObstacleInfo( 1,  // center
                                        contiObst.list[index].xpos,
                                        contiObst.list[index].ypos,
                                        (uint8)(contiObst.list[index].range/1000),
                                        (sint8)(contiObst.list[index].power/10)
                                        );

            ObstReport_MmwrUpdateInhibit();     // セントラルへ送信する障害物情報の更新を禁止する

            ContiObstRecog_SetError();
        }
        else if( ( SLOW_SCORE <= maxScore ) && ( maxScore < STOP_SCORE ) )
        {
            ContiObstRecog_SetWarning();
        }
        else
        {
            //
        }
    }
}

//---------------------------------------------------------------------------
/**
 * 通り過ぎたものは削除（ワーニングも解除）
 */
//---------------------------------------------------------------------------
void ContiObstRecog_ClearPassedList(ModeType mode)
{
    sint16 i;
    uint32 nowTime;
    sint32 dt, tThresh;

    if( mode  == modeAuto )
    {
        tThresh = T_30SEC;
    }
    else
    {
        tThresh = T_2SEC;
    }

    // 現在時刻
    nowTime = AdtMain_GetMainCounter();

    for( i=0; i<CONTI_NUM_OBST_LIST; i++ )
    {
        if( ContiObstRecog_isListEmpty(i) == FALSE ) 
        {
            // 通り過ぎたら削除
            if( contiObst.list[i].expectRange <= 0 )
            {
                ContiObstList_Clear(&contiObst.list[i]);
            }
            // 120mより遠くにいったら削除
            else if(contiObst.list[i].expectRange > VANISH_DISTANCE )
            {
                ContiObstList_Clear(&contiObst.list[i]);
            }
            else
            {
                // do nothing
            }
            
            // 最後に検知されてから30sec以上経過していたら削除
            dt = (sint32)(nowTime - contiObst.list[i].time);
            if( dt > tThresh )
            {
                ContiObstList_Clear(&contiObst.list[i]);
            }
            else
            {
                // do nothing
            }
        }
        else
        {
            // do nothing
        }
    }
}

//---------------------------------------------------------------------------
/**
 * リストに登録されている障害物の次の予想距離を計算
 */
//---------------------------------------------------------------------------
void ContiObstRecog_UpdateExpectedRange(void)
{
    int i;

    for( i=0; i<CONTI_NUM_OBST_LIST; i++ )
    {
        if( ContiObstRecog_isListEmpty(i) == FALSE ) 
        {
            ContiObstList_CalcExpectedRange(&contiObst.list[i]);
        }
        else
        {
            //
        }
    }
}

//---------------------------------------------------------------------------
/**
 * 
 */
//---------------------------------------------------------------------------
void ContiObstRecog_SendListToMonitor(void)
{
    sint16 i, num, size;
    uint8 buf[256], *ptr;
    sint32 range, eRange;
    sint32 xpos, ypos;
    sint16 speed;
    uint8  score;

    num = 0;
    ptr = &buf[0];

    for( i=0; i<CONTI_NUM_OBST_LIST; i++ )
    {
        if( ContiObstRecog_isListEmpty(i) == FALSE )
        {
            range  = contiObst.list[i].range;
            eRange = contiObst.list[i].expectRange;
            score  = (uint8)contiObst.list[i].score;
			speed  = contiObst.list[i].speed;
            xpos   = contiObst.list[i].xpos;
            ypos   = contiObst.list[i].ypos;

            memcpy((void*)ptr, (void*)&range,  4); ptr += 4;
            memcpy((void*)ptr, (void*)&eRange, 4); ptr += 4;
            memcpy((void*)ptr, (void*)&xpos,   4); ptr += 4;
            memcpy((void*)ptr, (void*)&ypos,   4); ptr += 4;
            memcpy((void*)ptr, (void*)&speed,  2); ptr += 2;
            memcpy((void*)ptr, (void*)&score,  1); ptr += 1;

            num++;
        }
    }

    size = 19 * num;

    if( ( contiObst.sendListInfoToPc == TRUE ) && ( size != 0 ) )
    {
        // 送信
        RpcManager_SendMsgNoAck( CAN_B,
                                 ARS408_DEBUG_MSG, 				//MACOM_DEBUG_MSGをそのまま引き継ぎ
                                 RpcService_GetPcAddress(),
                                 PRIOR_PC,
                                 size,
                                 buf
                                 );
		
    }
    else
    {
        //
    }
}

//---------------------------------------------------------------------------
/**
 * 障害物検知によるワーニング
 */
//---------------------------------------------------------------------------
void ContiObstRecog_WarningClear(void)
{
    if( contiObst.warningFlag != odsOk )
    {
        Warning_Clear(E_DETECT_RADAR2);
        contiObst.warningFlag = odsOk;
    }
    else
    {
        //
    }
}

void ContiObstRecog_SetWarning(void)
{
    Warning_Set(E_DETECT_RADAR2);
    contiObst.warningFlag = odsSlowDown;
}

void ContiObstRecog_SetError(void)
{
    Error_Set(E_DETECT_RADAR2);
}

//---------------------------------------------------------------------------
/**
 * MACOM検知の得点計算
 */
//---------------------------------------------------------------------------
static sint16 ContiObstRecog_CalcScore(void)
{
    sint16 ret;
    
    if( Mode_GetCurrentMode() == modeAuto )
    {
        ret = 10;  // とりあえず一律10点
    }
    else
    {
        ret = 0;
    }

    return(ret);
}
