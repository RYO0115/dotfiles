/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2006 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: ObstReport.c,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: 
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/
#include <string.h>
#include "ahscommon.h"
#include "ObstReport.h"
#include "CanIDManager.h"
#include "RpcManager.h"
#include "ModeManager.h"
#include "TruckInfo.h"

#define ALL_RADARNUM  (ODS_SENSOR_NUM + MMR1C_NUM + MACOM_NUM)

#define RADAR_TYPE_NUM   3

#define ODS_TYPE_MMWR    0
#define ODS_TYPE_MMR1C     1
#define ODS_TYPE_MACOM   2


/**
 * セントラルへのレポートRPC構造体定義
 */
typedef struct{
    sint32  truckX;   /** [mm] */
    sint32  truckY;
    sint16  heading;  /** [2pi/65536] */
    sint16  num;      
    struct{
        sint32 x;     /** */
        sint32 y;     /** */
        sint8  ch;
        uint8  range; /** [m] */
        sint8  power; /* [dB] */
        uint8  dummy;
    } ObstPos[ALL_RADARNUM];
} StructObstReport;

/**
 * インスタンス定義
 */
static StructObstReport obstReport;
static bool reportUpdateInhibit[RADAR_TYPE_NUM];        /** 障害物情報の更新禁止 */

/**
 * プライベート関数
 */
static void ObstReport_Clear(void);

//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void ObstReport_Init(void)
{
	ObstReport_Clear();
}

//---------------------------------------------------------------------------
/**
 * メイン
 */
//---------------------------------------------------------------------------
void ObstReport_Main(void)
{
	ModeType mode, modePrev;
	
	mode     = Mode_GetCurrentMode();
	modePrev = Mode_GetPreviousMode();
	
    if( mode == modeError )
	{
		if( modePrev == modeAuto )
		{
			// 送信
			ObstReport_SendMsg();
		}
		else
		{
			// do nothing
		}
	}
    else if( mode == modeStop )
    {
		if( modePrev != modeStop )
		{
			// 停車モードになったら送信バッファをクリア
			ObstReport_Clear();
		}
		else
		{
			// do nothing
		}
	}
	else
	{
		// do nothing
	}
}

//---------------------------------------------------------------------------
/**
 * セントラルに送信する障害物情報のセット
 * ACC3
 */
//---------------------------------------------------------------------------
void ObstReport_SetObstacleInfo( RadarPosition pos,
                                 sint32 x,      /**< [mm] */
                                 sint32 y,      /**< [mm] */
                                 uint8  range,  /**< [m]  */
                                 sint8  power   /**< [dB] */
                                 )
{
    sint8 ch;

        ch = (sint8)pos;

        if( (0 <= ch) && (ch < ODS_SENSOR_NUM) )
        {
        if( reportUpdateInhibit[ODS_TYPE_MMWR] == FALSE )
        {
            // 障害物情報
            obstReport.ObstPos[ch].x     = x;
            obstReport.ObstPos[ch].y     = y;
            obstReport.ObstPos[ch].range = range;
            obstReport.ObstPos[ch].power = power;
            obstReport.ObstPos[ch].ch    = ch;

            // トラック位置情報
            obstReport.truckX  = TruckInfo_GetX();
            obstReport.truckY  = TruckInfo_GetY();
            obstReport.heading = TruckInfo_GetHeading();
         }
         }
    }

//---------------------------------------------------------------------------
/**
 * セントラルに送信する障害物情報のセット
 * MMR1C
 */
//---------------------------------------------------------------------------
void ObstReport_SetMmr1cObstacleInfo( Mmr1cPosition pos,
                                 sint32 x,      /**< [mm] */
                                 sint32 y,      /**< [mm] */
                                 uint8  range   /**< [m]  */
                                 )
{
    sint8 ch, index;

        ch = (sint8)pos;
    index = ODS_SENSOR_NUM + ch;
    
        if( (0 <= ch) && (ch < MMR1C_NUM) )
        {
        if( reportUpdateInhibit[ODS_TYPE_MMR1C] == FALSE )
        {
            // 障害物情報
            obstReport.ObstPos[index].x     = x;
            obstReport.ObstPos[index].y     = y;
            obstReport.ObstPos[index].range = range;
            obstReport.ObstPos[index].power = 0;
            obstReport.ObstPos[index].ch    = index;

            // トラック位置情報
            obstReport.truckX  = TruckInfo_GetX();
            obstReport.truckY  = TruckInfo_GetY();
            obstReport.heading = TruckInfo_GetHeading();
         }
         }
    }
//---------------------------------------------------------------------------
/**
 * セントラルに送信する障害物情報のセット
 * MACOM用
 */
//---------------------------------------------------------------------------
void ObstReport_SetMacomObstacleInfo( MacomPosition pos,
                                 sint32 x,      /**< [mm] */
                                 sint32 y,      /**< [mm] */
                                 uint8  range   /**< [m]  */
                                 )
{
    sint8 ch, index;

        ch = (sint8)pos;
    index = ODS_SENSOR_NUM + MMR1C_NUM + ch;

        if( (0 <= ch) && (ch < MACOM_NUM) )
        {
        if( reportUpdateInhibit[ODS_TYPE_MACOM] == FALSE )
        {
            // 障害物情報
            obstReport.ObstPos[index].x     = x;
            obstReport.ObstPos[index].y     = y;
            obstReport.ObstPos[index].range = range;
            obstReport.ObstPos[index].power = 0;
            obstReport.ObstPos[index].ch    = index;

            // トラック位置情報
            obstReport.truckX  = TruckInfo_GetX();
            obstReport.truckY  = TruckInfo_GetY();
            obstReport.heading = TruckInfo_GetHeading();
         }
         }
    }

//---------------------------------------------------------------------------
/**
 * セントラルに送信
 */
//---------------------------------------------------------------------------
void ObstReport_SendMsg(void)
{
	int i, num;
	sint16 size;
	StructObstReport report;
	
	//データの中身をクリアする
    memset((void*)&report, 0, sizeof(report));
    num = 0;
    
    //送信データをセット

	for( i=0; i < ALL_RADARNUM; i++ )
	{
		if( obstReport.ObstPos[i].range != 0 )
		{
			report.ObstPos[num].x     = obstReport.ObstPos[i].x;
	        report.ObstPos[num].y     = obstReport.ObstPos[i].y;
	        report.ObstPos[num].range = obstReport.ObstPos[i].range;
	        report.ObstPos[num].power = obstReport.ObstPos[i].power;
	        report.ObstPos[num].ch    = obstReport.ObstPos[i].ch;
			num++;
		}
	}

	if( num > 0 )  // 検知データがあれば送信する
	{
	    report.truckX  = obstReport.truckX;
	    report.truckY  = obstReport.truckY;
	    report.heading = obstReport.heading;
	    report.num = num;

	    size = 12 + 12 * num;  // max 12 + 12 * 8 = 108byte

	    RpcManager_SendMsg( CAN_A,
	                        S_OBSTPOS_INFO,
	                        CanIDManager_GetRouterCanID(),
	                        CanIDManager_GetRouterPriority(),
	                        size,
	                        (uint8*)&report);
	}
	else
	{
		// do nothing
	}

    // 送信したらデータはクリア
    ObstReport_Clear();
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void ObstReport_MmwrUpdateInhibit(void)
{
    reportUpdateInhibit[ODS_TYPE_MMWR] = TRUE;
}
void ObstReport_FurukawaUpdateInhibit(void)
{
    reportUpdateInhibit[ODS_TYPE_MMR1C] = TRUE;
}
void ObstReport_MacomUpdateInhibit(void)
{
    reportUpdateInhibit[ODS_TYPE_MACOM] = TRUE;
}


//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**
 * 
 */
//---------------------------------------------------------------------------
void ObstReport_Clear(void)
{
    sint16 i;

    for( i = 0; i < RADAR_TYPE_NUM; i++ )
    {
        reportUpdateInhibit[i] = FALSE;   /** 更新許可 */
    }

    memset((void*)&obstReport, 0, sizeof(StructObstReport));
}

