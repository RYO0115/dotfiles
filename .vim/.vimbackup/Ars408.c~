/**
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2009 Komatsu Ltd. All rights reserved.
 *
 *    $RCSfile: Ars408.c,v $
 *    $Revision: 1.1.1.1 $
 *    $Author: tojima $
 *    $Date: 2009/09/15 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: Communication module with LUX
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/


#include "ahscommon.h"
#include "AhsTools.h"
#include "Ars408.h"
#include "ErrorManager.h"
#include "WarningManager.h"
#include "ClippingAreaManager.h"
#include "TruckInfo.h"
#include "Ars408Manager.h"
#include "ModeManager.h"
#include "MaskContain.h"
#include "AppIfdef.h"

//#include "RpcManager.h"

#define OBJ_MIN_RANGE   1000    // [mm] 最短距離 1m



//#define _ARS_PRINTF

#ifdef _ARS_PRINTF
static uint8  arsDebugStr[128];
#endif


/**
 * プライベート関数プロトタイプ宣言
 */
static void   Ars408_CalcGlobalTargetPosClip(StructArs408 *pArs);
static StructPointDef ClipDataMsg_ConvertGlobalXY(StructPointDef inpos, StructArs408 *pArs);
static StructPointDef ClipDataMsg_RotateXY(StructPointDef input, float32 cs_origin, float32 sn_origin);
static bool CheckPacketIsLost(StructArs408* pArs, FrameListNumber* newFLNum);
static void UpdateObjectDataFromBuffer(StructArs408* pArs, uint16 targetNum);
//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void Ars408_Init(
     StructArs408 *pArs,      /**< Ars408オブジェクトのポインタ */
	 bool flag,            /**< 使うか使わないか */
     sint16 xpos,          /**< リアアクスルからのレーダの位置[mm] */
     sint16 ypos,          /**< 車両中央からのレーダの位置[mm]     */
     sint16 angle          /**< 基本取り付け角度オフセット [2pi/65536] */
	 )
{
    pArs->valid     = flag;

    pArs->baseX     = (sint32)xpos;  // [mm]
    pArs->baseY     = (sint32)ypos;  // [mm]
	//#ifdef _ARS_PRINTF
	//sprintf(arsDebugStr,"start(%d,%d), base(%d,%d)", xpos, ypos, pArs->baseX, pArs->baseY);
	//CanDebugPrintf(arsDebugStr);
	//#endif

    pArs->baseAngle = angle;
	pArs->base_cs	= (float32)sinf(Tools_circular2rad(angle));
	pArs->base_sn	= (float32)cosf(Tools_circular2rad(angle));

    pArs->rbiStart  = FALSE;
    pArs->arsStart  = FALSE;

    pArs->updated   = FALSE;
    pArs->targetNum = 0;

    pArs->canComTimer      = 0;
    pArs->trackRpcTimer    = 0;

    pArs->healthy = FALSE;
    
    pArs->packetCounter = 0;
}

//---------------------------------------------------------------------------
/**
 * メイン
 */
//---------------------------------------------------------------------------
void Ars408_PreMain(
     StructArs408 *pArs,      /**< Ars408オブジェクトのポインタ */
	 sint32 truckX,         /**< 車両の位置 [mm] */
	 sint32 truckY,         /**< 車両の位置 [mm] */
	 sint16 truckDir,       /**< 車両の方位角 [1/65536] */
	 float32  cs,           /**< 方位角のCOS成分 */
	 float32  sn            /**< 方位角のSIN成分 */
	 )
{
	float32 rx, ry;
	ZoneType zoneType;

	zoneType = ClippingArea_GetZoneType();

	// 点検中などはレーダ中心座標にする
	if( ( zoneType == zoneInspection )
	 || ( zoneType == zoneCalibration )
	 || ( zoneType == zoneTest )
	 || ( zoneType == zoneTest3 ) )
	{
		pArs->truckX = pArs->baseX;
		pArs->truckY = pArs->baseY;

		pArs->sn     = 0;
		pArs->cs     = 1.0;
	}
	// それ以外はレーダの絶対座標を計算する
	else
	{
		//pArs->truckX = truckX;
		//pArs->truckY = truckY;  // レーダ取り付け座標を入れる

        // レーダの位置の計算
        // 車両の方位角分だけ回転
        //rx = (pArs->baseX * cs) - (pArs->baseY * sn);   // [mm]
        //ry = (pArs->baseX * sn) + (pArs->baseY * cs);   // [mm]

        // 車両の位置だけ平行移動
        //pArs->truckX  = (sint32)rx + truckX;
        //pArs->truckY  = (sint32)ry + truckY;
        pArs->truckX  = truckX;
        pArs->truckY  = truckY;

		pArs->sn = sn;
		pArs->cs = cs;
	}

	// ターゲットの座標をグローバル座標に変
	if(pArs->updated == TRUE){
		Ars408_CalcGlobalTargetPosClip(pArs);
		pArs->updated = FALSE;
	}
	else{
		//do nothing
	}
}

void Ars408_Main(StructArs408 *pArs)
{
	//
}

void Ars408_PostMain(StructArs408 *pArs)
{
	//pArs->updated = FALSE;
    
    // 検知ターゲット情報をクリア
    pArs->targetNum        = 0;

    // 受信タイマー更新
    pArs->canComTimer++;
    if( pArs->canComTimer > T_10SEC )
    {
        pArs->canComTimer = T_10SEC;
	}
    else
    {
        //
    }

    pArs->closestRange = 200000;  // 200m
    pArs->closestIndex = -1;
}

//---------------------------------------------------------------------------
/**
 * クリップターゲットの受信
 */
//---------------------------------------------------------------------------
void Ars408_ReceiveClippedTargetMsg(
	StructArs408 *pArs,   /**< */
	const uint8 *msg   /**< */
	)
{
	sint16 i, msgCounter,num;

	// タイマークリア
	uint16 newTimeStamp						= Tools_GetPtrToShortU(&msg[0]);
	FrameListNumber newFLNum;
	newFLNum.byte							= msg[3];

	//タイムスタンプで確認
	if(pArs->object_buffer.timeStamp != newTimeStamp ){
		
		UpdateObjectDataFromBuffer(pArs, pArs->object_buffer.targetNum);

		/* ---------------------------------------------------- */
		//初期化
		i = 0;
		pArs->trackRpcTimer   = 0;
		pArs->object_buffer.targetNum = 0;
		pArs->object_buffer.frameListNumber.byte = 0;
		pArs->object_buffer.timeStamp		= newTimeStamp;
		
	}
	else{
		i = pArs->object_buffer.targetNum;
		//pArs->updated = FALSE;
	}

	CheckPacketIsLost(pArs, &newFLNum);

	pArs->object_buffer.targetNum			+= msg[2];
	pArs->object_buffer.frameListNumber		= newFLNum;
	
	num = (sint16)pArs->object_buffer.targetNum;
	
	msgCounter = 0;

	for( ; i<num; i++ )
	{
		pArs->object_buffer.target[i].xpos			= Tools_GetPtrToShortS(&msg[ 4+16*msgCounter]);
		pArs->object_buffer.target[i].ypos			= Tools_GetPtrToShortS(&msg[ 6+16*msgCounter]);
		pArs->object_buffer.target[i].vx			= Tools_GetPtrToShortS(&msg[ 8+16*msgCounter]);
		pArs->object_buffer.target[i].vy			= Tools_GetPtrToShortS(&msg[10+16*msgCounter]);
		pArs->object_buffer.target[i].rcs		  	= msg[12+16*msgCounter];
		pArs->object_buffer.target[i].id			= msg[13+16*msgCounter];
		pArs->object_buffer.target[i].length 		= msg[14+16*msgCounter];
		pArs->object_buffer.target[i].width 		= msg[15+16*msgCounter];
		pArs->object_buffer.target[i].quality 		= Tools_GetPtrToLongU(&msg[16+16*msgCounter]);
		msgCounter++;

		#ifdef _ARS_PRINTF
		//sprintf(arsDebugStr,"row %d:(x,y)=(%d,%d), speed=%d,rcs=%d",
		//		pArs->object_buffer.target[i].id,
		//		pArs->object_buffer.target[i].xpos,
		//		pArs->object_buffer.target[i].ypos,
		//		pArs->object_buffer.target[i].vx,
		//		pArs->object_buffer.target[i].rcs);
		//CanDebugPrintf(arsDebugStr);
		#endif

	}
	
}
//---------------------------------------------------------------------------
/**
 * @return 検知ターゲットオブジェクトのポインタ
 */
//---------------------------------------------------------------------------
StructArs408TargetInfo* Ars408_GetTrackData(
	StructArs408 *pArs,   /**< */
	sint16 index
	)
{
	if( (0 <= index) && (index < pArs->targetNum) )
	{
		return( &pArs->target[index] );
	}
	else
	{
		return(NULL);
	}
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void Ars408_SetBaseArs408XPos(
	 StructArs408 *pArs,  /**<  */
	 sint32 x          /**<  */
	 )
{
	if( ( 9000 < x ) && ( x < 13000 ) )   // 9m ..13mの範囲
	{
		pArs->basePos.xpos  = x;
	}
	else
	{
		//
	}
}

void Ars408_SetBaseArs408YPos(
	 StructArs408 *pArs,  /**<  */
	 sint32 y          /**<  */
	 )
{
	if ( ( -3000 < y ) && ( y < 3000 ) )  // -3m .. 3mの範囲
	{
		pArs->basePos.ypos  = y;
	}
	else
	{
		//
	}
}

void Ars408_SetBaseArs408Theta(
	 StructArs408 *pArs,  /**<  */
	 sint16 theta      /**<  */
	 )
{
	if ( ( -16384 < theta ) && ( theta < 16384 ) ) // -90deg .. 90degの範囲
	{
		pArs->basePos.theta = theta;
	}
	else
    {
        //
    }
}

//---------------------------------------------------------------------------
/**
 * LUXが計測準備OKかどうか
 * @retval TRUE  準備OK
 * @retval FALSE まだ
 */
//---------------------------------------------------------------------------
bool Ars408_IsReady(const StructArs408 *pArs)
{
    return(pArs->arsStart);
}


void Ars408_SetReady(StructArs408 *pArs, bool flag)
{
	pArs->arsStart = flag;
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------

static bool CheckPacketIsLost(StructArs408* pArs, FrameListNumber* newFLNum)
{
	if( (pArs->object_buffer.frameListNumber.bit.frameNumber + 1) 
			!= newFLNum->bit.frameNumber ){
		pArs->object_buffer.packetLostFlag = FALSE;
	}
	else{
		pArs->object_buffer.packetLostFlag = TRUE;
	}

	return(pArs->object_buffer.packetLostFlag);
}

static void UpdateObjectDataFromBuffer(StructArs408* pArs, uint16 targetNum)
{
	CopyObjectDataFromBuffer(&(pArs->object), &(pArs->object_buffer));
	pArs->packetLostFlag = pArs->object.packetLostFlag;
	// ターゲット数セット
	pArs->targetNum = pArs->object.targetNum;
	pArs->updated = TRUE;
}

static void CopyObjectDataFromBuffer( StructTargetMsgARS408* completeData, StructTargetMsgARS408* buffer)
{
	memcpy(completeData, buffer, sizeof(StructTargetMsgARS408) );
}


static void Ars408_CalcGlobalTargetPosClip(StructArs408 *pArs)
{
	StructPointDef inpos, inpos_rotated, outpos;
	sint32  latpos;
	sint16  index, ret;
	bool    clippedFlag;
	sint8   stat;



	for( index = 0; index<pArs->targetNum; index++ )
	{
		// 検知ターゲットバッファへの展開
		pArs->target[index].id      = pArs->object.target[index].id;
		pArs->target[index].speed   = (sint16)(250 * pArs->object.target[index].vx);   // [mm/s] 0.25 * 1000

		clippedFlag = FALSE;

		// 車両中心座標
		inpos.xpos = (sint32)(200 * pArs->object.target[index].xpos);  // [mm] 0.2 * 1000
		inpos.ypos = (sint32)(200 * pArs->object.target[index].ypos);

		//inpos_rotated = ClipDataMsg_RotateXY( inpos, pArs->base_cs, pArs->base_sn);
		inpos_rotated.xpos = inpos.xpos + pArs->baseX;
		inpos_rotated.ypos = inpos.ypos + pArs->baseY;
		
		// 距離 [mm]
		pArs->target[index].range = inpos_rotated.xpos; // [mm]
		
		
		// グローバル座標へ変換
		outpos = ClipDataMsg_ConvertGlobalXY(inpos_rotated, pArs);
		
		
		// X,Y [mm]
		pArs->target[index].xpos = outpos.xpos;
		pArs->target[index].ypos = outpos.ypos;

		// power
		pArs->target[index].power = pArs->object.target[index].rcs / 2;

		// 最短の距離のものを求める
		if( pArs->closestRange > pArs->target[index].range )
		{
			pArs->closestRange = pArs->target[index].range;
			pArs->closestIndex = index;
		}
		else
		{
			//
		}

		#ifdef _ARS_PRINTF
		sprintf(arsDebugStr,"Global %d:(x,y)=(%d,%d), speed=%d,rcs=%d",
				pArs->target[index].id,
				pArs->target[index].xpos,
				pArs->target[index].ypos,
				pArs->target[index].speed,
				pArs->target[index].power);
		CanDebugPrintf(arsDebugStr);
		#endif
	}
}

static StructPointDef ClipDataMsg_RotateXY(StructPointDef inpos, float32 cs_origin, float32 sn_origin)
{
	StructPointDef outpos;
	float64 xf, yf, cs, sn;

	xf = (float64)inpos.xpos * 1000;
	yf = (float64)inpos.ypos * 1000;

	cs = (float64)cs_origin;
	sn = (float64)sn_origin;

	outpos.xpos = (sint32)(((xf * cs) - (yf * sn)) / 1000);
	outpos.ypos = (sint32)(((xf * sn) + (yf * cs)) / 1000);

	return(outpos);
}

static StructPointDef ClipDataMsg_ConvertGlobalXY(StructPointDef inpos, StructArs408 *pArs)
{
	float32 xf, yf, cs, sn;
	StructPointDef outpos;

	// 回転移動
	outpos = ClipDataMsg_RotateXY( inpos, pArs->cs, pArs->sn);

	//cs = pArs->sn;
	//sn = pArs->cs;
	//sn = pArs->sn;
	//cs = pArs->cs;

	//xf = (float32)inpos.xpos;
	//yf = (float32)inpos.ypos;

	//outpos.xpos = (sint32)((xf * cs) - (yf * sn));
	//outpos.ypos = (sint32)((xf * sn) + (yf * cs));
	//
	// 平行移動
	outpos.xpos += pArs->truckX;
	outpos.ypos += pArs->truckY;

	return(outpos);
}


