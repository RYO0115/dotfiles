/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2005 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: AppNvram.c,v $
 *  $Revision: 1.1.1.1 $
 *  $Author: tojima $
 *  $Date: 2005/07/06 06:36:19 $
 *  $State: Exp $
 *
 *  @brief: Nvram
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/

#include <string.h>
#include "AppNvram.h"
#include "RadarDefine.h"
#include "ErrorManager.h"
#include "WarningManager.h"
#include "RpcManager.h"
#include "Thresholding.h"
#include "AhsAuxDevice.h"
#include "AhsTools.h"
#include "SrrObstacleRecognition.h"
#include "AppIfdef.h"


#define POT_TABLE_SIZE 13
#define MMW_CALIB_REQ_BASEBIT  0x00000001
#define MMR1C_CALIB_REQ_BASEBIT  0x00000100
#define SRR_CALIB_REQ_BASEBIT  0x00001000

#define REG_MAGIC_NUM (0xCA00)
#define PARAM_MAGIC_NUM (0xCA10)
#define LOG_MAGIC_NUM (0xCA20)
#define LOG_DATA_NUM (6)

/**
 * 安全コンNVRAMデータ構造定義
 */
typedef struct{
	//regular
	uint16        regVirgin;
	uint16        checksum;
	sint16        motorOrigin;
	sint16        acc3Range[ ODS_SENSOR_NUM ];
	sint16        acc3Sensitivity[ ODS_SENSOR_NUM ];
	sint16        acc3AngleOffset[ ODS_SENSOR_NUM ];
	sint16        acc3defaultThreshold;
	sint16        maskCentral;
	sint16        fireExist;
	sint32        potmap[ POT_TABLE_SIZE ];
	sint16        acc3Installed[ ODS_SENSOR_NUM ];
	sint16        errorHistory[ NUM_ERROR_HISTORY ];
	sint16        errorIndex;
	sint16        acc3PowerThreshold;        // MaskRegularのときの反射強度閾値
	sint16        clippingAllowance;         // クリッピングエリア幅
	sint16        targetRangeThreshold;      // ターゲット検知距離閾値
	sint16        clipAreaExtend;            
	sint16        truckType;                 // トラックタイプ

	sint16        luxAngleOffset[ MMR1C_NUM ];    // 
	sint16        luxInstalled[ MMR1C_NUM ];      // 
	sint16        srrAngleOffset[ MACOM_NUM ];  // 
	sint16        srrInstalled[ MACOM_NUM ];    // 

    //parameter
	uint16        rearFreeZoneLength;       // [mm]
	uint16        rearFreeZoneWidth;       // [mm]

    //AuxDevice
	sint16        truckAuxHard[ TRUCK_AUXHARD_NUM ]; // Truck type拡張Aux Device

    //parameter
	uint16        parameterVirgin;//隠しパラメータ
	bool          chokeExistLeft;
	bool          chokeExistRight;
	bool          touchSensorInstalled;
	uint32        odsCalibRequired;

    //regular
	sint16        chokeRangeThresh;
	sint16        chokeAngleRThresh;
	sint16        chokeAngleLThresh;
	sint16        chokePowerThresh;

	//logging
	uint32        logging[LOG_DATA_NUM];
	uint16        loggingVirgin;//隠しパラメータ

} StructSafeNvram;

static StructSafeNvram nvram;

static uint16 workRegularVirgin;

/**
 * プライベート関数
 */
static uint16 SfNvram_CalcCheckSum( void );
static bool   SfNvram_CompareCheckSum( void );

static void   appNvram_SetAuxDevice( void );
static void   appNvram_SetRadarConfig( void );
static void   appNvram_SetPalameter( void );
static void   appNvram_SetRegData( void );
static void   appNvram_SetLogZero( void );

static void   appNvram_CheckParameterValidity( void );
static void   appNvram_CalibRequiredBitDown( uint32 bitmask );
static void   appNvram_CalibRequiredBitUp( uint32 bitmask );

//---------------------------------------------------------------------------
/** 
 * モジュール情報の表示
 */
//---------------------------------------------------------------------------
void SfNvram_ShowInfo( void )
{
#ifdef _DEBUG_NVRAM
	char str[64];

	CanDebugPrintf( "NVRAM" );
/*
	sprintf(str," >motor origin  :%d",	  nvram.motorOrigin); CanDebugPrintf(str);
	sprintf(str," >potmap[0]     :%d %d", nvram.potmap[0].position, nvram.potmap[0].volt); CanDebugPrintf(str);
	sprintf(str," >radar0 offset :%d",	 nvram.acc3AngleOffset[0]  ); CanDebugPrintf(str);
	sprintf(str," >radar1 offset :%d",	 nvram.acc3AngleOffset[1]  ); CanDebugPrintf(str);
	sprintf(str," >radar2 offset :%d",	 nvram.acc3AngleOffset[2]  ); CanDebugPrintf(str);
	sprintf(str," >radar3 offset :%d",	 nvram.acc3AngleOffset[3]  ); CanDebugPrintf(str);
*/
	if( nvram.acc3Installed[0] == 0 ) CanDebugPrintf("Radar(R) not installed");
	else CanDebugPrintf("Radar(R) installed");

	if( nvram.acc3Installed[1] == 0 ) CanDebugPrintf("Radar(C) not installed");
	else CanDebugPrintf("Radar(C) installed");

	if( nvram.acc3Installed[2] == 0 ) CanDebugPrintf("Radar(L) not installed");
	else CanDebugPrintf("Radar(L) installed");

	if( nvram.acc3Installed[3] == 0 ) CanDebugPrintf("Radar(S) not installed");
	else CanDebugPrintf("Radar(S) installed");

	sprintf(str,"truck %d",  nvram.truckType);	  CanDebugPrintf(str);
	sprintf(str,"aux %d %d", nvram.truckAuxHard[0],nvram.truckAuxHard[1]);	  CanDebugPrintf(str);

	sprintf(str,"calib %x",  nvram.odsCalibRequired);	 CanDebugPrintf(str);

	sprintf(str,"chokeL %d , chokeR %d", nvram.chokeExistLeft,nvram.chokeExistRight); CanDebugPrintf(str);

#endif ///#ifdef _DEBUG_NVRAM
}


//---------------------------------------------------------------------------
/**
 * 初めて電源を入れた場合、デフォルトの値をセットする
 */
//---------------------------------------------------------------------------
void AppNvram_Init( void )
{
	workRegularVirgin = nvram.regVirgin;
	// 初期値代入
	AppNvram_SetInitData();
	// 値の妥当性評価
	appNvram_CheckParameterValidity();

	}
//---------------------------------------------------------------------------
/**
 * デフォルトの値をセットする
 */
//---------------------------------------------------------------------------
void AppNvram_SetInitData( void )
{
	if( REG_MAGIC_NUM != workRegularVirgin ) 
	{
		appNvram_SetRegData();
	}
	if( nvram.parameterVirgin != PARAM_MAGIC_NUM)
	{
		appNvram_SetPalameter();
	}
	if( nvram.loggingVirgin != LOG_MAGIC_NUM)
	{
		appNvram_SetLogZero();
	}
}

//---------------------------------------------------------------------------
/**
 * メイン
 */
//---------------------------------------------------------------------------
void AppNvram_Main( void )
{
	static uint16 timer = 0;

	if( (timer % T_5SEC) == 0 )
	{
		// チェックサムの比較
		if( SfNvram_CompareCheckSum() == FALSE )
		{
			Error_Set( E_NVRAM_CHECKSUM );
		}
		
		// クリアされていないかどうか
		if( nvram.checksum == 0 )
		{
			Error_Set( E_NVRAM_CLEARED );
		}
		
		// ODSキャリブが異常でなかったか
		if( nvram.odsCalibRequired != 0 )
		{
			Error_Set( E_NVRAM_NEED_ODSCALIB );
		}
		timer = 0; // オーバーフロー防止
	}
	
	timer++;
}
//---------------------------------------------------------------------------
/**
 * 電源OFF時の処置
 */
//---------------------------------------------------------------------------
void AppNvram_KeyOff( void )
{
	nvram.regVirgin = workRegularVirgin;
}

//---------------------------------------------------------------------------
/**
 * NVRAMに記憶するメモリのポインタとサイズを指定する
 * KEY ON時にNVRAMから指定したアドレスにデータがコピーされる
 */
//---------------------------------------------------------------------------
uint16* AppNvram_GetBufferAddress( void )
{
	return( (uint16*)&nvram );
}
//---------------------------------------------------------------------------
/**
 * @retVla ワード単位でのサイズ
 */
//---------------------------------------------------------------------------
sint16 AppNvram_GetBufferSize( void )
{
	return( (sizeof(nvram) + 1)/2 );
}

//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetRadarDefaultThreshold( void )
{
	return( nvram.acc3defaultThreshold );
}
void SfNvram_SetDefaultThreshold( sint16 thresh )
{
	nvram.acc3defaultThreshold = thresh;

	// チェックサムの更新
	nvram.checksum = SfNvram_CalcCheckSum();
}

//---------------------------------------------------------------------------
/**
 *	デフォルト反射強度閾値
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetRadarPowerThreshold( void )
{
	return( nvram.acc3PowerThreshold );
}
void SfNvram_SetRadarPowerThreshold( sint16 thresh )
{
	nvram.acc3PowerThreshold = thresh;

	// チェックサムの更新
	nvram.checksum = SfNvram_CalcCheckSum();
}

//---------------------------------------------------------------------------
/**
 *	クリッピングエリア幅
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetClippingAllowance( void )
{
	return( nvram.clippingAllowance );
}
void SfNvram_SetClippingAllowance( sint16 thresh )
{
	nvram.clippingAllowance = thresh;

	// チェックサムの更新
	nvram.checksum = SfNvram_CalcCheckSum();
}

//---------------------------------------------------------------------------
/**
 *	ターゲット検知距離閾値
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetTargetRangeThreshold( void )
{
	return( nvram.targetRangeThreshold );
}
void SfNvram_SetTargetRangeThreshold( sint16 thresh )
{
	nvram.targetRangeThreshold = thresh;

	// チェックサムの更新
	nvram.checksum = SfNvram_CalcCheckSum();
}

//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetMaskCentralFlag( void )
{
	return( nvram.maskCentral );
}
void SfNvram_SetMaskCentralFlag( sint16 thresh )
{
	nvram.maskCentral = thresh;

	// チェックサムの更新
	nvram.checksum = SfNvram_CalcCheckSum();
}

//---------------------------------------------------------------------------
/**
 * 角度オフセット
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetRadarOffset( RadarPosition pos )
{
	if( pos != posNone )
	{
		return( nvram.acc3AngleOffset[ (int)pos ] );
	}
	else
	{
		return( -1 );
	}
}
void SfNvram_SetRadarOffset( RadarPosition pos, sint16 offset )
{
	uint32 bitmask;

	if( pos != posNone )
	{
		nvram.acc3AngleOffset[ (int)pos ] = offset;

		// チェックサムの更新
		nvram.checksum = SfNvram_CalcCheckSum();
		
		// キャリブ要求フラグが立っていたら下げる
		bitmask = MMW_CALIB_REQ_BASEBIT << (sint16)pos;

		appNvram_CalibRequiredBitDown( bitmask );

	}
}

//---------------------------------------------------------------------------
/**
 * 距離補正係数
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetRadarRangeCoefficient( RadarPosition pos )
{
	if( pos != posNone )
	{
		return(nvram.acc3Range[ (int)pos ]);
	}
	else
	{
		return( -1 );
	}
}
void SfNvram_SetRadarRangeCoefficient( RadarPosition pos, sint16 coefficient )
{
	if( pos != posNone )
	{
		nvram.acc3Range[(int)pos] = coefficient;
	
		// チェックサムの更新
		nvram.checksum = SfNvram_CalcCheckSum();
	}
}

//---------------------------------------------------------------------------
/**
 * 感度補正
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetRadarSensitivity( RadarPosition pos )
{
	if( pos != posNone )
	{
		return(nvram.acc3Sensitivity[ (int)pos ]);
	}
	else
	{
		return( -1 );
	}
}
void SfNvram_SetRadarRangeSensitivity( RadarPosition pos, sint16 sensitivity )
{
	if( pos != posNone )
	{
		nvram.acc3Sensitivity[(int)pos] = sensitivity;
	
		// チェックサムの更新
		nvram.checksum = SfNvram_CalcCheckSum();
	}
}

//---------------------------------------------------------------------------
/**
 * 回転機構原点
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetMotorOrigin( void )
{
	return( nvram.motorOrigin );
}
void SfNvram_SetMotorOrigin( sint16 origin )
{
	nvram.motorOrigin = origin;

	// チェックサムの更新
	nvram.checksum = SfNvram_CalcCheckSum();
}


//---------------------------------------------------------------------------
/**
 * 消火器ありかなしか
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetFireExtinguisherExist( void )
{
	return(nvram.fireExist);
}

void   SfNvram_SetFireExtinguisherExist( sint16 flag )
{
	nvram.fireExist = flag;

	// チェックサムの更新
	nvram.checksum = SfNvram_CalcCheckSum();
}

//---------------------------------------------------------------------------
/**
 * クリッピングエリア延長許可、不許可
 * 2009/05/27 : AHS Ver1.2 005.001.006 , Tojima
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetClipAreaExtend( void )
{
	return( nvram.clipAreaExtend );
}

void   SfNvram_SetClipAreaExtend( sint16 flag )
{
	nvram.clipAreaExtend = flag;

	// チェックサムの更新
	nvram.checksum = SfNvram_CalcCheckSum();
}

//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
bool AppNvram_IsInitialized( void )
{
	bool retVal;
	if( ( REG_MAGIC_NUM == nvram.regVirgin )
	 && ( 0 == nvram.checksum )
	)
	{
		retVal = true;
	}
	else
	{
		retVal = false;
	}
	return( retVal );
}
uint16 SfNvram_GetVirgin( void )
{
	return( nvram.regVirgin );
}
void SfNvram_BecomeVirgin( void )
{
	workRegularVirgin = 0;
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetAcc3Installed( RadarPosition pos )
{
	if( pos != posNone )
	{
		return( nvram.acc3Installed[ (int)pos ] );
	}
	else
	{
		return( 0 );
	}
}
void   SfNvram_SetAcc3Installed( RadarPosition pos, sint16 flag )
{
	if( pos != posNone )
	{
		nvram.acc3Installed[ (int)pos ] = flag;

		// チェックサムの更新
		nvram.checksum = SfNvram_CalcCheckSum();
	}
}

//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetMmr1cInstalled( Mmr1cPosition pos )
{
	if( pos != posMmr1cNone )
	{
		return( nvram.luxInstalled[ (int)pos ] );
	}
	else
	{
		return(0);
	}
}
void   SfNvram_SetMmr1cInstalled( Mmr1cPosition pos, sint16 flag )
{
	if( pos != posMmr1cNone )
	{
		nvram.luxInstalled[ (int)pos ] = flag;

		// チェックサムの更新
		nvram.checksum = SfNvram_CalcCheckSum();
	}
}
//---------------------------------------------------------------------------
/**
 * 角度オフセット
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetMmr1cOffset( Mmr1cPosition pos )
{
	if( pos != posMmr1cNone )
	{
		return( nvram.luxAngleOffset[ (int)pos ] );
	}
	else
	{
		return(-1);
	}
}
void SfNvram_SetMmr1cOffset( Mmr1cPosition pos, sint16 offset )
{
	uint32 bitmask;

	if( pos != posMmr1cNone )
	{
		nvram.luxAngleOffset[(int)pos] = offset;

		// チェックサムの更新
		nvram.checksum = SfNvram_CalcCheckSum();

		// キャリブ要求フラグが立っていたら下げる
		bitmask = MMR1C_CALIB_REQ_BASEBIT << (sint16)pos;
		
		appNvram_CalibRequiredBitDown( bitmask );
	}
}

//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetSrrInstalled( MacomPosition pos )
{
	if( pos != posSrrNone )
	{
		return( nvram.srrInstalled[ (int)pos ] );
	}
	else
	{
		return( 0 );
	}
}
void   SfNvram_SetSrrInstalled( MacomPosition pos, sint16 flag )
{
	if( pos != posSrrNone )
	{
		nvram.srrInstalled[ (int)pos ] = flag;

		// チェックサムの更新
		nvram.checksum = SfNvram_CalcCheckSum();
	}
}
//---------------------------------------------------------------------------
/**
 * 角度オフセット
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetSrrOffset( MacomPosition pos )
{
	if( pos != posSrrNone )
	{
		return( nvram.srrAngleOffset[ (int)pos ] );
	}
	else
	{
		return( -1 );
	}
}
void SfNvram_SetSrrOffset( MacomPosition pos, sint16 offset )
{
	uint32 bitmask;

	if( pos != posSrrNone )
	{
		nvram.srrAngleOffset[ (int)pos ] = offset;

		// チェックサムの更新
		nvram.checksum = SfNvram_CalcCheckSum();

		// キャリブ要求フラグが立っていたら下げる
		bitmask = SRR_CALIB_REQ_BASEBIT << (sint16)pos;
		
		appNvram_CalibRequiredBitDown( bitmask );
	}
}

//---------------------------------------------------------------------------
/**
 * リアセンサの検知フリーエリア定義
 */
//---------------------------------------------------------------------------
uint16 AppNvram_GetRearFreeZoneWidth( void )
{
	return( nvram.rearFreeZoneWidth );
}

void AppNvram_SetRearFreeZoneWidth( uint16 value )
{
	if( ( 3000 <= value ) && ( value <= 10000 ) )
	{
		nvram.rearFreeZoneWidth = value;

		// チェックサムの更新
		nvram.checksum = SfNvram_CalcCheckSum();
	}
	else
	{
		// 受け付けない
	}
}

uint16 AppNvram_GetRearFreeZoneLengh( void )
{
	return( nvram.rearFreeZoneLength );
}

void AppNvram_SetRearFreeZoneLengh( uint16 value )
{
	if( ( 500 <= value ) && ( value <= 10000 ) )
	{
		nvram.rearFreeZoneLength = value;

		// チェックサムの更新
		nvram.checksum = SfNvram_CalcCheckSum();
	}
	else
	{
		// 受け付けない
	}
}


//---------------------------------------------------------------------------
/**
 * 
 */
//---------------------------------------------------------------------------
uint16 SfNvram_GetErrorHistory( sint16 index )
{
	if( (index < 0)  || (index >= NUM_ERROR_HISTORY) ) 
	{
		return( 0 );
	}
	else
	{
		return( nvram.errorHistory[ index ] );
	}
}

void   SfNvram_SetErrorHistory( uint16 code )
{
	// 同じものがなければ、記憶する
	nvram.errorHistory[ nvram.errorIndex ] = code;

	if( nvram.errorIndex++ >= NUM_ERROR_HISTORY )
	{
		nvram.errorIndex = 0;
	}
}

void   SfNvram_ClearErrorHistory( void )
{
	int i;
	for( i=0; i<NUM_ERROR_HISTORY; i++ )
	{
		nvram.errorHistory[i] = 0;
	}
}

//---------------------------------------------------------------------------
/**
 * NV-RAMに記憶されているトラックタイプを取得する
 */
//---------------------------------------------------------------------------
sint16 AppNvram_GetTruckType( void )
{
	return( nvram.truckType );
}
void AppNvram_SetTruckType( sint16 value )
{
	nvram.truckType = value;

	// チェックサムの更新
	nvram.checksum = SfNvram_CalcCheckSum();
}

//---------------------------------------------------------------------------
/**
 * エラー履歴バッファのうちもっとも古いバッファのインデックスを取得する
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetOldestErrorIndex( void )
{
	return( nvram.errorIndex );
}

//---------------------------------------------------------------------------
/**
 * NVRAMの値を直接変更する
 */
//---------------------------------------------------------------------------
void SfNvram_ChangeNvramFromLaptop( EnumNvramItem item, uint16 value )
{
	#ifdef _DEBUG_NVRAM
	char str[64];
	#endif
	
	switch( item )
	{
		case nvItemMotor:
			SfNvram_SetMotorOrigin( value );
			break;

		case nvItemAcc3Range1:
			SfNvram_SetRadarRangeCoefficient( posRight, value );
			break;
		case nvItemAcc3Range2:
			SfNvram_SetRadarRangeCoefficient( posCenter, value );
			break;
		case nvItemAcc3Range3:
			SfNvram_SetRadarRangeCoefficient( posLeft, value );
			break;
		case nvItemAcc3Range4:
			SfNvram_SetRadarRangeCoefficient( posSteer, value );
			break;

		case nvItemAcc3Sens1:
			SfNvram_SetRadarRangeSensitivity( posRight, value );
			break;
		case nvItemAcc3Sens2:
			SfNvram_SetRadarRangeSensitivity( posCenter, value );
			break;
		case nvItemAcc3Sens3:
			SfNvram_SetRadarRangeSensitivity( posLeft, value );
			break;
		case nvItemAcc3Sens4:
			SfNvram_SetRadarRangeSensitivity( posSteer, value );
			break;

		case nvItemAcc3Offset1:
			SfNvram_SetRadarOffset( posRight, value );
			break;
		case nvItemAcc3Offset2:
			SfNvram_SetRadarOffset( posCenter, value );
			break;
		case nvItemAcc3Offset3:
			SfNvram_SetRadarOffset( posLeft, value );
			break;
		case nvItemAcc3Offset4:
			SfNvram_SetRadarOffset( posSteer, value );
			break;

		case nvItemOdsTheshold:
			SfNvram_SetDefaultThreshold( value );
			Thresholding_Init();
			break;

		case nvItemMaskCentral:
			SfNvram_SetMaskCentralFlag( value );
			break;

		case nvItemFireExit:
			SfNvram_SetFireExtinguisherExist( value );
			break;

		case nvItemAcc3exist1:
			SfNvram_SetAcc3Installed( posRight, value );
			break;
		case nvItemAcc3exist2:
			SfNvram_SetAcc3Installed( posCenter, value );
			break;
		case nvItemAcc3exist3:
			SfNvram_SetAcc3Installed( posLeft, value );
			break;
		case nvItemAcc3exist4:
			SfNvram_SetAcc3Installed( posSteer, value );
			break;

		case nvItemMmr1cExist1:
			SfNvram_SetMmr1cInstalled( posMmr1cRight, value );
			break;
		case nvItemMmr1cExist2:
			SfNvram_SetMmr1cInstalled( posMmr1cLeft, value );
			break;

		case nvItemMmr1cOffset1:
			SfNvram_SetMmr1cOffset( posMmr1cRight, value );
			break;
		case nvItemMmr1cOffset2:
			SfNvram_SetMmr1cOffset( posMmr1cLeft, value );
			break;

		case nvItemSrrExist1:
			SfNvram_SetSrrInstalled( posSrrRight, value );
			break;
		case nvItemSrrExist2:
			SfNvram_SetSrrInstalled( posSrrCenter, value );
			break;
		case nvItemSrrExist3:
			SfNvram_SetSrrInstalled( posSrrLeft, value );
			break;
		case nvItemSrrExist4:
			SfNvram_SetSrrInstalled( posSrrRear, value );
			break;

		case nvItemSrrOffset1:
			SfNvram_SetSrrOffset( posSrrRight, value );
			break;
		case nvItemSrrOffset2:
			SfNvram_SetSrrOffset( posSrrCenter, value );
			break;
		case nvItemSrrOffset3:
			SfNvram_SetSrrOffset( posSrrLeft, value );
			break;
		case nvItemSrrOffset4:
			SfNvram_SetSrrOffset( posSrrRear, value );
			break;

		case nvItemAcc3Power:
			SfNvram_SetRadarPowerThreshold( value );
			Thresholding_Init();
			break;

		case nvItemClipAllowance:
			SfNvram_SetClippingAllowance( value );
			break;

		case nvItemTargetRange:
			SfNvram_SetTargetRangeThreshold( value );
			break;

		case nvItemTruckType:
			AppNvram_SetTruckType( value );
			break;

		case nvItemRearFreeZoneW:
			AppNvram_SetRearFreeZoneWidth( value );
			break;

		case nvItemRearFreeZoneL:
			AppNvram_SetRearFreeZoneLengh( value );
			break;
			
		case nvItemLeftChokeExist:
			SfNvram_SetLeftChokeExist( value );
			break;
		case nvItemRightChokeExist:
			SfNvram_SetRightChokeExist( value );
			break;

		case nvItemChokeRangeThresh:
			AppNvram_SetChokeRangeThresh( (sint16)value );
			SrrObstRecog_SetChokeRangeThresh();
			break;
		case nvItemChokeAngleRThresh:
			AppNvram_SetChokeAngleRThresh( (sint16)value );
			SrrObstRecog_SetChokeAngleRThresh();
			break;
		case nvItemChokeAngleLThresh:
			AppNvram_SetChokeAngleLThresh( (sint16)value );
			SrrObstRecog_SetChokeAngleLThresh();
			break;
		case nvItemChokePowerThresh:
			AppNvram_SetChokePowerThresh( (sint16)value );
			SrrObstRecog_SetChokePowerThresh();
			break;

		default:
			break;
	}
}
//---------------------------------------------------------------------------
/**
 * Trucktype RPC拡張のAuxDevice取得
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetSfAuxDevice(sint8 index)
{
	sint16 value = 0;

	if((0 <= index) && (index < TRUCK_AUXHARD_NUM))
	{
		value = nvram.truckAuxHard[index];
	}
	else
	{
		value = -1;
	}
	
	return(value);
}


//---------------------------------------------------------------------------
/**
 * Trucktype RPC拡張のAuxDevice設定
 */
//---------------------------------------------------------------------------
void SfNvram_SetSfAuxDevice(sint8 index, sint16 value)
{
	if((0 <= index) && (index < TRUCK_AUXHARD_NUM))
	{
		nvram.truckAuxHard[index] = value;
	}

	// レーダ構成を変えた場合は他のパラメータも変更
	if( index == 1 )  // ODS定義
	{
		appNvram_SetRadarConfig();
	}

	// チェックサムの更新
	nvram.checksum = SfNvram_CalcCheckSum();
}

//---------------------------------------------------------------------------
/**
 * @retval ACC3X3_MMR1CX2_SRRX4
 * @retval ACC3X4
 */
//---------------------------------------------------------------------------
sint16 AppNvram_GetOdsType(void)
{
	return( nvram.truckAuxHard[1] );
}

//---------------------------------------------------------------------------
/**
 * @retval 
 */
//---------------------------------------------------------------------------
sint16 AppNvram_GetSystemIoVersion(void)
{
	return( nvram.truckAuxHard[0] );
}

//---------------------------------------------------------------------------
/**
 * @retval 
 */
//---------------------------------------------------------------------------
uint16 SfNvram_GetParameterVirgin( void )
{
	return( nvram.parameterVirgin );
}

//---------------------------------------------------------------------------
/**
 * @retval 
 */
//---------------------------------------------------------------------------
bool SfNvram_GetLeftChokeExist( void )
{
	return( nvram.chokeExistLeft );
}
void SfNvram_SetLeftChokeExist( bool flag )
{
	nvram.chokeExistLeft = flag;
	
	// チェックサムの更新
	nvram.checksum = SfNvram_CalcCheckSum();
}
bool SfNvram_GetRightChokeExist( void )
{
	return( nvram.chokeExistRight );
}
void SfNvram_SetRightChokeExist( bool flag )
{
	nvram.chokeExistRight = flag;
	
	// チェックサムの更新
	nvram.checksum = SfNvram_CalcCheckSum();
}
//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
sint16 SfNvram_GetTouchSensorInstalled( void )
{
	return( nvram.touchSensorInstalled );
}
void   SfNvram_SetTouchSensorInstalled( bool flag )
{
	nvram.touchSensorInstalled = flag;

	// チェックサムの更新
	nvram.checksum = SfNvram_CalcCheckSum();
}

//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
uint32 SfNvram_GetOdsCalibRequired( void )
{
	return( nvram.odsCalibRequired );
}

//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
sint16 AppNvram_GetChokeRangeThresh( void )
{
	return( nvram.chokeRangeThresh );
}
void   AppNvram_SetChokeRangeThresh( sint16 thresh )
{
	if( (1000 < thresh) && (thresh < 10000) )
	{
		nvram.chokeRangeThresh = thresh;
		nvram.checksum = SfNvram_CalcCheckSum();
	}
}
//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
sint16 AppNvram_GetChokeAngleRThresh( void )
{
	return( nvram.chokeAngleRThresh );
}
void   AppNvram_SetChokeAngleRThresh( sint16 thresh )
{
	if( (-38 <= thresh) && (thresh <= 38 ) )
	{
		nvram.chokeAngleRThresh = Tools_deg2circular( (float32)thresh );
		nvram.checksum = SfNvram_CalcCheckSum();
	}
}

//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
sint16 AppNvram_GetChokeAngleLThresh( void )
{
	return( nvram.chokeAngleLThresh );
}
void   AppNvram_SetChokeAngleLThresh( sint16 thresh )
{
	if( (-38 <= thresh) && (thresh <= 38) )
	{
		nvram.chokeAngleLThresh = Tools_deg2circular( (float32)thresh );
		nvram.checksum = SfNvram_CalcCheckSum();
	}
}

//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
sint16 AppNvram_GetChokePowerThresh( void )
{
	return( nvram.chokePowerThresh );
}
void   AppNvram_SetChokePowerThresh( sint16 thresh )
{
	if( (0 <= thresh) && (thresh <= 38) )
	{
		nvram.chokePowerThresh = thresh;
		nvram.checksum = SfNvram_CalcCheckSum();
	}
}

//---------------------------------------------------------------------------
/** logging data
 */
//---------------------------------------------------------------------------
uint32 AppNvram_GetLoggingKeyOn(void)
{
	return( nvram.logging[0] );
}
void   AppNvram_SetLoggingKeyOn(uint32 data)
{
	nvram.logging[0] = data;
}

uint32 AppNvram_GetLoggingModeManual(void)
{
	return( nvram.logging[1] );
}
void   AppNvram_SetLoggingModeManual(uint32 data)
{
	nvram.logging[1] = data;
}

uint32 AppNvram_GetLoggingModeStop(void)
{
	return( nvram.logging[2] );
}
void   AppNvram_SetLoggingModeStop(uint32 data)
{
	nvram.logging[2] = data;
}

uint32 AppNvram_GetLoggingModeAuto(void)
{
	return( nvram.logging[3] );
}
void   AppNvram_SetLoggingModeAuto(uint32 data)
{
	nvram.logging[3] = data;
}

uint32 AppNvram_GetLoggingModeError(void)
{
	return( nvram.logging[4] );
}
void   AppNvram_SetLoggingModeError(uint32 data)
{
	nvram.logging[4] = data;
}

uint32 AppNvram_GetLoggingModeMaintenance(void)
{
	return( nvram.logging[5] );
}
void   AppNvram_SetLoggingModeMaintenance(uint32 data)
{
	nvram.logging[5] = data;
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**
 * チェックサムの計算
 */
//---------------------------------------------------------------------------
static uint16 SfNvram_CalcCheckSum( void )
{
	static uint16 sum;
	sint16 i;
	
	sum = 0;

	sum += nvram.motorOrigin;

	for(i=0; i<ODS_SENSOR_NUM; i++)
	{
		sum += nvram.acc3Range[i];
		sum += nvram.acc3AngleOffset[i];
		sum += nvram.acc3Sensitivity[i];
		sum += nvram.acc3Installed[i];
	}
	
	sum += nvram.acc3defaultThreshold;
	sum += nvram.maskCentral;
	sum += nvram.fireExist;
	sum += nvram.acc3PowerThreshold;
	sum += nvram.clippingAllowance;
	sum += nvram.targetRangeThreshold;
	sum += nvram.clipAreaExtend;

	for(i=0; i<POT_TABLE_SIZE;i++)
	{
		sum += nvram.potmap[i];
	}

	sum += nvram.truckType;

	for( i=0; i<MMR1C_NUM; i++)
	{
		sum += nvram.luxInstalled[i];
		sum += nvram.luxAngleOffset[i];
	}
	for(i=0;i<MACOM_NUM;i++)
	{
		sum += nvram.srrInstalled[i];
		sum += nvram.srrAngleOffset[i];
	}

	sum += nvram.rearFreeZoneLength;
	sum += nvram.rearFreeZoneWidth;

	// Truck type拡張Aux Device
	for( i=0; i<TRUCK_AUXHARD_NUM; i++)
	{
		sum += nvram.truckAuxHard[i];
	}

	sum += nvram.parameterVirgin;
	
	sum += nvram.chokeExistLeft;
	sum += nvram.chokeExistRight;
	
	sum += nvram.touchSensorInstalled;
	sum += nvram.odsCalibRequired;

	sum += nvram.chokeRangeThresh;
	sum += nvram.chokeAngleRThresh;
	sum += nvram.chokeAngleLThresh;
	sum += nvram.chokePowerThresh;

	// 結果がたまたま０になったら１にする
	if( sum == 0 )
	{
		sum = 1;
	}

	return( sum );
}


//---------------------------------------------------------------------------
/**
 * チェックサムの比較
 */
//---------------------------------------------------------------------------
static bool SfNvram_CompareCheckSum( void )
{
	if( SfNvram_CalcCheckSum() == nvram.checksum )
	{
		return( TRUE );
	}
	else
	{
		return( FALSE );
	}
	
}

//---------------------------------------------------------------------------
/**
 * Trucktype RPC拡張のAuxDevice初期化
 */
//---------------------------------------------------------------------------
static void appNvram_SetAuxDevice( void )
{
	nvram.truckAuxHard[0] = SFIO_001;            /** No.001構成 Ver.1.2 IO (SF) */
	nvram.truckAuxHard[1] = ESRX3_MMR1CX2_SRRX4;   /** ESR x 4 + MMR1C x 2 + SRR x 4 **/
	nvram.truckAuxHard[2] = 0;                   /** Reserve */
	nvram.truckAuxHard[3] = 0;                   /** Reserve */
	nvram.truckAuxHard[4] = 0;                   /** Reserve */
	nvram.truckAuxHard[5] = 0;                   /** Reserve */
	nvram.truckAuxHard[6] = 0;                   /** Reserve */
	nvram.truckAuxHard[7] = 0;                   /** Reserve */
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
static void appNvram_SetRadarConfig( void )
{
	sint16 radarType;
	
	radarType = AppNvram_GetOdsType();

	nvram.acc3defaultThreshold = 0;
	nvram.acc3PowerThreshold   = 0;
	nvram.clippingAllowance    = 0;

	nvram.acc3Range[ (sint16)posRight  ] = 10000;
	nvram.acc3Range[ (sint16)posCenter ] = 10000;
	nvram.acc3Range[ (sint16)posLeft   ] = 10000;
	nvram.acc3Range[ (sint16)posSteer  ] = 10000;

	nvram.acc3Sensitivity[ (sint16)posRight  ] = 0;
	nvram.acc3Sensitivity[ (sint16)posCenter ] = 0;
	nvram.acc3Sensitivity[ (sint16)posLeft   ] = 0;
	nvram.acc3Sensitivity[ (sint16)posSteer  ] = 0;

	nvram.luxInstalled[ (sint16)posMmr1cRight ]  = 1;
	nvram.luxInstalled[ (sint16)posMmr1cLeft  ]  = 1;

	nvram.srrInstalled[ (sint16)posSrrRight  ] = 1;
	nvram.srrInstalled[ (sint16)posSrrCenter ] = 1;
	nvram.srrInstalled[ (sint16)posSrrLeft   ] = 1;
	nvram.srrInstalled[ (sint16)posSrrRear   ] = 1;

	nvram.acc3Installed[ (sint16)posRight  ]   = 1;
	nvram.acc3Installed[ (sint16)posCenter ]   = 1;
	nvram.acc3Installed[ (sint16)posLeft   ]   = 1;
	nvram.acc3Installed[ (sint16)posSteer  ]   = 0;

}

static void appNvram_SetPalameter(void)
{
	// Truck type拡張Aux Deviceの初期化
	appNvram_SetAuxDevice();

	// レーダコンフィグ変更
	// AuxHardのパラメータからODS構成をセット
	appNvram_SetRadarConfig();

	nvram.rearFreeZoneLength = 1500;
	nvram.rearFreeZoneWidth  = 6000;

	nvram.parameterVirgin = PARAM_MAGIC_NUM;
		
	nvram.chokeExistLeft  = TRUE;
	nvram.chokeExistRight = TRUE;

	nvram.touchSensorInstalled = FALSE;
	nvram.odsCalibRequired	   = 0;

	nvram.chokeAngleRThresh = Tools_deg2circular( -25.0f );
	nvram.chokeAngleLThresh = Tools_deg2circular( 18.0f );

	nvram.checksum = SfNvram_CalcCheckSum();
}
static void appNvram_SetLogZero( void )
{
	//NVRAMは出荷検査時に０にされるが
	//ベンチのホワイトコンはFFFFのままなので、最初に０クリアする
	//本来は不要なのだが・・・。
	uint32 i;
	nvram.loggingVirgin = LOG_MAGIC_NUM;//隠しパラメータ
	for( i = 0; i < LOG_DATA_NUM; i++)
	{
		nvram.logging[i] = 0;
	}
}
//---------------------------------------------------------------------------
/**
 * NVRAMに記憶されているパラメータの妥当性チェック
 * もし異常値だったらデフォルトにし、エラーを立てる
 */
//---------------------------------------------------------------------------
static void appNvram_CheckParameterValidity( void )
{
	sint16 i;
	uint32 bitmask = 0;
	
	// MMWR
	for( i = 0; i < ODS_SENSOR_NUM; i++ )
	{
		bitmask = MMW_CALIB_REQ_BASEBIT << i;

		if( nvram.acc3Installed[i] == 1 )
		{
			// +/- 5degの範囲以外は異常
			if( ( nvram.acc3AngleOffset[i] < 29090 ) || ( 30910 < nvram.acc3AngleOffset[i] )  )
			{
				nvram.acc3AngleOffset[i]  = 30000;	  // 
				appNvram_CalibRequiredBitUp( bitmask );
			}
		}
		else
		{
			appNvram_CalibRequiredBitDown( bitmask );
		}
	}

	// MMR1C
	for( i = 0; i < MMR1C_NUM; i++ )
	{
		bitmask = MMR1C_CALIB_REQ_BASEBIT << i;

		if( nvram.luxInstalled[i] == 1 )
		{
			// +/- 20degの範囲以外は異常
			if( ( nvram.luxAngleOffset[i] < -3640 ) || ( 3640 < nvram.luxAngleOffset[i] )  )
			{
				nvram.luxAngleOffset[i]  = 0;
				appNvram_CalibRequiredBitUp( bitmask );
			}
		}
		else
		{
			appNvram_CalibRequiredBitDown( bitmask );
		}
	}

	// SRR
	for( i = 0; i < MACOM_NUM; i++ )
	{
		bitmask = SRR_CALIB_REQ_BASEBIT << i;

		if( nvram.srrInstalled[i] == 1 )
		{
			// +/- 20degの範囲以外は異常
			if( ( nvram.srrAngleOffset[i] < -3640 ) || ( 3640 < nvram.srrAngleOffset[i] )  )
			{
				nvram.srrAngleOffset[i]  = 0;
				appNvram_CalibRequiredBitUp( bitmask );
			}
		}
		else
		{
			appNvram_CalibRequiredBitDown( bitmask );
		}
	}
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
static void appNvram_CalibRequiredBitUp( uint32 bitmask )
{
	nvram.odsCalibRequired |= bitmask;
}

static void appNvram_CalibRequiredBitDown( uint32 bitmask )
{
	if( ( nvram.odsCalibRequired & bitmask ) == bitmask )
	{
		nvram.odsCalibRequired &= ~bitmask;

		// チェックサムの更新
		nvram.checksum = SfNvram_CalcCheckSum();
	}

}
//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------

static void appNvram_SetRegData( void )
{
	sint16 i;

	workRegularVirgin = REG_MAGIC_NUM;

	for( i=0; i<ODS_SENSOR_NUM; i++)
	{
		nvram.acc3Range[i]       = 10000;
		nvram.acc3AngleOffset[i] = 30000;
		nvram.acc3Sensitivity[i] = 0;
	}

	for( i=0; i<NUM_ERROR_HISTORY; i++)
	{
		nvram.errorHistory[i] = 0;
	}
	nvram.errorIndex = 0;
	

	//オフセット量の初期設定を０にする
	nvram.clippingAllowance = 0;
	nvram.targetRangeThreshold = 60;
	
	nvram.maskCentral = ON;
	nvram.fireExist   = ON;

	nvram.truckType = TYPE_NONE;   // Truck Typeはメンテナンスで設定

	nvram.acc3PowerThreshold   = 2;

	nvram.clipAreaExtend = ON;

	nvram.motorOrigin = 555;

	// 各レーダのオフセット
	nvram.luxAngleOffset[ (sint16)posMmr1cRight ]  = 0;    // 
	nvram.luxAngleOffset[ (sint16)posMmr1cLeft ]   = 0;    // 

	nvram.srrAngleOffset[ (sint16)posSrrRight ]  = 0;  // 
	nvram.srrAngleOffset[ (sint16)posSrrCenter ] = 0;  // 
	nvram.srrAngleOffset[ (sint16)posSrrLeft ]   = 0;  // 
	nvram.srrAngleOffset[ (sint16)posSrrRear ]   = 0;  // 

	//palameter
	appNvram_SetPalameter();

	nvram.chokeRangeThresh	= 4500;
	nvram.chokeAngleRThresh = Tools_deg2circular( -25.0f );
	nvram.chokeAngleLThresh = Tools_deg2circular( 18.0f );
	nvram.chokePowerThresh	= 38;

	// チェックサムの更新
	nvram.checksum = 0;

}
/* end of file */
