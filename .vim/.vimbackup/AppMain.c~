/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2005 Komatsu Ltd. All rights reserved.
 * 
 * $RCSfile: SfMain.c,v $
 * $Revision: 1.1.1.1 $
 * $Author: tojima $
 * $Date: 2005/07/06 06:36:19 $
 * $State: Exp $
 *
 *  @brief: Safety Controller Main
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/
#include "ahscommon.h"
#include "RpcManager.h"
#include "Ahs.h"
#include "AhsLed.h"

#include "SfSystem.h"
#include "AuxDevice.h"
#include "Ods.h"
#include "SrrOds.h"
#include "FurukawaOds.h"
#include "ContiOds.h"
#include "ControllerManager.h"
#include "SfHeartbeat.h"
#include "CrMonitor.h"
#include "Identifier.h"
#include "TestCode.h"
#include "WarningManager.h"

#include "AppMain.h"
#include "sysclock.h"
#include "AppIoDefine.h"
#include "ModeManager.h"
#include "SafeObserver.h"
#include "AppNvram.h"

#define _CONTI_ACTIVATE_
#define _FKW_ACTIVATE_

typedef struct{
	uint32  counter;        // メインサイクルのループカウンタ
	uint32  timeStamp;      // プログラムの経過時間 [msec]
	uint32  lastTime;       // 前回の時刻 [msec]
	uint32  lapsedMsec;     // メインサイクルの時間 [msec]
	uint32  consumption;
	IdInitStatus  initStatus;
} StructMainInfo;

static StructMainInfo  safeMainInfo;

/** プライベート関数
 */
static void AdtMain_CalcLapsedTime( void );
static void AdtMain_CalcConsumptionTime( void );
static void AdtMain_ZeroOutput( void );
static bool AdtMain_isFatalError( void );

//---------------------------------------------------------------------------
/**
 * 変数初期化、関数の初期化
 * @param  なし
 * @retval なし
 */
//---------------------------------------------------------------------------
void AdtMain_Init( void )
{
	safeMainInfo.timeStamp  = 0;
	safeMainInfo.counter    = 0;
	safeMainInfo.initStatus = idInit;

	AppNvram_Init();

	Led_Init();
	Identifier_init();

	// 機種選択のイニシャライズが含まれるため、イニシャライズ（Ahs_Init）の順番には注意すること
	Ahs_Init();

	// NVRAMのアプリでの初期化
	SfSystem_Init();

	AuxDevice_Init();
	ControllerManager_Init();
	SafetyHeartbeat_Init();
	
	CrMonitor_Init();

	TestCode_Init();

	// ODSの初期化は必ずSfSystemの初期化より後に実行すること
	Ods_Init();

	#ifdef _FKW_ACTIVATE_
	FurukawaOds_Init();
	#endif

	#ifdef _CONTI_ACTIVATE_
	ContiOds_Init();
	#endif
	SrrOds_Init();

	SafeObserver_Init();
}
//---------------------------------------------------------------------------
/** 
 * @param 
 * @retval
 */
//---------------------------------------------------------------------------
void AdtMain_PreMain(void)
{
	// 前回からの経過時間を計算
	AdtMain_CalcLapsedTime();

	if( safeMainInfo.initStatus == idInit )
	{
		// IDENTIFIERの読み込みと取り付け位置の決定
		Identifier_PreMain();

		if( Identifier_GetControllerType() == crSafety )
		{
			safeMainInfo.initStatus = idStart;
		}
	}

	// 取付間違い、あるいはIdentifier異常の場合
	if( AdtMain_isFatalError() == TRUE )
	{
		// 全出力を０にオーバーライトする
		//ハートビートはプレメインを呼ばないことで出力０にする
	}
	else//正常時
	{
		SafetyHeartbeat_PreMain();
	}

	TestCode_SetNumber(2001);
	Ahs_PreMain();

	TestCode_SetNumber(2002);
	SfSystem_PreMain();

	TestCode_SetNumber(2003);
	AuxDevice_PreMain();

	TestCode_SetNumber(2004);
	ControllerManager_PreMain();

	TestCode_SetNumber(2005);

	#ifdef _FKW_ACTIVATE_
	FurukawaOds_PreMain();
	#endif

	#ifdef _CONTI_ACTIVATE_
	ContiOds_PreMain();
	#endif

	Ods_PreMain();
	SrrOds_PreMain();

}
//---------------------------------------------------------------------------
/** 
 * @param 
 * @retval
 */
//---------------------------------------------------------------------------
void AdtMain_Main(void)
{
	static bool firstFlag = true;

	if( firstFlag == true )
	{
		firstFlag = false;
		CanDebugPrintf("Safety Controller Start..");
	}

	TestCode_SetNumber(2006);
	Ahs_Main();

	TestCode_SetNumber(2007);
	SfSystem_Main();

	TestCode_SetNumber(2008);
	AuxDevice_Main();

	TestCode_SetNumber(2009);
	Ods_Main();
	#ifdef _FKW_ACTIVATE_
	FurukawaOds_Main();
	#endif
	#ifdef _CONTI_ACTIVATE_
	ContiOds_Main();
	#endif

	SrrOds_Main();

	TestCode_SetNumber(20010);
	ControllerManager_Main();
	// 起動後2秒立ってからハートビート出力
	if( AdtMain_GetMainCounter() > T_2SEC )
	{
		SafetyHeartbeat_Main();
	}

	TestCode_SetNumber(20011);
	CrMonitor_Main();

	SafeObserver_Main();

	// 取付間違い、あるいはIdentifier異常の場合
	if( safeMainInfo.initStatus != idStart )
	{
		if( (safeMainInfo.counter % T_5SEC) == 0)
		{
			CanDebugPrintf("Safety is installed to wrong position");

			if( (Identifier_GetControllerType() == crRbi1)
			 || (Identifier_GetControllerType() == crRbi2)
			 || (Identifier_GetControllerType() == crRbi3)
			 || (Identifier_GetControllerType() == crRbi4) )
			{
				// 何もしない
			}
			else if( (Identifier_GetControllerType() == crDrive)
				  || (Identifier_GetControllerType() == crMbi)   )
			{
				Warning_Set( E_WRONG_POSITION_INSTALL );// 取り付け場所異常
			}
			else
			{
				Warning_Set( E_ID_WIRING_CUT );// 配線異常
			}
		}
	}

	safeMainInfo.timeStamp += INTERVAL_USERMAIN;
	safeMainInfo.counter++;
}
//---------------------------------------------------------------------------
/** 
 * @param 
 * @retval
 */
//---------------------------------------------------------------------------
void AdtMain_PostMain( void )
{
	// 取付間違い、あるいはIdentifier異常の場合
//	  if( safeMainInfo.initStatus != idStart )
	if( AdtMain_isFatalError() == TRUE )
	{
		// 全出力を０にオーバーライトする
		AdtMain_ZeroOutput();
	}
	else  // 正常時
	{
		Ahs_PostMain();
		SfSystem_PostMain();
		AuxDevice_PostMain();
		Ods_PostMain();

		#ifdef _FKW_ACTIVATE_
		FurukawaOds_PostMain();
		#endif

		#ifdef _CONTI_ACTIVATE_
		ContiOds_PostMain();
		#endif
		SrrOds_PostMain();
		ControllerManager_PostMain();
		SafetyHeartbeat_PostMain();
	}

	// LEDだけはとにかく点灯する
	Led_Main();

	AdtMain_CalcConsumptionTime();

	TestCode_SetNumber(20016);
}

//---------------------------------------------------------------------------
/** 
 * @retval タイムスタンプ [msec]
 */
//---------------------------------------------------------------------------
uint32 AdtMain_GetTimeStamp( void )
{
	return( safeMainInfo.timeStamp );
}

//---------------------------------------------------------------------------
/** 
 * @retval メインサイクルのループカウンタ
 */
//---------------------------------------------------------------------------
uint32 AdtMain_GetMainCounter( void )
{
	return( safeMainInfo.counter );
}

//---------------------------------------------------------------------------
/**
 * @return システムメインサイクル [msec]
 */
//---------------------------------------------------------------------------
uint16 AdtMain_GetLapsedMSec( void )
{
	return( (uint16)safeMainInfo.lapsedMsec );
}
//---------------------------------------------------------------------------
/**
 * @return アプリの消費時間 [msec]
 */
//---------------------------------------------------------------------------
uint16 AdtMain_GetConsumptionMSec( void )
{
	return( (uint16)safeMainInfo.consumption );
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**
 * システムメインサイクル時間の計算
 */
//---------------------------------------------------------------------------
void AdtMain_CalcLapsedTime( void )
{
	uint32 nowTime;
	
	// 現在のシステム時刻
	nowTime = GetSystemClock();
	
	// 経過時間
	safeMainInfo.lapsedMsec = nowTime - safeMainInfo.lastTime;

	// 次回の計算に使う
	safeMainInfo.lastTime = nowTime;
}

//---------------------------------------------------------------------------
/**
 * アプリの消費時間の計算
 */
//---------------------------------------------------------------------------
void AdtMain_CalcConsumptionTime( void )
{
	// 経過時間
	safeMainInfo.consumption = GetSystemClock() - safeMainInfo.lastTime;

}
//---------------------------------------------------------------------------
/**
 * 取り付け異常時、出力を０に固定する
 */
//---------------------------------------------------------------------------
void AdtMain_ZeroOutput( void )
{
	// ON/OFF出力
	SetDoutSwitch( DOUT_TURN_RIGHT,          0 );  //  0
	SetDoutSwitch( DOUT_MMR1C_POWER,           0 );  //  1
	SetDoutSwitch( DOUT_TURN_LEFT,           0 );  //  2
	SetDoutSwitch( DOUT_ENGINE_START,        0 );  //  3
	SetDoutSwitch( DOUT_PATOLIGHT_GREEN,     0 );  //  4
	SetDoutSwitch( DOUT_PATOLIGHT_YELLOW,    0 );  //  5
	SetDoutSwitch( DOUT_PATOLIGHT_RED,       0 );  //  6
	SetDoutSwitch( DOUT_HEADLIGHT,           0 );  //  7
	SetDoutSwitch( DOUT_HORN,                0 );  //  8
	SetDoutSwitch( DOUT_HEART_BEAT_TO_DRIVE, 0 );  //  9
	SetDoutSwitch( DOUT_HEADLIGHT_HI,        0 );  // 10
	SetDoutSwitch( DOUT_RADAR_POWER,         0 );  // 11
	// IOなし                                      // 12
	// IOなし                                      // 13
	// IOなし                                      // 14
	SetDoutSwitch( DOUT_PARKING_BRAKE,       0 );  // 15
	
	SendNetworkData_SetAccelOrder( 0 );            // Accel ： 0%
	SendNetworkData_SetRetardOrder( 0 );           // Brake ： 0%
	SendNetworkData_SetShiftPositionOrder( SHIFT_LEVER_POSITION_N );  // Shift ： N
	SendNetworkData_SetFrontRearRateOrder( 0 );    // Rate  ： 中立 
	SendNetworkData_SetHoistOrder( 125 );          // Hoist ： 保持
	SendNetworkData_SetAutoManualModeOrder( 0 );   // AM    ： Manual 
	SendNetworkData_SetEngineModeSwOrder( 0 );     // 
	SendNetworkData_SetAissInhibitOrder( 0 );      // 
	SendNetworkData_SetAbsSettingOrder( 0 );       // 
	SendNetworkData_SetEngineStopOrder( 0 );       // 
	
}

//---------------------------------------------------------------------------
/**
 * @retval TRUE  安全コン異常発生
 * @retval FALSE 安全コンは正常
 */
//---------------------------------------------------------------------------
bool AdtMain_isFatalError( void )
{
	static bool fatalErrDetected = FALSE;
	bool fatalErr = FALSE;
	
	if( safeMainInfo.initStatus != idStart ) return(TRUE);

	fatalErr = ( fatalErrDetected | Mode_isUnknown() );

	if( fatalErr == TRUE ) 
	{
		fatalErrDetected = TRUE ;  // 一度FALSEになったら、電源OFFまで回復させない
	}

	return( fatalErr );
}


