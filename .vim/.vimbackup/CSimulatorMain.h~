//------------------------------------------------------------------------------
// シミュレータの基本クラス
//
//------------------------------------------------------------------------------
#ifndef _SIMULATOR_MAIN_H
#define _SIMULATOR_MAIN_H

#include "CPreciseTimer.h"		//	高精度タイマー
#include "CTruck.h"
#include "CGps.h"
#include "CGateway.h"
#include "CJoySteering.h"
#include "CTamagawa.h"
#include "CReg.h"
#include "CRbiManager.h"
#include "CLandMark.h"
#include "CEmvPosSniffer.h"
#include "CLuxManager.h"
#include "CMacomManager.h"
#include "CFRbiManager.h"
#include "CContiRbiManager.h"


//#define RBI_NUM   2

class CSimulatorMain : public CPreciseTimer
{
private:
	FILE *fpRs;					// RS232C config file
	
	//warningCounterList warningCL[WC_CL_SIZE];

	/* ---------------------------------------------------- */
	/* LM検出回数をカウント、リセットするためのprivate関数  */
	/* ---------------------------------------------------- */
	/*
	int  GetLandMarkWarningCounterID(int index);
	void SortLandMarkWarningCounter(void);
	void InitLandMarkWarningCounter(int id);
	void SetNewLandMarkWarningCounter(int listID, int index);
	*/
	/* ---------------------------------------------------- */
	
public:

	CTruck	TruckObj;		// トラックオブジェクト
	CTamagawa	GyroObj;		// ジャイロオブジェクト(多摩川）
	CGps		GpsObj;			// GPSオブジェクト
//	CGateway	GatewayObj;		// Gateway(PLM3)//.U48用に変更する

	CJoySteering JoyObj;		// JoyStickステアリング
	
	CReg		RegObj;			// REG通信オブジェクト

//	CRbi		   RbiObj[RBI_NUM];			// RBI通信オブジェクト
	CLandmark     		LMarkObj;
	CRbiManager   		RbiManagerObj;
	CEmvPosSniffer		EmvPosObj;
	CLuxManager   		LuxManagerObj;
	CMacomManager 		MacomManagerObj;
	CFRbiManager  		FRbiManagerObj;
	CContiRbiManager	CContiRbiManagerObj;
	
	
	// ------------------------------------
	// 指定された間隔でコールされる関数
	// ------------------------------------
	//virtual 
	void tick() { MainLoop(); }

	// ------------------------------------
	// 50msecのシミュレータのメインループ
	// ------------------------------------
	int  MainLoop(void);

	int  SimInit(void);
	int  SimClose(void);
	void SetInitialPosition(void);
	
	/* --------------------------------------------- */
	/* LM検出回数をカウント、リセットするための関数  */
	/* --------------------------------------------- */
	/*
	int  GetLandMarkWarningCounter(int index);
	void CountUpLandMarkWarningCounter(int index);
	void InitLandMarkWarningCounterList(void);
	void ResetLandMarkWarningCounter(int index);
	*/
	/* --------------------------------------------- */

};

#endif
