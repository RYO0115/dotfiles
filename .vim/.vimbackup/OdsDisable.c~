/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2006 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: OdsDisable.c,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: 
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/
#include "ahscommon.h"
#include "Acc3Manager.h"
#include "ModeManager.h"
#include "TruckInfo.h"
#include "OdsDisable.h"
#include "SrrObstacleRecognition.h"
#include "IbeoObstacleRecognition.h"
#include "Course.h"
#include "RpcManager.h"
#include "VirtualTouchSensor.h"
#include "AppIfdef.h"



// 定数定義
static const sint16 BLIND_RUN_LIMIT = 10000;   // blind runで走行する長さ (10m)

typedef enum{
    ENUM_ALL_DISABLE,
    ENUM_LRR_DISABLE,
    ENUM_SRR_DISABLE
} EnumDisableRadar;

/**
 * クラス属性定義
 */
typedef struct{
    bool   stopFlag;
    bool   blindFlag;
    sint32 blindDistance;
} StructOdsControl;

/**
 */
static StructOdsControl lrrDisable;   /** < long  range radar */
static StructOdsControl srrDisable;   /** < short range radar */

/**
 * プライベート関数
 */
static void OdsDisable_TruckStop(StructOdsControl *ptr);
static void OdsDisable_BlindRun(StructOdsControl *ptr);
static void OdsDisable_RadarSuspend(bool flag, EnumDisableRadar type);
static void OdsDisable_ClearBlindRun(StructOdsControl *ptr);

//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void OdsDisable_Init(void)
{
    OdsDisable_ClearBlindRun(&lrrDisable);
    OdsDisable_ClearBlindRun(&srrDisable);

    lrrDisable.blindFlag     = FALSE;
    lrrDisable.stopFlag      = TRUE;

    srrDisable.blindFlag     = FALSE;
    srrDisable.stopFlag      = TRUE;
}

//---------------------------------------------------------------------------
/**
 * メイン
 */
//---------------------------------------------------------------------------
void OdsDisable_Main(void)
{
    ModeType mode;
    
    mode = Mode_GetCurrentMode();
    
    if( mode == modeAuto )
    {
        // 車両が停止中およびBlindRun中はレーダ機能は停止する
        OdsDisable_TruckStop(&lrrDisable);
        OdsDisable_BlindRun(&lrrDisable);

        // TouchSensorはBlindRun中だけ
        OdsDisable_BlindRun(&srrDisable);

        // Long Rangeのみ
        if( ( lrrDisable.blindFlag==TRUE ) || ( lrrDisable.stopFlag == TRUE ) )
        {
            OdsDisable_RadarSuspend(TRUE, ENUM_LRR_DISABLE);
        }
        else
        {
            // レーダ検知機能Enable
            OdsDisable_RadarSuspend(FALSE, ENUM_LRR_DISABLE);
        }

        // Short Rangeのみ
        if( srrDisable.blindFlag==TRUE )
        {
            OdsDisable_RadarSuspend(TRUE, ENUM_SRR_DISABLE);
        }
        else
        {
            // レーダ検知機能Enable
            OdsDisable_RadarSuspend(FALSE, ENUM_SRR_DISABLE);
        }

    }
    else if( ( mode == modeManual ) || ( mode == modeMaintenance ) )
    {
        // BlindRun終了
        OdsDisable_ClearBlindRun(&lrrDisable);
        OdsDisable_ClearBlindRun(&srrDisable);

        // レーダ検知機能Enable
        OdsDisable_RadarSuspend(FALSE, ENUM_ALL_DISABLE);
    }
    else if( mode == modeStop )
    {
        // BlindRun終了
        OdsDisable_ClearBlindRun(&lrrDisable);
        OdsDisable_ClearBlindRun(&srrDisable);

        // レーダ検知機能Disable
        OdsDisable_RadarSuspend(TRUE, ENUM_ALL_DISABLE);
    }
    else
    {
        // レーダ検知機能Disable
        OdsDisable_RadarSuspend(TRUE, ENUM_ALL_DISABLE);
    }
}
//---------------------------------------------------------------------------
/**
 * Blind RUNの開始
 * すでにBlindRun中のときは無視する
 */
//---------------------------------------------------------------------------
void OdsDisable_BlindRunStart(void)
{
    if( lrrDisable.blindFlag == FALSE )
    {
        #ifdef _BLINDRUN_DEBUG_
            CanDebugPrintf("blind run start");
        #endif

        lrrDisable.blindFlag     = TRUE;
        lrrDisable.blindDistance = 0;
    }
}

void OdsDisable_SrrBlindRunStart(void)
{
    if( srrDisable.blindFlag == FALSE )
    {
        #ifdef _BLINDRUN_DEBUG_
            CanDebugPrintf("SRR blind run start");
        #endif

        srrDisable.blindFlag     = TRUE;
        srrDisable.blindDistance = 0;
    }
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
static void OdsDisable_TruckStop(StructOdsControl *ptr)
{
    sint16 speed;
    
    speed = TruckInfo_GetSpeed();

    // 車速が停止時にはレーダ検知機能を停止する
    // 100mm/sec以下ではレーダ機能停止（計測はする）
    if( ( -100 < speed ) && ( speed < 100 ) )
    {
        ptr->stopFlag = TRUE;   // 計測停止
    }
    else
    {
        ptr->stopFlag = FALSE;
    }
}


//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
static void OdsDisable_BlindRun(StructOdsControl *ptr)
{
    sint16 speed, direction;
    
    // 現在の進行方向
    direction = Course_GetDirection( TruckInfo_GetCurrentIndex() );

    // 速度の大きさ
    speed = direction * TruckInfo_GetSpeed();

    if( ptr->blindFlag == TRUE )
    {
        // 走行距離の計算（コースの進行方向に走行しているときだけカウント）
        if( speed > 0 )
        {
            ptr->blindDistance += (sint32)speed / (1000/INTERVAL_USERMAIN);
        }

        // 閾値(10m)を超えたら、BlindRunを終了
        if( ptr->blindDistance > BLIND_RUN_LIMIT )
        {
            OdsDisable_ClearBlindRun(ptr);
        }
    }
}


//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
static void OdsDisable_RadarSuspend(bool flag, EnumDisableRadar type)
{
    if( ( type == ENUM_SRR_DISABLE ) ||  ( type == ENUM_ALL_DISABLE ) )
    {
        // Virtual Touch Sensor
        VirtualTouchSensor_Suspend(flag);

        // MACOM
        SrrObstRecog_Suspend(flag);
    }

    if( ( type == ENUM_LRR_DISABLE ) ||  ( type == ENUM_ALL_DISABLE ) )
    {
        // レーダ検知機能Disable
        Acc3Manager_RadarSuspend(flag);

        // FURUKAWA
        IbeoObstRecog_Suspend(flag);
    }
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
static void OdsDisable_ClearBlindRun(StructOdsControl *ptr)
{
    #ifdef _BLINDRUN_DEBUG_
    char str[128];
    #endif

    if( ptr->blindFlag == TRUE )
    {
        ptr->blindFlag = FALSE;

        #ifdef _BLINDRUN_DEBUG_
        sprintf(str,"blind run end : %d",ptr->blindDistance);
        CanDebugPrintf(str);
        #endif

    }

    ptr->blindDistance  = 0;
}

/* end of file */
