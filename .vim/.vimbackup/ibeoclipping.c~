/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2006 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: furukawaclipping.c,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: Safety Controller
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/

#include "ahscommon.h"
#include "furukawaclipping.h"
#include "ModeManager.h"
#include "AppMain.h"
#include "RpcManager.h"
#include "ClippingAreaManager.h"
#include "LuxManager.h"
#include "Course.h"
#include "TruckInfo.h"
#include "VirtualBank.h"

/**
 * クリッピングエリアRPC構造体定義
 */
typedef struct{
    sint8  num;         /**< 点の数(最初の点を含む) = zoneの数  */
    sint8  type;        /**< Zoneのタイプ */
    sint16 heading;     /**< 最初の点の方位角        */
    sint32 xpos;        /**< 始点の位置(x) [mm]      */
    sint32 ypos;        /**< 始点の位置(y) [mm]      */
    struct{
        sint16 dx;          /**< [mm] */
        sint16 dy;          /**< [mm] */
        sint16 heading;     /**< [2pi/65536] */
        uint8  widthR;      /**< クリッピングエリアの幅  [10cm] */
        uint8  widthL;      /**< クリッピングエリアの幅  [10cm] */
    } dPoint[NUM_ZONE];
    sint8  lastSegment;     /**< 最後のセグメントのタイプ */ 
} StructSfClipArea;        // 12 + 8 * 20 = 172byte (Max) 


typedef struct{
    bool             enable;
    StructSfClipArea rpcBuf;
    uint32           sendInterval;
} StructFurukawaClipping;

/**
 * インスタンス定義
 */
static StructFurukawaClipping clipFurukawa;

/**
 * 関数プロトタイプ宣言
 */
static void  FurukawaClip_SetZone(void);
static void FurukawaClip_SendClipArea(void);

//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void FurukawaClip_Init(void)
{
    clipFurukawa.rpcBuf.num  = 0;
    clipFurukawa.enable = TRUE;
    
    clipFurukawa.sendInterval = T_1SEC;
}

//---------------------------------------------------------------------------
/**
 * メインルーチン
 */
//---------------------------------------------------------------------------
void FurukawaClip_Main(void)
{
    uint32 tcycle;
    
    if( Mode_GetCurrentMode() == modeAuto )
    {
        tcycle = T_100MSEC;
    }
    else
    {
        tcycle = clipFurukawa.sendInterval;
    }

    if( ( AdtMain_GetMainCounter() % tcycle ) == 0 )
    {
        // 送信バッファにセット
        FurukawaClip_SetZone();
        
        // ClippingArea送信
        FurukawaClip_SendClipArea();
    }
    else
    {
        //
    }
}

//---------------------------------------------------------------------------
/**
 * 
 */
//---------------------------------------------------------------------------
void FurukawaClip_Enable(void)
{
    clipFurukawa.enable  = TRUE;
}
void FurukawaClip_Disable(void)
{
    clipFurukawa.enable = FALSE;
}

//---------------------------------------------------------------------------
/**
 * テスト用
 */
//---------------------------------------------------------------------------
void FurukawaClip_ChangeSendInterval(uint32 interval)
{
    clipFurukawa.sendInterval = interval;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**
 * クリッピングエリア情報のセット
 */
//---------------------------------------------------------------------------
void FurukawaClip_SetZone(void)
{
    sint16 i;
    sint32 dx, dy;
    sint16 heading;
    uint8  widthR, widthL;
    uint32 index;

    // クリッピングエリア数
    clipFurukawa.rpcBuf.num = ClippingArea_GetAreaNum();
    if( clipFurukawa.rpcBuf.num > NUM_ZONE )
    {
        clipFurukawa.rpcBuf.num = NUM_ZONE;
    }
    else if( clipFurukawa.rpcBuf.num < 0 )
    {
        clipFurukawa.rpcBuf.num = 0;
    }
    else
    {
        //
    }

    // クリッピングエリアのタイプ
    clipFurukawa.rpcBuf.type         = (uint8)ClippingArea_GetZoneType();  
    clipFurukawa.rpcBuf.lastSegment = ClippingArea_GetZoneSegmentType( clipFurukawa.rpcBuf.num-1 ); 

    if( clipFurukawa.rpcBuf.num == 0 )
    {
        // do nothing;
    }
    else // 通常
    {
        for( i=0; i<clipFurukawa.rpcBuf.num; i++ )
        {
            // 最初の点をセット
            if( i==0 )
            {
                if( clipFurukawa.rpcBuf.type == zoneAutoRun )
                {
                    index    = ClippingArea_GetCourseIndex(i);
                    clipFurukawa.rpcBuf.heading = Course_GetHeading(index);
	                clipFurukawa.rpcBuf.xpos    = ClippingArea_GetZoneRearCenterX1(i);
	                clipFurukawa.rpcBuf.ypos    = ClippingArea_GetZoneRearCenterY1(i);

                }
                else if( (clipFurukawa.rpcBuf.type == zoneTest2)
                      || (clipFurukawa.rpcBuf.type == zoneTest4) 
                      || (clipFurukawa.rpcBuf.type == zoneTestRear2) 
                      )
                {
                    clipFurukawa.rpcBuf.heading = TruckInfo_GetHeading();
	                clipFurukawa.rpcBuf.xpos    = ClippingArea_GetZoneCenterX1(i);
	                clipFurukawa.rpcBuf.ypos    = ClippingArea_GetZoneCenterY1(i);
                }
                else
                {
                    clipFurukawa.rpcBuf.heading = 0;
	                clipFurukawa.rpcBuf.xpos    = ClippingArea_GetZoneCenterX1(i);
	                clipFurukawa.rpcBuf.ypos    = ClippingArea_GetZoneCenterY1(i);
                }
            }
            else
            {
                // do nothing
            }


            // 差分
            if( clipFurukawa.rpcBuf.type == zoneAutoRun )
            {
                index    = ClippingArea_GetCourseIndex(i);
                heading  = Course_GetHeading(index);
                widthR   = Bank_GetBankWidthR(index);
                widthL   = Bank_GetBankWidthL(index);
	            dx = ClippingArea_GetZoneRearCenterX2(i) - ClippingArea_GetZoneRearCenterX1(i);
	            dy = ClippingArea_GetZoneRearCenterY2(i) - ClippingArea_GetZoneRearCenterY1(i);
            }
            else if( (clipFurukawa.rpcBuf.type == zoneTest2)
                  || (clipFurukawa.rpcBuf.type == zoneTest4) 
                  || (clipFurukawa.rpcBuf.type == zoneTestRear2) 
                  )
            {
                heading  = TruckInfo_GetHeading();
                widthR   = ClippingArea_GetZoneWidth((ZoneType)clipFurukawa.rpcBuf.type );
                widthL   = widthR;
	            dx = ClippingArea_GetZoneCenterX2(i) - ClippingArea_GetZoneCenterX1(i);
	            dy = ClippingArea_GetZoneCenterY2(i) - ClippingArea_GetZoneCenterY1(i);
            }
            else
            {
                heading  = 0;
                widthR   = ClippingArea_GetZoneWidth( (ZoneType)clipFurukawa.rpcBuf.type );
                widthL   = widthR;
	            dx = ClippingArea_GetZoneCenterX2(i) - ClippingArea_GetZoneCenterX1(i);
	            dy = ClippingArea_GetZoneCenterY2(i) - ClippingArea_GetZoneCenterY1(i);
            }


            clipFurukawa.rpcBuf.dPoint[i].dx      = (sint16)dx;
            clipFurukawa.rpcBuf.dPoint[i].dy      = (sint16)dy;
            clipFurukawa.rpcBuf.dPoint[i].heading = heading;
            clipFurukawa.rpcBuf.dPoint[i].widthR  = widthR;
            clipFurukawa.rpcBuf.dPoint[i].widthL  = widthL;

        }
    }
}

//---------------------------------------------------------------------------
/**
 * クリッピングエリア情報の送信
 */
//---------------------------------------------------------------------------
void FurukawaClip_SendClipArea(void)
{
    sint16 size, i;
    uint8 buf[256], *ptr;

    size = 13 + 8 * (sint16)clipFurukawa.rpcBuf.num;

    ptr = &buf[0];
    memcpy((void*)ptr, (void*)&clipFurukawa.rpcBuf.num,     1); ptr += 1;
    memcpy((void*)ptr, (void*)&clipFurukawa.rpcBuf.type,    1); ptr += 1;
    memcpy((void*)ptr, (void*)&clipFurukawa.rpcBuf.heading, 2); ptr += 2;
    memcpy((void*)ptr, (void*)&clipFurukawa.rpcBuf.xpos,    4); ptr += 4;
    memcpy((void*)ptr, (void*)&clipFurukawa.rpcBuf.ypos,    4); ptr += 4;

    for( i=0; i<clipFurukawa.rpcBuf.num; i++ )
    {
        memcpy((void*)ptr, (void*)&clipFurukawa.rpcBuf.dPoint[i].dx,      2); ptr += 2;
        memcpy((void*)ptr, (void*)&clipFurukawa.rpcBuf.dPoint[i].dy,      2); ptr += 2;
        memcpy((void*)ptr, (void*)&clipFurukawa.rpcBuf.dPoint[i].heading, 2); ptr += 2;
        memcpy((void*)ptr, (void*)&clipFurukawa.rpcBuf.dPoint[i].widthR,  1); ptr += 1;
        memcpy((void*)ptr, (void*)&clipFurukawa.rpcBuf.dPoint[i].widthL,  1); ptr += 1;
    }
    memcpy((void*)ptr, (void*)&clipFurukawa.rpcBuf.lastSegment,     1); ptr += 1;

    // 送信
    // LBI1に送信（LBI2は盗み聞き）  （通常）
    RpcManager_SendMsgNoAck( CAN_B,
                        SF_CLIPPING_AREA,
                        LBI1,
                        PRIOR_LBI1,
                        size,
                        (uint8*)&buf[0]);

}

