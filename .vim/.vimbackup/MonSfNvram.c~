/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2005 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: MonSfNvram.h,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: Safety Controller
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/

#include "ahscommon.h"
#include "MonCtrl.h"
#include "MonSfNvram.h"
#include "DataTypes.h"
#include "AhsTools.h"

#include "AppMain.h"
#include "AppNvram.h"
#include "MacomCommon.h"
#include "FurukawaCommon.h"

/**
 * Nvram Msgの構造定義
 */
typedef struct{
    uint16    timestamp;  // タイムスタンプ
    uint16    id;         // データID

    sint16    motorOrigin;//実データは300〜1000の値を取るので、データ種別としては、300未満の値を使うこと
    sint16    acc3defaultThresh;
    sint16    acc3Range[ODS_SENSOR_NUM];
    sint16    acc3AngleOffset[ODS_SENSOR_NUM];
    sint8     acc3Sensitivity[ODS_SENSOR_NUM];
    sint8     acc3Installed[ODS_SENSOR_NUM];
    sint8     maskCentral;
    sint8     clipExtend;
    sint16    fireExist;
    sint16    acc3PowerThreshold;    //反射強度閾値
    sint16    clippingAllowance;     //クリッピングエリア
    sint16    targetRangeThreshold;  //ターゲット距離閾値

    sint16    luxAngleOffset[MMR1C_NUM];    // 
    sint16    srrAngleOffset[MACOM_NUM];  // 

    sint8     luxInstalled[MMR1C_NUM];      // 
    sint8     srrInstalled[MACOM_NUM];    // 

    uint16    freeZoneW;
    uint16    freeZoneL;

    uint8     truckType;                  


} MonSfNvramMsg;

/**
 */
typedef struct{
    MonSfNvramMsg    data;  // データメッセージ構造体
    StructMonCtrl ctrl;     // 送信コントロールクラス
} StructMonSfNvramData;
 
/**
 * インスタンス定義
 */
static StructMonSfNvramData monnv;
static StructMonSfNvramData monnvAux;


//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void MonSfNvram_Init(void)
{
    MonCtrl_Init( &monnv.ctrl, 
                  (sint16)sizeof(MonSfNvramMsg),
                  (uint8*)&monnv.data,
                  MonSfNvram_SetData
                 );

	MonCtrl_Init( &monnvAux.ctrl, 
                  (sint16)sizeof(MonSfNvramMsg),
                  (uint8*)&monnvAux.data,
                  MonSfNvram_SetDataAux
                 );
}

//---------------------------------------------------------------------------
/**
 * メイン
 */
//---------------------------------------------------------------------------
void MonSfNvram_Main(void)
{
    MonCtrl_Main(&monnv.ctrl);
	MonCtrl_Main(&monnvAux.ctrl);
}

//---------------------------------------------------------------------------
/**
 * データのセット
 */
//---------------------------------------------------------------------------
void MonSfNvram_SetData(void)
{
    int i;

    monnv.data.timestamp = (uint16)AdtMain_GetMainCounter();
    monnv.data.id        = SF_NVRAM;

    for(i=0;i<ODS_SENSOR_NUM;i++)
    {
        monnv.data.acc3Range[i]       = SfNvram_GetRadarRangeCoefficient((RadarPosition)i);
        monnv.data.acc3AngleOffset[i] = SfNvram_GetRadarOffset((RadarPosition)i);
        monnv.data.acc3Sensitivity[i] = (sint8)SfNvram_GetRadarSensitivity((RadarPosition)i);
        monnv.data.acc3Installed[i]   = (sint8)SfNvram_GetAcc3Installed((RadarPosition)i);
    }
    monnv.data.motorOrigin        = SfNvram_GetMotorOrigin();
    monnv.data.acc3defaultThresh  = SfNvram_GetRadarDefaultThreshold();
    monnv.data.maskCentral        = (sint8)SfNvram_GetMaskCentralFlag();
    monnv.data.clipExtend         = (sint8)SfNvram_GetClipAreaExtend();
    monnv.data.fireExist          = SfNvram_GetFireExtinguisherExist();
    
    monnv.data.acc3PowerThreshold   = SfNvram_GetRadarPowerThreshold();  //反射強度閾値
    monnv.data.clippingAllowance    = SfNvram_GetClippingAllowance();    //クリッピングエリア
    monnv.data.targetRangeThreshold = SfNvram_GetTargetRangeThreshold(); //ターゲット距離閾値

    for(i=0;i<MMR1C_NUM;i++)
    {
		monnv.data.luxAngleOffset[i] = SfNvram_GetMmr1cOffset((Mmr1cPosition)i);
		monnv.data.luxInstalled[i]   = (sint8)SfNvram_GetMmr1cInstalled((Mmr1cPosition)i);
	}

    for(i=0;i<MACOM_NUM;i++)
    {
		monnv.data.srrAngleOffset[i] = SfNvram_GetSrrOffset((MacomPosition)i);
		monnv.data.srrInstalled[i]   = (sint8)SfNvram_GetSrrInstalled((MacomPosition)i);
	}

    monnv.data.truckType        = AppNvram_GetTruckType();

    monnv.data.freeZoneL        = AppNvram_GetRearFreeZoneLengh();
    monnv.data.freeZoneW        = AppNvram_GetRearFreeZoneWidth();
}

//---------------------------------------------------------------------------
/**
 * データのセット(AuxHard関連）
 */
//---------------------------------------------------------------------------
void MonSfNvram_SetDataAux(void)
{
	int i;
	uint16 upper,lower;

    monnvAux.data.timestamp = (uint16)AdtMain_GetMainCounter();
    monnvAux.data.id        = SF_NVRAM;

	monnvAux.data.acc3Range[0] = SfNvram_GetSfAuxDevice(0);
    monnvAux.data.acc3Range[1] = SfNvram_GetSfAuxDevice(1);
    monnvAux.data.acc3Range[2] = SfNvram_GetSfAuxDevice(2);
    monnvAux.data.acc3Range[3] = SfNvram_GetSfAuxDevice(3);

	monnvAux.data.acc3AngleOffset[0] = SfNvram_GetSfAuxDevice(4);
    monnvAux.data.acc3AngleOffset[1] = SfNvram_GetSfAuxDevice(5);
    monnvAux.data.acc3AngleOffset[2] = SfNvram_GetSfAuxDevice(6);
    monnvAux.data.acc3AngleOffset[3] = SfNvram_GetSfAuxDevice(7);

    for(i=0;i< ODS_SENSOR_NUM;i++)
    {
        monnvAux.data.acc3Sensitivity[i] = 0;
        monnvAux.data.acc3Installed[i]   = 0;
    }

    monnvAux.data.motorOrigin        = 1;//データ区別のためのラベル
    monnvAux.data.acc3defaultThresh  = 0;
    monnvAux.data.maskCentral        = 0;
    monnvAux.data.clipExtend         = 0;
    monnvAux.data.fireExist          = 0;
    
    monnvAux.data.acc3PowerThreshold   = SfNvram_GetLeftChokeExist();
    monnvAux.data.clippingAllowance    = SfNvram_GetRightChokeExist();
    monnvAux.data.targetRangeThreshold = SfNvram_GetTouchSensorInstalled();

    for(i=0;i<MMR1C_NUM;i++)
    {
		monnvAux.data.luxAngleOffset[i] = 0;
		monnvAux.data.luxInstalled[i]   = 0;
	}

    for(i=0;i<MACOM_NUM;i++)
    {
		monnvAux.data.srrAngleOffset[i] = 0;
		monnvAux.data.srrInstalled[i]   = 0;
	}
	monnvAux.data.srrAngleOffset[0] = AppNvram_GetChokeRangeThresh();
	monnvAux.data.srrAngleOffset[1] = AppNvram_GetChokeAngleRThresh();
	monnvAux.data.srrAngleOffset[2] = AppNvram_GetChokeAngleLThresh();
	monnvAux.data.srrAngleOffset[3] = AppNvram_GetChokePowerThresh();

    monnvAux.data.truckType        = 0;

	upper = (uint16)((SfNvram_GetOdsCalibRequired() & 0xffff0000) >> 16);
	lower = (uint16)( SfNvram_GetOdsCalibRequired() & 0x0000ffff);

    monnvAux.data.freeZoneL        = upper;
    monnvAux.data.freeZoneW        = lower;

}


//---------------------------------------------------------------------------
/**
 * 送信要求コマンドの受信
 */
//---------------------------------------------------------------------------
void MonSfNvram_ReceiveSendReq(uint8 dest, uint8* buf)
{
    sint16 interval;
    
    interval = Tools_GetPtrToShortS(&buf[0]);

    MonCtrl_SendMonData(&monnv.ctrl,dest,interval);
	MonCtrl_SendMonData(&monnvAux.ctrl,dest,interval);
}


