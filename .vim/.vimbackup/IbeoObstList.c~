/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2006 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: FurukawaObstList.h,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: Safety Controller
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/

#include "FurukawaObstList.h"
#include "TruckInfo.h"
#include "AppMain.h"

#define STOP_SCORE 100


#define _PRINT_OBST_
static char debug_str[128];
#ifdef _PRINT_OBST_

#endif

//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void FurukawaObstList_Clear(StructFurukawaObstList *list)
{
    list->time        = 0;
    list->range       = 0;
    list->speed       = 0;
    list->xpos        = 0;
    list->ypos        = 0;
    list->expectRange = 0;
    list->score       = 0;
    list->radar       = posLuxNone;
}


//---------------------------------------------------------------------------
/**
 * 障害物リストへの登録
 */
//---------------------------------------------------------------------------
void FurukawaObstList_SetTargetInfo( StructFurukawaObstList *list,  /** < リストのポインタ*/
                                    sint32 range,       /** < 検知距離 [mm] */
                                    sint16 speed,       /** < 相対速度 [mm/s] */
                                    sint32 xpos,        /** < X座標 */
                                    sint32 ypos,        /** < Y座標 */
                                    sint16 score,       /** < 得点 */
                                    LuxPosition pos     /** < 検知レーダの種類 */
                                   )
{
    list->range = range;
    list->speed = speed;
    list->radar = pos;

    list->xpos = xpos;
    list->ypos = ypos;

    list->expectRange = range;  // 次回の予想距離は、今回の検知距離を入れる
    list->score += score;       // 得点を加算
	
	
    if( list->score > STOP_SCORE )
    {
    	list->score = (sint16)STOP_SCORE;
	}
	else
	{
		//
	}

    list->time = AdtMain_GetMainCounter();
}

//---------------------------------------------------------------------------
/**
 * (毎サイクル実行すること)
 */
//---------------------------------------------------------------------------
void FurukawaObstList_CalcExpectedRange(StructFurukawaObstList *list)
{
    // 次の予想距離は相対速度×0.05sec分近くなる
    // 速度は近づく方向が負
    
    list->expectRange += list->speed /(1000/INTERVAL_USERMAIN);
    //list->expectRange += list->speed * INTERVAL_USERMAIN;// * 1000(mm) / 1000(msec)
}

