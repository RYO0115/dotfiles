/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2006 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: OdsMotor.h,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: Safety Controller
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/
#include <string.h>
#include "Acc3Radar.h"
#include "RpcManager.h"
#include "TruckInfo.h"
#include "Thresholding.h"
#include "ClippingAreaManager.h"
#include "AhsTools.h"
#include "MaskContain.h"
#include "AppNvram.h"
#include "AhsAuxDevice.h"

#define ACC3_ANGLE 1365
#define ESR_ANGLE  1820
static sint16 angleThreshold;

/** プライベート関数
 */
static void Acc3_CalcRadarPosition(StructAcc3* acc3,   /** < */
                sint32  truckX,    /** < トラックのX座標 [mm]*/
                sint32  truckY,    /** < トラックのY座標 [mm]*/
                sint16  truckDir,  /** < トラックの方位角 [2pi/65536]*/
                float32 cs,        /** < cos(トラックの方位角) */
                float32 sn         /** < sin(トラックの方位角) */
                );

static bool Acc3_CopyToRpcBuffer(StructAcc3* acc3, const uint8 *msg, sint16 size);
static void Acc3_CopyToTargetInfoBuffer(StructAcc3* acc3);
static void Acc3_CompareWithBasicThreshold(const StructAcc3* acc3, MaskType mask);
static void Acc3_CompareWithAngleThreshold(const StructAcc3* acc3);
static void Acc3_CompareWithRangeThreshold(const StructAcc3* acc3);
static void Acc3_PickUpTargetInClippingArea(const StructAcc3* acc3);
static void Acc3_CompareWithMask(const StructAcc3* acc3);
static sint16 Acc3_PickUpClosestTarget(const StructAcc3* acc3);
static void Acc3_CopyToOutputTarget(StructAcc3* acc3, sint16 index);

//---------------------------------------------------------------------------
/**
 * 初期化
 * @param *acc3  
 * @param pos    レーダの種類
 */
//---------------------------------------------------------------------------
void Acc3_Init(StructAcc3* acc3, RadarPosition pos, bool validFlag)
{
    sint16 i;
    sint16 odsType;

    //ACC3とESRではAngleRangeが違う
    odsType = AppNvram_GetOdsType();
    if( (odsType == ESRX3_LUXX2_SRRX4)||(odsType == ESRX3_LUXX2) )
    {
		angleThreshold = ESR_ANGLE;
	}
	else
	{
		angleThreshold = ACC3_ANGLE;
	}

    // レーダがインストールされているかどうか
    acc3->valid = validFlag;

    // 
    memset((void*)&acc3->trackMsg,0,sizeof(StructTrackMsg));

    // TargetInfoバッファをクリア
    for(i=0;i<MAX_TARGETS;i++)
    {
        Acc3TargetInfo_Clear(&acc3->targetBin[i]);
    }
    Acc3TargetInfo_Clear(&acc3->target);

    // 送信コマンドを初期化
    acc3->trackReq.radiate  = OFF;
    acc3->trackReq.scanning = OFF;
    acc3->trackReq.modeauto = OFF;
    acc3->trackReq.datatype = 0;
    acc3->trackReq.countfifteen = ON;
    acc3->trackReq.shortmode    = ON;

    // レーダの取り付け位置と種類をセット
    acc3->position = pos;

    // レーダのパラメータを入力する
    Acc3Param_Init(&acc3->param, acc3->position );

    // 故障診断オブジェクトの初期化
    Acc3Diag_Init(&acc3->diag, acc3->valid);
    
}

//---------------------------------------------------------------------------
/**
 * メイン（毎サイクルに一回だけ実行すること）
 */
//---------------------------------------------------------------------------
void Acc3_PreMain(StructAcc3* acc3)
{
    // RPC受信フラグのセット
    if( acc3->counter != acc3->prevCounter )
    {
        acc3->updateFlag = ON;
    }
    acc3->prevCounter = acc3->counter;

}

void Acc3_Main(StructAcc3* acc3,  /** < Acc3インスタンスのポインタ*/
                sint32  truckX,    /** < トラックのX座標 [mm]*/
                sint32  truckY,    /** < トラックのY座標 [mm]*/
                sint16  truckDir,  /** < トラックの方位角 [2pi/65536]*/
                float32 cs,        /** < cos(トラックの方位角) */
                float32 sn         /** < sin(トラックの方位角) */
                )
{
    // レーダの位置を計算
    Acc3_CalcRadarPosition(acc3, truckX, truckY, truckDir, cs, sn);
    
    // レーダがインストールされていない場合は故障診断しない
    if( acc3->valid == TRUE ) 
    {
        Acc3Diag_Main(&acc3->diag);
    }
    
    //ACC3のリセットコントロール
    if( acc3->resetReq==ON )
    {
        if( acc3->resetTimer <= 0 )
        {
            acc3->resetTimer = 0;
            
            Acc3_RadiateStart(acc3);
            Acc3_ScanningStart(acc3);
            
            acc3->resetReq = OFF;
        }

        acc3->resetTimer--;
    }
}

void Acc3_PostMain(StructAcc3* acc3)
{
    // データ更新フラグを下げる
    acc3->updateFlag = OFF;
}

//---------------------------------------------------------------------------
/**
 * TrackDataRPC受信処理
 */
//---------------------------------------------------------------------------
void Acc3_ReceiveTrackData(StructAcc3* acc3,      /** <  */
                                  uint8 *msg,     /** < 受信メッセージ */
                                  sint16 size,    /** < 受信メッセージのサイズ */
                                  MaskType mask   /** < トラックマスクの種類 */
                                  )
{
    sint16 candidateIndex = -1;

    // 取り付けられていないレーダからデータが来たら（ありえないが）無視
    if( acc3->valid == FALSE )
    {
		return;
	}

    // 最終出力バッファをクリア
    Acc3TargetInfo_Clear(&acc3->target);

    // RPCバッファにコピー
    Acc3_CopyToRpcBuffer(acc3, msg, size);
    
    // TargetInfoバッファにコピー（検知した物体の絶対座標を計算される）
    Acc3_CopyToTargetInfoBuffer(acc3);

    // 反射強度が基本閾値より低いものは無視する
    Acc3_CompareWithBasicThreshold(acc3,mask);
    
    // 検知角度が7.5°以上のものは無視する
    Acc3_CompareWithAngleThreshold(acc3);

    // SteerRadarのとき、検知距離が設定値以上のときは無視する
    if( acc3->position == posSteer ){
        Acc3_CompareWithRangeThreshold(acc3);
    }

    // クリッピングエリア内のものだけ抽出
    Acc3_PickUpTargetInClippingArea(acc3);

    // それぞれの候補についてマスクと比較し、閾値を設定する
    Acc3_CompareWithMask(acc3);
    
    // 最短のものを抽出
    candidateIndex = Acc3_PickUpClosestTarget(acc3);

    // 最終出力にコピー
    Acc3_CopyToOutputTarget(acc3, candidateIndex);

    //RBI→安全コンの通信確認カウンタ
    acc3->counter++;
}

//---------------------------------------------------------------------------
/**
 * 2007/05/16 : AHS Ver1.2 001.001.002 , Shibata
 * YawRateDataRPC受信処理(100msecごとに送信される。ACC3がなくても送信される)
 */
//---------------------------------------------------------------------------
void Acc3_ReceiveYawRateData(StructAcc3* acc3,    /** <  */
                             const uint8 *msg     /** < 受信メッセージ */
                             )
{
    //YawRateDataの更新
    acc3->yawRate = Tools_GetPtrToShortU((uint8*)&msg[0]);
    
    //Diagnosisの実行
    Acc3Diag_CheckYawRateDataComm(&acc3->diag);
}

//---------------------------------------------------------------------------
/**
 * TrackDataReqの送信
 */
//---------------------------------------------------------------------------
void Acc3_SendTrackDataReq(StructAcc3* acc3)
{
    uint8  prior;
    uint8  dest;

    // インストールされていなければ送信しない
    if( acc3->valid == FALSE )
    {
		return;
	}

    if( acc3->position == posRight )
    { 
        prior = PRIOR_RBI1; 
        dest  = RBI1;
    }
    else if( acc3->position == posCenter )
    {
        prior = PRIOR_RBI2;
        dest  = RBI2;
    }
    else if( acc3->position == posLeft ) 
    { 
        prior = PRIOR_RBI3; 
        dest  = RBI3;
    }
    else if( acc3->position == posSteer )
    {
        prior = PRIOR_RBI4;
        dest  = RBI4;
    }
    else 
    {
		return; 
	}

    RpcManager_SendMsgNoAck( CAN_B,
                        ACC3_TRACK_REQ,
                        dest,
                        prior,
                        1,
                        (uint8*)(&acc3->trackReq));

}

//---------------------------------------------------------------------------
/**
 * Radiateの開始・停止
 */
//---------------------------------------------------------------------------
void Acc3_RadiateStart(StructAcc3* acc3)
{
    acc3->trackReq.radiate = ON;
}
void Acc3_RadiateStop(StructAcc3* acc3)
{
    acc3->trackReq.radiate = OFF;
}
//---------------------------------------------------------------------------
/**
 * Scaningの開始・停止
 */
//---------------------------------------------------------------------------
void Acc3_ScanningStart(StructAcc3* acc3)
{
    acc3->trackReq.scanning = ON;
}
void Acc3_ScanningStop(StructAcc3* acc3)
{
    acc3->trackReq.scanning = OFF;
}
//---------------------------------------------------------------------------
/**
 * レーダのリセット(Radiate,Scaningを停止→開始をする)
 */
//---------------------------------------------------------------------------
void Acc3_Reset(StructAcc3* acc3)
{
    //レーダScanning Request中のときのみ受け付ける
    if(acc3->trackReq.scanning == ON){
        acc3->resetTimer = T_1SEC;
        acc3->resetReq = ON;
        
        Acc3_RadiateStop(acc3);
        Acc3_ScanningStop(acc3);
    }
}
//---------------------------------------------------------------------------
/**
 * Autoビットのセット
 */
//---------------------------------------------------------------------------
void Acc3_SetAutoBit(StructAcc3* acc3, unsigned int flag )
{
    acc3->trackReq.modeauto = flag;
}

//---------------------------------------------------------------------------
/**
 * Data Typeビットのセット
 */
//---------------------------------------------------------------------------
void Acc3_SetDataTypeBit(StructAcc3* acc3, unsigned int type )
{
    acc3->trackReq.datatype = type;
}
//---------------------------------------------------------------------------
/**
 * @param flag ON Short Range Mode / OFF Long Range Mode
 */
//---------------------------------------------------------------------------
void Acc3_SetShortRangeModeBit(StructAcc3* acc3, unsigned int flag )
{
    acc3->trackReq.shortmode = flag;
}
//---------------------------------------------------------------------------
/**
 * @param flag ON count15のみ要求  OFF countは気にしない
 */
//---------------------------------------------------------------------------
void Acc3_SetCountFifteenBit(StructAcc3* acc3, unsigned int flag )
{
    acc3->trackReq.countfifteen = flag;
}

//---------------------------------------------------------------------------
/**
 * 最終的に検出したターゲット情報の取得
 */
//---------------------------------------------------------------------------
StructAcc3TargetInfo Acc3_GetTargetInfo(const StructAcc3* acc3)
{
    return(acc3->target);
}

void Acc3_SetTargetScore(StructAcc3* acc3, sint16 score)
{
    acc3->target.score = score;
}

//---------------------------------------------------------------------------
/**
 * 故障診断コードの取得
 */
//---------------------------------------------------------------------------
Acc3ErrorCode Acc3_GetDiagnosisCode(const StructAcc3* acc3)
{
   return( acc3->diag.diagCode );
}

bool Acc3_IsReady(const StructAcc3* acc3)
{
    return( acc3->diag.accReady );
}

bool Acc3_IsInstalled(const StructAcc3* acc3)
{
    return( acc3->valid );
}
uint16 Acc3_GetAcc3YawRate(const StructAcc3* acc3)
{
    return( acc3->yawRate );
}

//---------------------------------------------------------------------------
/**
 * ACC3のシリアルNoの問い合わせをする
 */
//---------------------------------------------------------------------------
void Acc3_SendSerialNoReq(const StructAcc3* acc3)
{
    uint8  prior;
    uint8 dest;

    // インストールされていなければ送信しない
    if( acc3->valid == FALSE ) return;

    if( acc3->position == posRight )
    { 
        prior = PRIOR_RBI1; 
        dest  = RBI1;
    }
    else if( acc3->position == posCenter )
    {
        prior = PRIOR_RBI2;
        dest  = RBI2;
    }
    else if( acc3->position == posLeft ) 
    { 
        prior = PRIOR_RBI3; 
        dest  = RBI3;
    }
    else if( acc3->position == posSteer )
    {
        prior = PRIOR_RBI4;
        dest  = RBI4;
    }
    else 
    {
		return; 
	}
    
    RpcManager_SendMsgNoAck( CAN_B,
                        ACC3_SERIAL_NO_REQ,
                        dest,
                        prior,
                        0,
                        (uint8*)NULL);

}
//---------------------------------------------------------------------------
/**
 * ACC3のシリアルNoの受信
 */
//---------------------------------------------------------------------------
void Acc3_ReadSerialNo(StructAcc3* acc3, const uint8 *msg)
{
    uint8  *ptr;
    sint16 i;
    char   str[64];

    ptr = (uint8*)&acc3->serialNo;
    
    // SerialNoにコピー
    for( i=0; i<5; i++ )
    {
        ptr[i] = msg[i];
    }

    if( acc3->position == posRight ){ CanDebugPrintf("Radar(Right)"); }
    else if( acc3->position == posCenter ){ CanDebugPrintf("Radar(Center)"); }
    else if( acc3->position == posLeft ){ CanDebugPrintf("Radar(Left)"); }
    else if( acc3->position == posSteer ){ CanDebugPrintf("Radar(Steer)"); }
    else { ; }

    sprintf(str,"SN %02d-%03d-%04d", acc3->serialNo.fls_sn_year,
                                     acc3->serialNo.fls_sn_date,
                                     acc3->serialNo.fls_sn_sequence);
    CanDebugPrintf(str);

}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**
 * 車両の位置からレーダの絶対位置を計算する
 */
//---------------------------------------------------------------------------
static void Acc3_CalcRadarPosition(StructAcc3* acc3,   /** < */
                sint32  truckX,    /** < トラックのX座標 [mm]*/
                sint32  truckY,    /** < トラックのY座標 [mm]*/
                sint16  truckDir,  /** < トラックの方位角 [2pi/65536]*/
                float32 cosTruck,  /** < cos(トラックの方位角) */
                float32 sinTruck   /** < sin(トラックの方位角) */
                )
{
    float32 rx,ry,rx0,ry0;

    // 自動走行中はレーダの絶対座標を計算する
	if( ( ClippingArea_GetZoneType() == zoneAutoRun )
	 || ( ClippingArea_GetZoneType() == zoneTest2 )
	 || ( ClippingArea_GetZoneType() == zoneTest4 )
	 || ( ClippingArea_GetZoneType() == zoneTestRear2 )
	 || ( ClippingArea_GetZoneType() == zoneNone )
	 )
    {
        // 車両原点からのレーダの位置を計算
        rx0 = acc3->param.xpos;
        ry0 = acc3->param.ypos;
        
        // 車両の方位角分だけ回転
        rx = rx0*cosTruck - ry0*sinTruck;
        ry = rx0*sinTruck + ry0*cosTruck;

        // 車両の位置だけ平行移動
        acc3->radarXpos  = (sint32)rx + truckX;
        acc3->radarYpos  = (sint32)ry + truckY;

        // 基本レーダの向き（車両の方位角＋取り付けオフセット）
        acc3->radarTheta = truckDir + acc3->param.scanOffset; 

    }
    // 距離補正係数キャリブレーション時はレーダの向きはすべて正面向き
    else if( ClippingArea_GetZoneType() == zoneRangeCalibration )
    {
        acc3->radarXpos  = (sint32)acc3->param.xpos;
        acc3->radarYpos  = (sint32)acc3->param.ypos;
        acc3->radarTheta = 0;
    }
    // 点検中などは中央レーダの位置を原点（0,0)にする
    else
    {
        acc3->radarXpos  = (sint32)acc3->param.xpos;
        acc3->radarYpos  = (sint32)acc3->param.ypos;
        acc3->radarTheta = acc3->param.scanOffset;
    }
}


//---------------------------------------------------------------------------
/**
 * RPCバッファにコピーする
 */
//---------------------------------------------------------------------------
static bool Acc3_CopyToRpcBuffer(StructAcc3* acc3, const uint8 *msg, sint16 size)
{ 
    sint16 i;

    // RPCバッファにコピー
    acc3->trackMsg.scanIndex = Tools_GetPtrToShortU((uint8*)&msg[0]);
    acc3->trackMsg.errorBit1 = msg[2];
    acc3->trackMsg.errorBit2 = msg[3];
    acc3->trackMsg.errorBit3 = msg[4];
    acc3->trackMsg.errorBit4 = msg[5];
    acc3->trackMsg.errorBit5 = msg[6];
    acc3->trackMsg.alignment = msg[7];
    acc3->trackMsg.num = Tools_GetPtrToShortU((uint8*)&msg[8]);

    // 故障診断コードをDiagnosisオブジェクトにコピー
    Acc3Diag_SetDiagnosisBit( &acc3->diag,
                              acc3->trackMsg.errorBit1,
                              acc3->trackMsg.errorBit2,
                              acc3->trackMsg.errorBit3,
                              acc3->trackMsg.errorBit4, 
                              acc3->trackMsg.errorBit5, 
                              acc3->trackReq.radiate,
                              acc3->trackReq.scanning
                              );

    // ターゲット数が20以上だとおかしい
    if( acc3->trackMsg.num > MAX_TARGETS )
    {
		return(FALSE);
	}
    
    // 一旦バッファクリア
    for( i=0; i<MAX_TARGETS; i++ )
    {
        acc3->trackMsg.TrackData[i].range = 0;
        acc3->trackMsg.TrackData[i].power = 0;
        acc3->trackMsg.TrackData[i].angle = 0;
        acc3->trackMsg.TrackData[i].speed = 0;
    }
    
    // TrackDataをRPCバッファにコピー
    for( i=0; i<acc3->trackMsg.num; i++ )
    {
        acc3->trackMsg.TrackData[i].range = Tools_GetPtrToShortU((uint8*)&msg[10 + 6*i]);
        acc3->trackMsg.TrackData[i].angle = (sint8)msg[12 + 6*i];
        acc3->trackMsg.TrackData[i].speed = (sint8)msg[13 + 6*i];
        acc3->trackMsg.TrackData[i].power = Tools_GetPtrToShortU((uint8*)&msg[14 + 6*i]);
    }
    
    return(TRUE);
}

//---------------------------------------------------------------------------
/**
 * RPC受信バッファからTargetInfoバッファにコピーする
 */
//---------------------------------------------------------------------------
void Acc3_CopyToTargetInfoBuffer(StructAcc3* acc3)
{
    sint16 i;
    
    
    // セット 
    for( i=0; i<acc3->trackMsg.num; i++ )
    {
        Acc3TargetInfo_Set( &acc3->targetBin[i],
                            &acc3->param,
                            acc3->trackMsg.TrackData[i].range,
                            acc3->trackMsg.TrackData[i].power,
                            acc3->trackMsg.TrackData[i].angle,
                //            TruckInfo_GetSpeed(), // とりあえず車速を相対速度とする
                            (sint16)((float32)(acc3->trackMsg.TrackData[i].speed) * 1000.0 / 3.6 ),  // [mm/s]
                            acc3->radarXpos,
                            acc3->radarYpos,
                            acc3->radarTheta );

    }
    // 残りのTargetバッファはクリア
    for( i=acc3->trackMsg.num; i<MAX_TARGETS; i++ )
    {
        Acc3TargetInfo_Clear(&acc3->targetBin[i]);
    }
}

//---------------------------------------------------------------------------
/** 
 * 反射強度が基本閾値より高いものだけ抽出する
 * (反射強度が低いものにはInvalidフラグを立てる)
 * @param *acc3 
 * @param mask  
 */
//---------------------------------------------------------------------------
static void Acc3_CompareWithBasicThreshold(const StructAcc3* acc3, MaskType mask)
{
    sint16 i;
    sint16 powerThreshold;

    for( i=0; i<acc3->trackMsg.num; i++ )
    {
        // 閾値
        powerThreshold = Thresholding_GetThreshold(acc3->targetBin[i].range, mask);
        
        // 基本閾値よりも低いものは無視
        if( acc3->targetBin[i].power < powerThreshold )
        {
            Acc3TargetInfo_SetInvalid(&acc3->targetBin[i]);
        }
    }
}

//---------------------------------------------------------------------------
/** 
 * 検知Angleが-7.5°<= Angle <= 7.5°のもののみ抽出する
 * (検知角度が範囲外のものにはInvalidフラグを立てる)
 */
//---------------------------------------------------------------------------
static void Acc3_CompareWithAngleThreshold(const StructAcc3* acc3)
{
    sint16 i;

    for( i=0; i<acc3->trackMsg.num; i++ )
    {
        // 検知Angleが範囲外のものは、Invalidにする
        // 7.5°* 180.0 / 32768.0f = 1365
//        if( abs(acc3->targetBin[i].angle) >= 1365 )
        if( abs(acc3->targetBin[i].angle) >= angleThreshold )
        {
            Acc3TargetInfo_SetInvalid(&acc3->targetBin[i]);
        }
    }
}

//---------------------------------------------------------------------------
/** 
 * SteerRadarのとき、検知距離が閾値以上のときは無視する
 * (検知距離が閾値以上のときはInvalidフラグを立てる)
 */
//---------------------------------------------------------------------------
static void Acc3_CompareWithRangeThreshold(const StructAcc3* acc3)
{
    sint16 i;
    sint32 range;//[mm]
    
    range = (sint32)SfNvram_GetTargetRangeThreshold() * 1000;
    
    for( i=0; i<acc3->trackMsg.num; i++ )
    {
        // 検知距離が閾値以上のときはInvalidにする
        if( acc3->targetBin[i].range >= range)
        {
            Acc3TargetInfo_SetInvalid(&acc3->targetBin[i]);
        }
    }
}

//---------------------------------------------------------------------------
/** 
 * クリッピングエリア内のものだけ抽出する
 * (クリッピングエリア外のものにはInvalidフラグを立てる)
 */
//---------------------------------------------------------------------------
static void Acc3_PickUpTargetInClippingArea(const StructAcc3* acc3)
{
    sint16  i, ret;
    sint8   stat;

    for( i=0; i<acc3->trackMsg.num; i++ )
    {
        if( acc3->targetBin[i].validFlag == ON )
        {
            ret =  ClippingArea_ZoneContains( acc3->targetBin[i].xpos,
                                              acc3->targetBin[i].ypos,
                                              &acc3->targetBin[i].lateralPos,
                                              &stat);
            
            if( ret == ZONE_OUT )
            {
                Acc3TargetInfo_SetInvalid(&acc3->targetBin[i]);
            }
            else
            {
                // do nothing
            }
        }
    }
}

//---------------------------------------------------------------------------
/** 
 * マスクで定義された閾値より反射強度が高いものだけ抽出する
 * (反射強度が低いものにはInvalidフラグを立てる)
 */
//---------------------------------------------------------------------------
static void Acc3_CompareWithMask(const StructAcc3* acc3)
{
    sint16 i;
    sint16 powerThreshold;
    MaskType mask;

    // 自動走行中以外はマスクは無視
    if( ( ClippingArea_GetZoneType() != zoneAutoRun )
     && ( ClippingArea_GetZoneType() != zoneTest2   ) 
     && ( ClippingArea_GetZoneType() != zoneTest4   ) 
      )
    {
        return;
    }

    for( i=0; i<acc3->trackMsg.num; i++ )
    {
        if( acc3->targetBin[i].validFlag == ON )
        {
            // マスク
            mask = MaskContain_RadarMask(acc3->targetBin[i].xpos,
                                         acc3->targetBin[i].ypos);

            // 閾値の取得
            powerThreshold = Thresholding_GetThreshold(acc3->targetBin[i].range, mask);

            // 閾値よりも低いものは無視
            if( acc3->targetBin[i].power < powerThreshold )
            {
                Acc3TargetInfo_SetInvalid(&acc3->targetBin[i]);
            }
        }
    }
}

//---------------------------------------------------------------------------
/** 
 * 最短のものを見つける
 */
//---------------------------------------------------------------------------
static sint16 Acc3_PickUpClosestTarget(const StructAcc3* acc3)
{
    sint16 i,index;
    sint32 minRange;

    index = -1;
    minRange = 1000000;

    for( i=0; i<acc3->trackMsg.num; i++ )
    {
        if( acc3->targetBin[i].validFlag == ON )
        {
            if( minRange > acc3->targetBin[i].range )
            {
                minRange = acc3->targetBin[i].range;
                index = i;
            }
        }
    }
    return(index);
}

//---------------------------------------------------------------------------
/** 
 * 最終出力バッファにコピーする
 */
//---------------------------------------------------------------------------
static void Acc3_CopyToOutputTarget(StructAcc3* acc3, sint16 index)
{
    if( (0 <= index) && (index < MAX_TARGETS) )
    {
        acc3->target.range      = acc3->targetBin[index].range;
        acc3->target.power      = acc3->targetBin[index].power;
        acc3->target.direction  = acc3->targetBin[index].direction;
        acc3->target.angle      = acc3->targetBin[index].angle;
        acc3->target.speed      = acc3->targetBin[index].speed;
        acc3->target.xpos       = acc3->targetBin[index].xpos;
        acc3->target.ypos       = acc3->targetBin[index].ypos;
        acc3->target.validFlag  = acc3->targetBin[index].validFlag;
        acc3->target.lateralPos = acc3->targetBin[index].lateralPos;
        acc3->target.score      = acc3->targetBin[index].score;
    }
    else if( index == -1 )  // ターゲットなし
    {
        acc3->target.range      = 255000;  // 255m
        acc3->target.power      = 0;
        acc3->target.direction  = 0;
        acc3->target.angle      = 0;
        acc3->target.speed      = 0;
        acc3->target.xpos       = 0;
        acc3->target.ypos       = 0;
        acc3->target.validFlag  = OFF;
        acc3->target.lateralPos = 0;
        acc3->target.score      = 0;
    }
    else
    {
		;
	}
}

/* end of file */

