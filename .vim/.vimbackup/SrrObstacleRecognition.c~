/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2006 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: SrrObstacleRecognition.h,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: Safety Controller
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/


#include "ahscommon.h"
#include "AppMain.h"
#include "SrrObstacleRecognition.h"
#include "ClippingAreaManager.h"
#include "Horn.h"
#include "ModeManager.h"
#include "ErrorManager.h"
#include "SrrObstList.h"
#include "MacomManager.h"
#include "RpcManager.h"
#include "TruckInfo.h"
#include "OdsDisable.h"
#include "ObstReport.h"
#include "IbeoObstacleRecognition.h"
#include "ObstacleRecognition.h"
#include "SafetyZone.h"
#include "MaskContain.h"
#include "MacomThreshold.h"
#include "Acc3Manager.h"
#include "AhsTools.h"
#include "RpcService.h"
#include "AhsLocation.h"
#include "AppNvram.h"
#include "Headlight.h"
#include "SrrAngleCalibBasedAngle.h"
#include "SfInspection.h"
#include "AppIfdef.h"


#ifdef _MACOM_RECOG_PRINTF_
static uint8  macom_recog_str[128];
#endif



#define SRR_NUM_OBST_LIST  10
#define STOP_SCORE        100

/**
 * 
 */
typedef struct{
    StructSrrObstList  list[SRR_NUM_OBST_LIST];   /**< 障害物候補リスト     */
    sint16             powerThreshold;            /**< 反射強度閾値 [dB] */
    sint32             minRange;                  /**< [mm] */
    sint32             maxRange;                  /**< [mm] */
    bool               detectFlag;
    bool               disable;                   /**< テスト用（ODS無視）*/
    bool               suspend;                   /**< BlindRun用に一時的にレーダを殺す */
    sint16             chokeRangeThresh;
    sint16             chokeAngleRThresh;
    sint16             chokeAngleLThresh;
    sint16             chokePowerThresh;
} StructSRRObstRecog;


/**
 * インスタンス定義
 */
static StructSRRObstRecog  srrObst;


/**
 * プライベート関数定義
 */
static void   SrrObstRecog_ExtractCandidate(MacomPosition pos);
static bool   SrrObstRecog_SetObstacle(
       sint32 range,      /** < 距離 [mm] */
       sint16 speed,      /** < 相対速度 [mm/sec] */
       sint32 xpos,       /** < 検知ターゲットのX座標 [mm] */
       sint32 ypos,       /** < 検知ターゲットのY座標 [mm] */
       sint16 score,      /** < 検知ターゲットの得点 */
       MacomPosition pos  /** < 検知レーダの種類 */
       );
static void   SrrObstRecog_ClearAllObstacle(void);
static bool   SrrObstRecog_isListEmpty(sint16 index);
static sint16 SrrObstRecog_SearchList(sint32 range, uint32 time);
static sint16 SrrObstRecog_SearchListByPos(sint32 xpos, sint32 ypos, uint32 time);
static sint16 SrrObstRecog_GetAvailableList(void);
static void   SrrObstRecog_DetectObstacle(void);
static void   SrrObstRecog_ClearPassedList(void);
static void   SrrObstRecog_UpdateExpectedRange(void);
static sint16 SrrObstRecog_CalcScore(void);
static void   SrrObstRecog_SendListToMonitor(void);
static MaskType SrrObstRecog_CompareWithMask(sint32 xmm, sint32 ymm, MacomPosition pos);

//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void SrrObstRecog_Init(void)
{
	sint16 value;
	
    srrObst.powerThreshold =    15;    // [dB]
    srrObst.minRange       =  1000;    // [mm]
    srrObst.maxRange       = 25000;    // [mm]
    srrObst.detectFlag     =   OFF;    
    srrObst.disable        = FALSE;    
    srrObst.suspend        = FALSE;    
    
    value = AppNvram_GetChokeRangeThresh();
    if( (1000<value) && (value<10000) )
    {
		srrObst.chokeRangeThresh  = value;
	}
	else
	{
		srrObst.chokeRangeThresh = 4500;
	}

	value = AppNvram_GetChokeAngleRThresh();
	if( (-_DEG38<=value) && (value<=_DEG38) )
	{
		srrObst.chokeAngleRThresh = value;
	}
	else
	{
		srrObst.chokeAngleRThresh = Tools_deg2circular(-25.0f);
	}
	
	value = AppNvram_GetChokeAngleLThresh();
	if( (-_DEG38<=value) && (value<=_DEG38) )
	{
		srrObst.chokeAngleLThresh = value;
	}
	else
	{
		srrObst.chokeAngleLThresh = Tools_deg2circular(18.0f);
	}
	
	value = AppNvram_GetChokePowerThresh();
	if( (0<=value) && (value<=38) )
	{
		srrObst.chokePowerThresh = value;
	}
	else
	{
		srrObst.chokePowerThresh = 38;
	}

    SrrObstRecog_ClearAllObstacle();

    MacomThreshold_Init();
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void SrrObstRecog_PreMain(void)
{
    sint16 stat;
    ModeType mode;
    
    if( ( srrObst.disable == TRUE ) || (srrObst.suspend == TRUE ) )
    {
        return;  // MACOM機能無視
    }
    else
    {
        // do nothing
    }
    
    mode = Mode_GetCurrentMode();

    // ターゲットの抽出
    if( mode == modeAuto )
    {
        stat = TruckInfo_GetMovingStatus();
        
        if( stat == MOVE_FORWARD ) 
        {
            SrrObstRecog_ExtractCandidate(posSrrRight);
            SrrObstRecog_ExtractCandidate(posSrrCenter);
            SrrObstRecog_ExtractCandidate(posSrrLeft);
        }
        else if( stat == MOVE_BACKWARD )
        {
            SrrObstRecog_ExtractCandidate(posSrrRear);
        }
        else
        {
            //
        }
    }
    else if( ( mode == modeManual ) || ( mode == modeMaintenance ) )
    {
        if( MacomManager_GetDebugFlag() == TRUE )
        {
            SrrObstRecog_ExtractCandidate(posSrrRight);
            SrrObstRecog_ExtractCandidate(posSrrCenter);
            SrrObstRecog_ExtractCandidate(posSrrLeft);
            SrrObstRecog_ExtractCandidate(posSrrRear);
        }
        else
        {
            // do nothing
        }
    }
    else
    {
        ;
    }
}

//---------------------------------------------------------------------------
/**
 * メイン
 */
//---------------------------------------------------------------------------
void SrrObstRecog_Main(void)
{
    ModeType mode, modePrev;
    static bool prevDetectFlag = OFF;
    
    mode     = Mode_GetCurrentMode();
    modePrev = Mode_GetPreviousMode();

    if( srrObst.detectFlag == ON )
    {
        if( ( mode != modeAuto ) && ( modePrev == modeAuto ) )
        {
            srrObst.detectFlag = OFF;

            // 障害物リストをクリア
            SrrObstRecog_ClearAllObstacle();

            // BlindRUNを開始
            OdsDisable_SrrBlindRunStart();
        }
    }
    else
    {
        //
    }

    // Sモードになったら一旦障害物リストをクリア
    if( ( mode == modeStop ) && ( modePrev != modeStop ) )
    {
        SrrObstRecog_ClearAllObstacle();

        srrObst.detectFlag = OFF;
    }
    else
    {
        //
    }

    // 積込点から10mはBlindRunを実行する
    if( AhsLocation_IsRealLoadingSpotPoint( TruckInfo_GetCurrentIndex() ) == TRUE )
    {
        OdsDisable_SrrBlindRunStart();
    }

    // 通り過ぎたもの、遠くに去ったものは削除
    SrrObstRecog_ClearPassedList();

    // 得点閾値を超えたものがあったらエラーまたはワーニング
    SrrObstRecog_DetectObstacle();

    // リストに登録されている障害物の次の予想距離を計算
    SrrObstRecog_UpdateExpectedRange();

    // 障害物を検知したらホーンを鳴らす
    if( ( srrObst.detectFlag == ON ) 
     && ( prevDetectFlag == OFF )
     && ( ObstRecog_GetDetectFlag() == OFF ) 
     && ( IbeoObstRecog_GetDetectFlag() == OFF ) 
    )
    {
        Horn_Honk(hornWarning);
    }

    // テスト用モニパソに送信
    SrrObstRecog_SendListToMonitor();

    prevDetectFlag = srrObst.detectFlag;

}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void SrrObstRecog_PostMain(void)
{
    // 
}

//---------------------------------------------------------------------------
/**
 * SRR機能を殺す
 */
//---------------------------------------------------------------------------
void SrrObstRecog_Disable(void)
{
    srrObst.disable = TRUE;
}
//---------------------------------------------------------------------------
/**
 * SRR機能を使う
 */
//---------------------------------------------------------------------------
void SrrObstRecog_Enable(void)
{
    srrObst.disable = FALSE;
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void SrrObstRecog_Suspend(bool flag)
{
    srrObst.suspend = flag;
}

//---------------------------------------------------------------------------
/**
 * レーダが障害物を検知し、停止しようとしているかどうか
 */
//---------------------------------------------------------------------------
bool SrrObstRecog_GetDetectFlag(void)
{
    return(srrObst.detectFlag);
}
//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void SrrObstRecog_SetChokeRangeThresh(void)
{
	srrObst.chokeRangeThresh = AppNvram_GetChokeRangeThresh();
}
void SrrObstRecog_SetChokeAngleRThresh(void)
{
	srrObst.chokeAngleRThresh = AppNvram_GetChokeAngleRThresh();
}
void SrrObstRecog_SetChokeAngleLThresh(void)
{
	srrObst.chokeAngleLThresh = AppNvram_GetChokeAngleLThresh();
}
void SrrObstRecog_SetChokePowerThresh(void)
{
	srrObst.chokePowerThresh = AppNvram_GetChokePowerThresh();
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
static void SrrObstRecog_ExtractCandidate(MacomPosition pos)
{
    sint16 num, i;
    sint16 score, ret, minPower;
    sint32 latpos;
    sint8  type;
    bool   secureZone;
    StructUserMacomTarget target;
    MaskType targetMask;

    // レーダがインストールされていなければ何もしない
    if( MacomManager_IsRadarAvaliable(pos) == FALSE )
    {
        #ifdef _MACOM_RECOG_PRINTF_
            CanDebugPrintf("No srr");
        #endif
        return;
    }

    // MACOMから検知ターゲット数取得
    num = MacomManager_GetTargetNum(pos);

    #ifdef _MACOM_RECOG_PRINTF_
    if( ( pos == posSrrRear ) || ( pos == posSrrCenter ) )
    {
        if( num > 0 )
        {
            sprintf(macom_recog_str,"num=%d",num);
            CanDebugPrintf(macom_recog_str);
        }
    }
    #endif

    for( i=0; i<num; i++ )
    {
        // 検知ターゲットの取得
        target = MacomManager_GetTargetInfo(pos,i);

        // マスク判定
        targetMask = SrrObstRecog_CompareWithMask(target.xpos, target.ypos, pos);

        // 反射強度閾値の取得
        if( pos == posSrrRear )
        {
			if((SrrAngleCalibBasedAngle_GetCalibItem()==posSrrRear) || (Inspection_GetInspItem()==inspSrrRear))
			{
				minPower = 25;//キャリブかインスペクション中
			}
			else
			{
				minPower = MacomThreshold_GetRearThreshold(target.range, targetMask);
			}
		}
		else
		{
			minPower = MacomThreshold_GetThreshold(target.range, targetMask);
		}

        #ifdef _MACOM_RECOG_PRINTF_
            sprintf(macom_recog_str,"mask:%d p:%d r:%d",(int)mask,minPower,target.range);
            CanDebugPrintf(macom_recog_str);
        #endif

        if( minPower < srrObst.powerThreshold )
        {
            // デフォルト閾値のほうが高ければそちらを採用
            minPower = srrObst.powerThreshold;
        }
        else
        {
            // そのまま
        }

        // 反射強度
        if( target.power < minPower ) 
        {

            #ifdef _MACOM_RECOG_PRINTF_
            if( ( pos == posSrrRear ) || ( pos == posSrrCenter ) )
            {
                CanDebugPrintf("lowPower");
            }
            #endif
 
            continue;
        }
        else
        {
            //
        }

        // 検知距離による制限
        if( ( target.range < srrObst.minRange ) || ( srrObst.maxRange < target.range ) )
        {
            #ifdef _MACOM_RECOG_PRINTF_
            if( ( pos == posSrrRear ) || ( pos == posSrrCenter ) )
            {
                CanDebugPrintf("range error");
            }
            #endif
            continue;
        }
        else
        {
            //
        }

        // 虚像（あるいは自分自身を検知したもの）の防止策
/*
        if( pos == posSrrRear )
        {
            // 3m以下、左10度以上は虚像の可能性があるので無視
            if( ( target.range < 3000 ) && ( target.angle > _SRR_DEG10 ) )
            {
                #ifdef _MACOM_RECOG_PRINTF_
                CanDebugPrintf("Ghost");
                #endif

                continue;
            }
            else
            {
                // do nothing
            }
        }
*/
/*        else if( pos == posSrrLeft )
        {
            // 3m以下、左20度以上は自身を検知している可能性があるので無視
            if( ( target.range < 3000 ) && ( target.angle > _SRR_DEG20 ) )
            {
                continue;
            }
            else
            {
                // do nothing
            }
        }
        else if( pos == posSrrRight )
        {
            // 3m以下、右20度以上は自身を検知している可能性があるので無視
            if( ( target.range < 3000 ) && ( target.angle < -_SRR_DEG20 ) )
            {
                continue;
            }
            else
            {
                // do nothing
            }
        }
*/
        // Choke無視機能
/*
        if( SfNvram_GetLeftChokeExist() == TRUE )
        {
			if( target.range < 2500 )
			{
				continue;
			}
		}
*/
        if( pos == posSrrLeft )
        {
			if( SfNvram_GetLeftChokeExist()==TRUE )
			{
           		if( target.range <= 2500 )//2.5m以内のデータ無視
				{
					continue;
				}
				else
				{
					if( (target.range<=srrObst.chokeRangeThresh)
					 && ( (srrObst.chokeAngleLThresh<target.angle)||(target.angle<srrObst.chokeAngleRThresh) ) )
					{
						if( target.power <= srrObst.chokePowerThresh )//虚像対策
						{
							continue;
						}
					}
				}
			}
		}
        else if( pos == posSrrRight )
        {
			if( SfNvram_GetRightChokeExist()==TRUE )
			{
           		if( target.range < 2500 )
				{
					continue;
				}
				else
				{
					if( (target.range<=srrObst.chokeRangeThresh)
					 && ( (-srrObst.chokeAngleRThresh<target.angle)||(target.angle<-srrObst.chokeAngleLThresh) ) )
					{
						if( target.power <= srrObst.chokePowerThresh )//虚像対策
						{
							continue;
						}
					}
				}
			}
		}
        else
        {
            ;//
        }

        // クリッピング
        ret = ClippingArea_ZoneContains(target.xpos, target.ypos, &latpos, &type);

        if( ret != ZONE_OUT )
        {
            // RearSensorの場合、精度要停止点近くかどうか判定
            if( pos == posSrrRear )
            {
                secureZone = SafetyZone_IsInside(target.xpos, target.ypos);
            }
            else
            {
                secureZone = FALSE;
            }

            if( secureZone == FALSE )
            {
                // scoreの計算
                score = SrrObstRecog_CalcScore();

                // ObstacleListに登録
                SrrObstRecog_SetObstacle(target.range, 
                                         target.speed,
                                         target.xpos,
                                         target.ypos,
                                         score,
                                         pos
                                         );

                // レーダ出力にセット
                MacomManager_SetClippedObject( pos, 
                                               target.range, 
                                               target.angle, 
                                               target.power,
                                               target.xpos,
                                               target.ypos
                                               );
                // ヘッドライト点灯
				//U48ではヘッドライトとハイビーム両方点灯させる
                Headlight_Flash();
				Headlight_BeamFlash();

            }
            else
            {
                // discard
                #ifdef _MACOM_RECOG_PRINTF_
                if( (AdtMain_GetMainCounter() % T_500MSEC ) == 0 )
                {
                    CanDebugPrintf("secure zone");
                }
                #endif
            }
        }
        else
        {
            #ifdef _MACOM_RECOG_PRINTF_
            if( ( pos == posSrrRear ) || ( pos == posSrrCenter ) )
            {
            //    sprintf(macom_recog_str,"out %ld %ld,",target.xpos, target.ypos);
            //    CanDebugPrintf(macom_recog_str);
            }
            #endif
            // 
        }
    }
}

//---------------------------------------------------------------------------
/**
 * 検知障害物情報をリストに登録する
 * @retval TRUE
 * @retval FALSE
 */
//---------------------------------------------------------------------------
static bool SrrObstRecog_SetObstacle(
       sint32 range,      /** < 距離 [mm] */
       sint16 speed,      /** < 相対速度 [mm/sec] */
       sint32 xpos,       /** < 検知ターゲットのX座標 [mm] */
       sint32 ypos,       /** < 検知ターゲットのY座標 [mm] */
       sint16 score,      /** < 検知ターゲットの得点 */
       MacomPosition pos  /** < 検知レーダの種類 */
       )
{
    sint16 index;
    uint32 nowTime;
    sint16 truckSpeed;
    ModeType mode;

    // 現在時刻
    nowTime = AdtMain_GetMainCounter();

    // 登録されている障害物から同一と思われるものを探す
    // 見つからなければ空いているリストを探す
    // 自動走行中は距離だけで判定するが、点検中など、静止中はX,Y座標を使う
    
    truckSpeed = TruckInfo_GetSpeed();
    mode       = Mode_GetCurrentMode();
    
    if( ( truckSpeed == 0 ) && ( mode != modeAuto ) )
    {
        index = SrrObstRecog_SearchListByPos(xpos, ypos ,nowTime);
    }
    else
    {
        index = SrrObstRecog_SearchList(range,nowTime);
    }

    // バッファフル
    if(index == -1)
    {
        // 障害物リストバッファフル（エラーにする）
        Error_Set(E_TOO_MANY_OBSTACLE);

        return(FALSE);
    }
    else
    {
        // リストに登録（更新）
        SrrObstList_SetTargetInfo(&srrObst.list[index],  // ストアする障害物リストの場所
                                   range,                // 距離
                                   speed,                // 速度
                                   xpos,
                                   ypos,
                                   score,                // 得点
                                   pos);                 // 検知したレーダ種類

        #ifdef _MACOM_RECOG_PRINTF_
            if( ( pos == posSrrRear ) || ( pos == posSrrCenter ) )
            {
//                sprintf(macom_recog_str,"index:%d  r=%ld  x=%ld y=%ld  %d", index, range, xpos, ypos, pos);
//                CanDebugPrintf(macom_recog_str);

//                sprintf(macom_recog_str,"v=%d po=%d",speed, pos);
//                CanDebugPrintf(macom_recog_str);

//                sprintf(macom_recog_str,"sc=%d er=%d ", srrObst.list[index].score,
//                                                        srrObst.list[index].expectRange);
//                CanDebugPrintf(macom_recog_str);
            }

        #endif

        return(TRUE);
    }
}
//---------------------------------------------------------------------------
/**
 * 障害物リストのクリア
 */
//---------------------------------------------------------------------------
static void SrrObstRecog_ClearAllObstacle(void)
{
    sint16 i;

    for( i=0; i<SRR_NUM_OBST_LIST; i++ )
    {
        SrrObstList_Clear(&srrObst.list[i]);
    }
}

//---------------------------------------------------------------------------
/**
 * 障害物リストが空かどうか
 * @retval TRUE  空
 * @retval FALSE 使用中
 */
//---------------------------------------------------------------------------
static bool SrrObstRecog_isListEmpty(sint16 index)
{
    if( srrObst.list[index].radar == posSrrNone )
    {
        return(TRUE);
    }
    else
    {
        return(FALSE);
    }
}

//---------------------------------------------------------------------------
/**
 * 登録されている障害物から同一と思われるものを探す
 * 見つからなければ空いているリストを探す
 * @param range 障害物の距離 [mm]
 * @param time [50msec:システムタイム]
 * @return リストのインデックス
 */
//---------------------------------------------------------------------------
static sint16 SrrObstRecog_SearchList(sint32 range, uint32 time)
{
    sint16 i;
    sint32 diffRange, diffRangeLimit;
    uint32 diffTime;
    
    for( i=0; i<SRR_NUM_OBST_LIST; i++ )
    {
        // 登録されている障害物と距離の差を計算する
        diffRange = labs((sint32)(srrObst.list[i].expectRange - range));
        
        diffRangeLimit = 2500;  // 2.5m以内のものは同一と判定
        
        if( diffRange <= diffRangeLimit )
        {
            return(i);
        }
        else
        {
            //
        }
        
        // 検出時刻を考慮するか
    }
    
    // 該当するものがなければ新しい障害物
    return( SrrObstRecog_GetAvailableList() );
}


//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
static sint16 SrrObstRecog_SearchListByPos(sint32 xpos, sint32 ypos, uint32 time)
{
    sint16 i;
    sint32 dx, dy, deltaLimit;
    uint32 diffTime;
    
    for( i=0; i<SRR_NUM_OBST_LIST; i++ )
    {
        // 登録されている障害物と距離の差を計算する
        dx = labs((sint32)(srrObst.list[i].xpos - xpos));
        dy = labs((sint32)(srrObst.list[i].ypos - ypos));

        deltaLimit = 2500;  // 2.5m以内のものは同一と判定
        
        if( ( dx <= deltaLimit ) && ( dy <= deltaLimit ) )
        {
            return(i);
        }
        else
        {
            //
        }
        
    }
    
    // 該当するものがなければ新しい障害物
    return( SrrObstRecog_GetAvailableList() );
}

//---------------------------------------------------------------------------
/**
 * 障害物リストの空きを探す
 * @retval 0-20 リストのインデックス
 * @retval -1 リストに空きがない
 */
//---------------------------------------------------------------------------
static sint16 SrrObstRecog_GetAvailableList(void)
{
    sint16 i;
    
    // 空いているバッファを探す
    for( i=0; i<SRR_NUM_OBST_LIST; i++ )
    {
        if( SrrObstRecog_isListEmpty(i)==TRUE )
        {
            return(i);
        }
        else
        {
            //
        }
    }
    
    // バッファフル
    return(-1);
}
//---------------------------------------------------------------------------
/**
 * 得点閾値を超えたものがあったらエラーまたはワーニング
 * 1点   : ワーニング（減速しない）
 * 50点  : ワーニング（10km/hに減速）
 * 100点 : エラー（停止）
 */
//---------------------------------------------------------------------------
static void SrrObstRecog_DetectObstacle(void)
{
    sint16 i,index;
    sint16 maxScore = 0;
    MacomPosition detectRadar = posSrrRight;

    // テスト用、障害物を検出しても、エラーにさせない
    if( ( srrObst.disable == TRUE ) || ( srrObst.suspend == TRUE ) )
    {
        return;
    }
    else
    {
        //
    }

    index = -1;
    for( i=0; i<SRR_NUM_OBST_LIST; i++ )
    {
        if( SrrObstRecog_isListEmpty(i)==FALSE ) 
        {
            // 最も得点の高いものを探す
            if( srrObst.list[i].score > maxScore ) 
            {
                maxScore    = srrObst.list[i].score;
                detectRadar = srrObst.list[i].radar;
                index = i;
            }
        }
    }

    if( index == -1 )
    {
        // 障害物なし、もしワーニングが立っていればクリアする
        
    }
    else
    {
        if( maxScore >= STOP_SCORE )  // 停止 (100点）
        {
            srrObst.detectFlag = ON;      // 

            // セントラルに報告する障害物情報をセットする
            ObstReport_SetMacomObstacleInfo( srrObst.list[index].radar,
                                             srrObst.list[index].xpos,
                                             srrObst.list[index].ypos,
                                             (uint8)(srrObst.list[index].range/1000)
                                           );

            ObstReport_MacomUpdateInhibit();     // セントラルへ送信する障害物情報の更新を禁止する

            // Front Radarは区別しない
            if( ( detectRadar == posSrrRight )
             || ( detectRadar == posSrrCenter )
             || ( detectRadar == posSrrLeft )
             )
            {
                Error_Set(E_SRR_DETECTED1);
            }
            else if( detectRadar == posSrrRear )
            {
                Error_Set(E_SRR_DETECTED4);
            }
            else
            {
                Error_Set(E_SRR_DETECTED1);
            }
        }
        else
        {
            //
        }
    }
    
}

//---------------------------------------------------------------------------
/**
 * 通り過ぎたものは削除（ワーニングも解除）
 */
//---------------------------------------------------------------------------
static void SrrObstRecog_ClearPassedList(void)
{
    sint16 i;
    uint32 nowTime;
    sint32 dt;

    // 現在時刻
    nowTime = AdtMain_GetMainCounter();

    for( i=0; i<SRR_NUM_OBST_LIST; i++ )
    {
        if( SrrObstRecog_isListEmpty(i) == FALSE ) 
        {
            // 通り過ぎたら削除
            if( srrObst.list[i].expectRange <= 0 )
            {
                SrrObstList_Clear(&srrObst.list[i]);
            }
            // 30mより遠くに言ったら削除
            else if(srrObst.list[i].expectRange > 30000 )
            {
                SrrObstList_Clear(&srrObst.list[i]);
            }
            else
            {
                // do nothing
            }
            
            // 最後の検知から10秒以上経過していたら削除
            dt = (sint32)(nowTime - srrObst.list[i].time);
            if( dt > T_10SEC )
            {
                SrrObstList_Clear(&srrObst.list[i]);
            }
            else
            {
                // do nothing
            }
        }
        else
        {
            // do nothing
        }
    }
}

//---------------------------------------------------------------------------
/**
 * リストに登録されている障害物の次の予想距離を計算
 */
//---------------------------------------------------------------------------
static void SrrObstRecog_UpdateExpectedRange(void)
{
    sint16 i;

    for( i=0; i<SRR_NUM_OBST_LIST; i++ )
    {
        if( SrrObstRecog_isListEmpty(i) == FALSE ) 
        {
            SrrObstList_CalcExpectedRange(&srrObst.list[i]);
        }
        else
        {
            //
        }
    }
}

//---------------------------------------------------------------------------
/**
 * MACOM検知の得点計算
 */
//---------------------------------------------------------------------------
static sint16 SrrObstRecog_CalcScore(void)
{
    sint16 ret;
    
    if( Mode_GetCurrentMode() == modeAuto )
    {
        ret = 10;
    }
    else
    {
        ret = 0;
    }

    return(ret);
}
//---------------------------------------------------------------------------
/**
 * 
 */
//---------------------------------------------------------------------------
static void SrrObstRecog_SendListToMonitor(void)
{
    sint16 i, num, size;
    uint8 buf[256], *ptr;
    uint16 range, eRange;
    sint16 speed;
    uint8  score;
    sint32 xpos, ypos;
    static sint16 prevNum = 0;
    
    num = 0;
    ptr = &buf[0];

    for( i=0; i<SRR_NUM_OBST_LIST; i++ )
    {
        if( SrrObstRecog_isListEmpty(i) == FALSE )
        {
            range  = (uint16)srrObst.list[i].range;
            eRange = (uint16)srrObst.list[i].expectRange;
            score  = (uint8)srrObst.list[i].score;
            speed  = srrObst.list[i].speed;
            xpos   = srrObst.list[i].xpos;
            ypos   = srrObst.list[i].ypos;

            memcpy((void*)ptr, (void*)&range,  2); ptr += 2;
            memcpy((void*)ptr, (void*)&eRange, 2); ptr += 2;
            memcpy((void*)ptr, (void*)&xpos,   4); ptr += 4;
            memcpy((void*)ptr, (void*)&ypos,   4); ptr += 4;
            memcpy((void*)ptr, (void*)&speed,  2); ptr += 2;
            memcpy((void*)ptr, (void*)&score,  1); ptr += 1;

            num++;
        }
    }

    size = 15 * num;

    // ターゲットがあるか、ターゲット数に変化があれば送信
    if( ( num != 0 ) || ( num != prevNum) )
    {
        // 送信
        RpcManager_SendMsgNoAck( CAN_B,
                                 MACOM_DEBUG_MSG,
                                 RpcService_GetPcAddress(),
                                 PRIOR_PC,
                                 size,   // 10byte
                                 buf
                                 );
    }
    else
    {
        //
    }
    
    prevNum = num;

}

//---------------------------------------------------------------------------
/**
 * 検知ターゲットがマスク内に入っているかどうか
 */
//---------------------------------------------------------------------------
static MaskType SrrObstRecog_CompareWithMask(sint32 xmm, sint32 ymm, MacomPosition pos)
{
    MaskType mask;

#ifdef _MACOM_RECOG_DEBUG_
    if((Mode_GetCurrentMode()==modeAuto)||(Mode_GetCurrentMode()==modeManual))
#else
    if( Mode_GetCurrentMode() == modeAuto )
#endif
    {
        if( ( pos == posSrrRight )
         || ( pos == posSrrCenter )
         || ( pos == posSrrLeft )
         )
        {
            mask = MaskContain_SrrFrontMask(xmm,ymm);
        }
        else if( pos == posSrrRear )
        {
            mask = MaskContain_SrrRearMask(xmm,ymm);
        }
        else
        {
            mask = maskRegular;
        }
    }
    else
    {
        mask = maskRegular;
    }

    return(mask);
}


