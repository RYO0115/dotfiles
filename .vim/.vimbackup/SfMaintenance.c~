/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2006 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: SfMaintenance.h,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: Safety Controller
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/

#include "ahscommon.h"
#include "SfMaintenance.h"
#include "ModeManager.h"
#include "CanIDManager.h"
#include "RpcManager.h"

#include "NvramMaint.h"
#include "AccRangeMaint.h"
#include "AccAngleMaint.h"
#include "AccSensMaint.h"
//#include "LuxAngleMaint.h"
#include "SrrAngleMaint.h"
#include "AppIfdef.h"



/*  RPC NAME:   MNT_ACK */
typedef struct{
    sint8    item;
    sint8    command;
    sint8    result;
} StructMntAck;

/**
 * メンテナンスクラスの属性定義
 */
typedef struct{
    MntItem  item;
    uint8    source;
} StructMaintenance;

/** 
 * オブジェクト定義
 */
static StructMaintenance safeMnt;

/**
 * プライベート関数
 */
static sint8 Maintenance_Enter(void);
static sint8 Maintenance_Exit(void);
static void  Maintenance_SendMntAck( MntItem item, MntCommand command, sint8 result);

//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void Maintenance_Init(void)
{
	safeMnt.item   = mntItemNone;
	safeMnt.source = CanIDManager_GetSupervisorCanID();        // デフォルトSUPERVISOR
}

//---------------------------------------------------------------------------
/**
 * メインルーチン
 */
//---------------------------------------------------------------------------
void Maintenance_Main(void)
{
	// メンテナンスモードでなければ何もしない
	if( Mode_GetCurrentMode() != modeMaintenance )
	{
		Maintenance_ChangeItem(mntItemNone);
	}
	else
	{
		switch(safeMnt.item)
		{
			case mntItemNone:
				break;

			case mntItemNvram:
				// NVRAMの値を送信
				NvramMaint_SendRpc();
				Maintenance_ChangeItem(mntItemNone);
				break;

			case mntItemMotor:
				break;

			case mntItemRange:
				// 距離補正係数の計算
				AccRangeMaint_Main();
				break;

			case mntItemCalibR:
			case mntItemCalibC:
			case mntItemCalibL:
				// レーダ原点角度
				AccAngleMaint_Main(safeMnt.item);
				break;

			case mntItemCalibLuxR:
			case mntItemCalibLuxL:
				// MMR1Cレーダの角度調整
				//LuxAngleMaint_Main(safeMnt.item);
				break;

			case mntItemCalibSrrR:
			case mntItemCalibSrrC:
			case mntItemCalibSrrL:
			case mntItemCalibSrrB:
				SrrAngleMaint_Main(safeMnt.item);
				// SRRレーダの角度調整
				break;

			default:
				break;
        }
    }
}
//---------------------------------------------------------------------------
/**
 * メンテナンスコマンド受信処理(CAN-A)
 * @param rpc 
 */
//---------------------------------------------------------------------------
void Maintenance_ReceiveCommand_CanA(const rpc_T* rpc)
{
    Maintenance_ReceiveCommand(rpc, CAN_A);
}

//---------------------------------------------------------------------------
/**
 * メンテナンスコマンド受信処理(CAN-B)
 * @param rpc 
 */
//---------------------------------------------------------------------------
void Maintenance_ReceiveCommand_CanB(const rpc_T* rpc)
{
    Maintenance_ReceiveCommand(rpc, CAN_B);
}

//---------------------------------------------------------------------------
/**
 * メンテナンスコマンド受信処理
 * @param rpc
 * @param canBus
 */
//---------------------------------------------------------------------------
void Maintenance_ReceiveCommand(const rpc_T* rpc, uint8 canBus)
{
    MntItem    item;
    MntCommand command;
    sint8      result;
    sint8      value;

    // サイズチェック（最低２バイト）
    if( rpc->arglen < 2 ) //arglenはuint32
    {
        return;
	}

    item    = (MntItem)rpc->args[0];
    command = (MntCommand)rpc->args[1];

    // 送信元のアドレス(srcとdstが入れ替わる）
    safeMnt.source  = rpc->dst; 

    // 返値はFAILで初期化
    result = FAIL;

    switch(item)
    {
        case mntItemNone:

            // メンテナンスモードに移行
            if( command == mntCmdEnter )
            {
				result = Maintenance_Enter();
            }
            // メンテナンスモード終了
            else if( command==mntCmdExit )
            {
				result = Maintenance_Exit();
            }
            else
            {
				//nothing result初期値はFAIL
			}
            break;

        case mntItemNvram:

            // NVRAM情報の送信
            if( command == mntCmdGet )
            {
                result = SUCCESS;
                Maintenance_ChangeItem(mntItemNvram);
            }
            break;

        case mntItemMotor:

            break;

        case mntItemRange:

            // レーダ距離キャリブレーション
            if( command == mntCmdStart )
            {
                result = AccRangeMaint_Start();
            }
			else if( command == mntCmdCancel )
			{
				result = AccRangeMaint_Cancel();
			}
			else
			{
				//nothing result初期値はFAIL
			}
			break;

		case mntItemRangeR:
		case mntItemRangeC:
		case mntItemRangeL:
/*        	if( command == mntCmdStart )
			{
				result = EsrRangeMaint_Start(item);
			}
			else if( command == mntCmdCancel )
			{
				result = EsrRangeMaint_Cancel(item);
			}
			else
			{
				//do nothing;
			}*///resultの初期値はFAIL
			break;

		case mntItemCalibR:
		case mntItemCalibC:
		case mntItemCalibL:

			// レーダ原点角度補正
			if( command == mntCmdStart )
			{
				result = AccAngleMaint_Start(item);
			}
			else if( command == mntCmdCancel )
			{
				result = AccAngleMaint_Cancel(item);
			}
			else
			{
				//nothing resultの初期値はFAIL
			}
			break;

		case mntItemSensR:
		case mntItemSensC:
		case mntItemSensL:
		case mntItemSensS:
			// 感度補正
			if( command == mntCmdSave )
			{
				value   = rpc->args[2];
				result = AccSensitivityMaint_Change(item,value);
			}
			break;

		case mntItemCalibLuxR:
		case mntItemCalibLuxL:

			// レーダ原点角度補正
			/*
			if( command == mntCmdStart )
			{
				result = LuxAngleMaint_Start(item);
			}
			else if( command == mntCmdCancel )
			{
				result = LuxAngleMaint_Cancel(item);
			}
			else
			{
				//nothing result初期値はFAIL
			}
			*/
			break;

		case mntItemCalibSrrR:
		case mntItemCalibSrrC:
		case mntItemCalibSrrL:
		case mntItemCalibSrrB:
			// レーダ原点角度補正

			if( command == mntCmdStart )
			{
				result = SrrAngleMaint_Start(item);
			}
			else if( command == mntCmdCancel )
			{
				result = SrrAngleMaint_Cancel(item);
			}
			else
			{
				//nothing result初期値はFAIL
			}

            break;

        case mntItemClearSens:
            // デフォルト値に戻す
            result = AccSensitivityMaint_Reset();
            break;

        case mntItemClearCalib:
            // デフォルト値に戻す
            result = AccAngleMaint_Reset();
            break;

        case mntItemClearRange:
            // デフォルト値に戻す
            result = AccRangeMaint_Reset();
            break;

        case mntItemClearMotor:
            // デフォルト値に戻す
            break;
            
        case mntItemClearLuxCalib:
            // デフォルト値に戻す
			//result = LuxAngleMaint_Reset();
            break;

        case mntItemClearSrrCalib:
            // デフォルト値に戻す
            result = SrrAngleMaint_Reset();
            break;

        default:
            break;
    }

    // ackの送信
    Maintenance_SendMntAck(item,command,result);
}

//---------------------------------------------------------------------------
/**
 * Manitenance Resultの送信
 */
//---------------------------------------------------------------------------
void Maintenance_SendMntResult( MntItem item, 
                                sint8 result
                               )
{
    uint8  prior, dest;
    StructMntResult res;

    // メッセージセット
    res.item    = (sint8)item;
    res.result  = result;

    // 送信先アドレスのセット
    if( safeMnt.source == CanIDManager_GetSupervisorCanID() ) { prior = CanIDManager_GetSupervisorPriority(); }
    else if( safeMnt.source==MBI_A )                          { prior = PRIOR_MBI; }
	else if( safeMnt.source==PCTOOL )                         { prior = PRIOR_PC; }
	else if( safeMnt.source==FLIGHT_RECORDER)                 { prior = PRIOR_FR; }
    else { prior = PRIOR5; }

    dest = safeMnt.source;

    // 送信
//  RpcManager_SendMsg( CAN_A,
    RpcManager_SendMsg( Maintenance_GetCANPort(dest),
                        MNT_RESULT,
                        dest,
                        prior,
                        sizeof(StructMntResult),
                        (uint8*)&res);
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void Maintenance_ChangeItem(MntItem item)
{
#ifdef _DEBUG_SF_MAINTENANCE_
    char str[128];
#endif

#ifdef _DEBUG_SF_MAINTENANCE_
    if( safeMnt.item != item )
    {
        sprintf(str,"mnt: %d",safeMnt.item);
        CanDebugPrintf(str);
    }
#endif

    safeMnt.item = item;

}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
uint8 Maintenance_GetSource(void)
{
    return(safeMnt.source);
}
//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
uint8 Maintenance_GetCANPort(uint8 dest)
{
    if( (dest == PCTOOL) || (dest == PCTOOL2) || (dest == FLIGHT_RECORDER) )
    {
        return(CAN_B);
    }
    else
    {
        return(CAN_A);
    }
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**
 * Manitenance Ackの送信
 */
//---------------------------------------------------------------------------
static void Maintenance_SendMntAck( MntItem item, 
                             MntCommand command, 
                             sint8 result
                             )
{
    uint8  prior, dest;
    StructMntAck ack;

    // メッセージセット
    ack.item    = (sint8)item;
    ack.command = (sint8)command;
    ack.result  = result;

    // 送信先アドレスのセット
    // 送信先アドレスのセット
    if( safeMnt.source == CanIDManager_GetSupervisorCanID() ) { prior = CanIDManager_GetSupervisorPriority(); }
    else if( safeMnt.source==MBI_A ) { prior = PRIOR_MBI; }
	else if( safeMnt.source==PCTOOL )         { prior = PRIOR_PC; }
	else if( safeMnt.source==FLIGHT_RECORDER) { prior = PRIOR_FR; }
    else { prior = PRIOR5; }

    dest = safeMnt.source;

    // 送信
//  RpcManager_SendMsg( CAN_A,
    RpcManager_SendMsg( Maintenance_GetCANPort(dest),
                        MNT_ACK,
                        dest,
                        prior,
                        sizeof(StructMntAck),
                        (uint8*)&ack);
}

//---------------------------------------------------------------------------
/**
 * メンテナンスモードに移行
 */
//---------------------------------------------------------------------------
static sint8 Maintenance_Enter(void)
{
    sint8 result;
    
    if( Mode_EnterMaintenance()==TRUE )
    {
        // メンテナンス開始時にモータを正面に向ける
        

        // 初期化
        Maintenance_ChangeItem(mntItemNone);
        result = SUCCESS;
    }
    else 
    {
    // メンテナンスモードになれない
        result = FAIL;
    }
    return(result);
}
//---------------------------------------------------------------------------
/**
 * メンテナンスモード終了
 */
//---------------------------------------------------------------------------
static sint8 Maintenance_Exit(void)
{
    sint8 result;

    if( Mode_ExitMaintenance()==TRUE )
    {
        Maintenance_ChangeItem(mntItemNone);
        result = SUCCESS;
    }
    else 
    {
        result = FAIL;
    }
    return(result);
}

