/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2009 Komatsu Ltd. All rights reserved.
 * 
 *    $RCSfile: MacomManager.h,v $
 *    $Revision: 1.1.1.1 $
 *    $Author: tojima $
 *    $Date: 2009/09/15 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: Communication module with SRBI
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/

//#include <math.h>
#include "ahscommon.h"
#include "AhsTools.h"
#include "MacomManager.h"
#include "AppMain.h"
#include "ModeManager.h"
#include "RpcManager.h"
#include "TruckInfo.h"
#include "ErrorManager.h"
#include "TruckConfigTable.h"
#include "SendSensorMode.h"
#include "ClippingAreaManager.h"
#include "LuxPower.h"
#include "SrrAngleCalib.h"
#include "AppNvram.h"
#include "WarningManager.h"
#include "Engine.h"
#include "SrrAngleCalibBasedAngle.h"

/**
 * クラス定義
 */
typedef struct{
    StructMacom  right;      /**< 右レーダオブジェクト */
    StructMacom  center;     /**< 中レーダオブジェクト */
    StructMacom  left;       /**< 左レーダオブジェクト */
    StructMacom  rear;       /**< 後方レーダオブジェクト */

    uint8  operationMode;    /**< */
    bool   debugFlag;        /**< テスト用計測許可フラグ */
    
    sint16 recTimer;         /**< */
    bool   ready;            /**< SRBIが起動したかどうか */
    bool   valid;            /**< SRBIを使うかどうか */
    bool   testClipping;     /**< 静的テスト用 */
    bool   diagReady;
	uint16 counter;
} StructMacomManager;


/**
 * インスタンス定義
 */
static StructMacomManager macom;


/**
 * 関数プロトタイプ宣言
 */
static void MacomManager_Diagnosis(void);
static void MacomManager_CheckOdsPower(void);
static StructMacom* MacomManager_GetRadarObject(MacomPosition pos);


//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void MacomManager_Init(void)
{
	sint16 dxFR,dxFC,dxFL,dxRC;                // 後輪軸からの距離 [mm]
	sint16 dyFR,dyFC,dyFL,dyRC;                // 中央からのオフセット (右：−  左：＋)[mm]
	sint16 dyawFR,dyawFC,dyawFL,dyawRC;        // レーダヨー角 (右：−  左：＋)[2pi/65536]
	bool   existFR,existFC,existFL,existRC;

	// レーダ取り付け位置の読み込み
	dxFR   = AHT_GetMacomFR_DistanceFromRearCenter();
	dyFR   = AHT_GetMacomFR_SideOffset();
	dyawFR = AHT_GetMacomFR_AngleOffset();

	dxFC   = AHT_GetMacomFC_DistanceFromRearCenter();
	dyFC   = AHT_GetMacomFC_SideOffset();
	dyawFC = AHT_GetMacomFC_AngleOffset();

	dxFL   = AHT_GetMacomFL_DistanceFromRearCenter();
	dyFL   = AHT_GetMacomFL_SideOffset();
	dyawFL = AHT_GetMacomFL_AngleOffset();

	dxRC   = AHT_GetMacomRC_DistanceFromRearCenter();
	dyRC   = AHT_GetMacomRC_SideOffset();
	dyawRC = AHT_GetMacomRC_AngleOffset();

	// レーダがインストールされているかどうか
	//existFR = SfNvram_GetSrrInstalled(posSrrRight);
	//existFC = SfNvram_GetSrrInstalled(posSrrCenter);
	//existFL = SfNvram_GetSrrInstalled(posSrrLeft);
	//existRC = SfNvram_GetSrrInstalled(posSrrRear);
	existFR = FALSE;
	existFC = FALSE;
	existFL = FALSE;
	existRC = FALSE;

	MacomRadar_Init(&macom.right,
					 posSrrRight,
					 existFR,
					 dxFR,
					 dyFR,
					 dyawFR + SfNvram_GetSrrOffset(posSrrRight)
					 );

	MacomRadar_Init(&macom.center,
					 posSrrCenter,
					 existFC,
					 dxFC,
					 dyFC,
					 dyawFC + SfNvram_GetSrrOffset(posSrrCenter)
					 );

	MacomRadar_Init(&macom.left,
					 posSrrLeft,
					 existFL,
					 dxFL,
					 dyFL,
					 dyawFL + SfNvram_GetSrrOffset(posSrrLeft)
					 );

	MacomRadar_Init(&macom.rear,
					 posSrrRear,
					 existRC,
					 dxRC,
					 dyRC,
					 dyawRC + SfNvram_GetSrrOffset(posSrrRear)
					 );

	macom.operationMode = BLANK_MODE;
	macom.debugFlag     = FALSE;
//    macom.debugFlag     = TRUE;
	macom.recTimer      = 0;
	macom.ready         = FALSE;
	macom.diagReady     = FALSE;
	macom.counter        = 0;

	// SRRが一つも存在しなければ、SRRの処理は実行しない
	if( (existFR == 0) && (existFC == 0) && (existFL == 0) && (existRC == 0) )
	{
		macom.valid = FALSE;
	}
	else
	{
		macom.valid = TRUE;
	}

	// キャリブレーション
//    SrrAngleCalib_Init();
	SrrAngleCalibBasedAngle_Init();
}

//---------------------------------------------------------------------------
/**
 * メイン
 */
//---------------------------------------------------------------------------
void MacomManager_PreMain(void)
{
	float32  cs,sn;
	sint16   heading;
	sint32   x,y;

	if( macom.valid == TRUE )
	{
		x       = TruckInfo_GetX();
		y       = TruckInfo_GetY();
		heading = TruckInfo_GetHeading();
		sn      = (float32)sinf(Tools_circular2rad(heading));
		cs      = (float32)cosf(Tools_circular2rad(heading));

		MacomRadar_PreMain(&macom.right,  x, y, heading, cs, sn);
		MacomRadar_PreMain(&macom.center, x, y, heading, cs, sn);
		MacomRadar_PreMain(&macom.left,   x, y, heading, cs, sn);
		MacomRadar_PreMain(&macom.rear,   x, y, heading, cs, sn);
	}
}

void MacomManager_Main(void)
{
	if( macom.valid == TRUE )
    {
        MacomRadar_Main(&macom.right);
        MacomRadar_Main(&macom.center);
        MacomRadar_Main(&macom.left);
        MacomRadar_Main(&macom.rear);
        
        // SRBIへ送信
        SendSensorMode_SendMsg();

        // 電源チェック
        MacomManager_CheckOdsPower();

        // 故障診断
        MacomManager_Diagnosis();
        
        // キャリブレーション
//        SrrAngleCalib_Main();
        SrrAngleCalibBasedAngle_Main();
    }
}

void MacomManager_PostMain(void)
{
    if( macom.valid == TRUE )
    {
        MacomRadar_PostMain(&macom.right);
        MacomRadar_PostMain(&macom.center);
        MacomRadar_PostMain(&macom.left);
        MacomRadar_PostMain(&macom.rear);
    }
}
//---------------------------------------------------------------------------
/**
 * TrackDataMsgの受信
 */
//---------------------------------------------------------------------------
void MacomManager_ReceiveTrackDataMsg(const rpc_T* rpc)
{
    uint8 ch;

    if( macom.valid == TRUE )
    {
        ch = (rpc->args[1] & 0x0f);

        switch(ch)
        {
            case 1:
                MacomRadar_SetTracks(&macom.right, (uint8*)&rpc->args[0]);
                break;

            case 2:
                MacomRadar_SetTracks(&macom.center, (uint8*)&rpc->args[0]);
                break;

            case 3:
                MacomRadar_SetTracks(&macom.left, (uint8*)&rpc->args[0]);
                break;
            
            case 4:
                MacomRadar_SetTracks(&macom.rear, (uint8*)&rpc->args[0]);
                break;

            default:
                break;
        }
    }
    else
    {
        //
    }
}

//---------------------------------------------------------------------------
/**
 * Status RPCの受信
 */
//---------------------------------------------------------------------------
void MacomManager_ReceiveStatusMsg(const rpc_T* rpc)
{
    uint8  mode[MACOM_NUM];
    uint8  com[MACOM_NUM];
    sint16 i;

    macom.operationMode =rpc->args[0];

	macom.counter++;

    for( i=0; i<MACOM_NUM; i++ )
    {
        com[i]  = (rpc->args[1+i] & 0x0f);
        mode[i] = ( (rpc->args[1+i] & 0xf0) >> 4 );
    }

    macom.right.comValid  = (bool)com[(sint16)posSrrRight];
    macom.center.comValid = (bool)com[(sint16)posSrrCenter];
    macom.left.comValid   = (bool)com[(sint16)posSrrLeft];
    macom.rear.comValid   = (bool)com[(sint16)posSrrRear];

    macom.right.mode  = mode[(sint16)posSrrRight];
    macom.center.mode = mode[(sint16)posSrrCenter];
    macom.left.mode   = mode[(sint16)posSrrLeft];
    macom.rear.mode   = mode[(sint16)posSrrRear];

    // 受信カウンタをクリア
    macom.recTimer = 0;
    
    // 一度でも受信したらReady
    macom.ready = TRUE;
}

//---------------------------------------------------------------------------
/**
 * SRRのバージョン情報の受信
 */
//---------------------------------------------------------------------------
void MacomManager_ReceiveVersionInfoMsg(const rpc_T* rpc)
{
    uint8 ch;
    
    ch = (rpc->args[6] & 0x0f);

    switch(ch)
    {
        case 1:
            MacomRadar_SetVersion(&macom.right, (uint8*)&rpc->args[0]);
            break;

        case 2:
            MacomRadar_SetVersion(&macom.center, (uint8*)&rpc->args[0]);
            break;

        case 3:
            MacomRadar_SetVersion(&macom.left, (uint8*)&rpc->args[0]);
            break;
        
        case 4:
            MacomRadar_SetVersion(&macom.rear, (uint8*)&rpc->args[0]);
            break;

        default:
            break;

    }
}

//---------------------------------------------------------------------------
/**
 * 
 */
//---------------------------------------------------------------------------
void MacomManager_SetDebugFlag(bool flag)
{
    macom.debugFlag = flag;
}
bool MacomManager_GetDebugFlag(void)
{
    return(macom.debugFlag);
}

//---------------------------------------------------------------------------
/**
 * @retval 検知ターゲット数
 */
//---------------------------------------------------------------------------
sint16 MacomManager_GetTargetNum(MacomPosition pos)
{
    StructMacom *pRadar;
    sint16 num;

    pRadar = MacomManager_GetRadarObject(pos);

    if( pRadar != NULL )
    {
        num = pRadar->targetNum;
    }
    else
    {
        num = 0;
    }
    
    return(num);
}

//---------------------------------------------------------------------------
/**
 * @retval Can Com Counter
 */
//---------------------------------------------------------------------------
uint16 MacomManager_GetCanComCounter(void)
{
	return(macom.counter);
}

//---------------------------------------------------------------------------
/**
 * @retval 検知ターゲット情報
 */
//---------------------------------------------------------------------------
StructUserMacomTarget MacomManager_GetTargetInfo(MacomPosition pos, sint16 index)
{
    StructUserMacomTarget target;
    StructMacom *pRadar;
    
    pRadar = MacomManager_GetRadarObject(pos);

    if( ( pRadar != NULL ) && ( index < MAX_MACOM_OBJECTS ) && ( index >= 0 ) )
    {
        target.range   = pRadar->packet.tracks[index].range;
        target.power   = pRadar->packet.tracks[index].power;
        target.angle   = pRadar->packet.tracks[index].angle;
        target.speed   = pRadar->packet.tracks[index].speed;
        target.xpos    = pRadar->packet.tracks[index].xpos;
        target.ypos    = pRadar->packet.tracks[index].ypos;
        target.localX  = pRadar->packet.tracks[index].localX;
        target.localY  = pRadar->packet.tracks[index].localY;
    }
    else
    {
        target.range   = 0;
        target.power   = 0;
        target.angle   = 0;
        target.speed   = 0;
        target.xpos    = 0;
        target.ypos    = 0;
        target.localX  = 0;
        target.localY  = 0;
    }

    return(target);
}


//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void MacomManager_SetValidFlag(bool flag)
{
    macom.valid = flag;
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
bool MacomManager_GetValidFlag(void)
{
    return(macom.valid);
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void MacomManager_SetClippedObject(
     MacomPosition pos, 
     sint32 range,
     sint16 angle,
     sint16 power,
     sint32 xpos,
     sint32 ypos
     )
{
    StructMacom *pRadar;
    
    pRadar = MacomManager_GetRadarObject(pos);

    if( pRadar != NULL )
    {
        MacomRadar_SetClippedObject(pRadar, range, angle, power, xpos, ypos);
    }
    else
    {
        // do nothing
    }
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
sint32 MacomManager_GetClosestObjectRange(MacomPosition pos)
{
    StructMacom *pRadar;
    sint32 range;

    pRadar = MacomManager_GetRadarObject(pos);

    if( pRadar != NULL )
    {
        range = pRadar->closestObject.range;
    }
    else
    {
        range = 0;
    }
    
    return(range);
}
//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
StructUserMacomTarget* MacomManager_GetClosestObject(MacomPosition pos)
{
    StructUserMacomTarget *pTarget;
    StructMacom *pRadar;

    pRadar = MacomManager_GetRadarObject(pos);

    if( pRadar != NULL )
    {
        pTarget = &pRadar->closestObject;
    }
    else
    {
        pTarget = NULL;
    }

    return(pTarget);
}
//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
bool MacomManager_IsClippedObjectExist(MacomPosition pos)
{
    StructMacom *pRadar;
    bool   flag;

    pRadar = MacomManager_GetRadarObject(pos);
    
    if( pRadar != NULL )
    {
        if( ( pRadar->closestObject.range >= 30000 )
         || ( pRadar->closestObject.range < 0 )
        )
        {
            flag = FALSE;
        }
        else
        {
            flag = TRUE;  // 物体あり
        }
    }
    else
    {
        flag = FALSE;
    }
    
    return(flag);
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
bool MacomManager_IsRadarAvaliable(MacomPosition pos)
{
    StructMacom *pRadar;
    bool flag;

    pRadar = MacomManager_GetRadarObject(pos);

    if( pRadar != NULL )
    {
        flag = pRadar->valid;
    }
    else
    {
        flag = FALSE;
    }

    return(flag);
}
//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
void MacomManager_SetBaseAngle(MacomPosition pos, sint16 angle)
{
    StructMacom *pRadar;

    pRadar = MacomManager_GetRadarObject(pos);

    if( pRadar != NULL )
    {
        MacomRadar_SetBaseAngle(pRadar,angle);
    }
    else
    {
        // do nothing
    }
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
bool MacomManager_RadarIsHealthy(MacomPosition pos)
{
    StructMacom *pRadar;
    bool ret;

    pRadar = MacomManager_GetRadarObject(pos);

    if( pRadar != NULL )
    {
        ret = pRadar->healthy;
    }
    else
    {
        ret = FALSE;
    }
    
    return(ret);
}
uint16 MacomManager_GetRpcRecieveCounter(MacomPosition pos)
{
    StructMacom *pRadar;
    uint16 ret;

    pRadar = MacomManager_GetRadarObject(pos);

    if( pRadar != NULL )
    {
        ret = pRadar->packetCounter;
    }
    else
    {
        ret = 0;
    }
    
    return(ret);
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
static void MacomManager_Diagnosis(void)
{
    macom.right.healthy  = TRUE;
    macom.center.healthy = TRUE;
    macom.left.healthy   = TRUE;
    macom.rear.healthy   = TRUE;

    // 故障診断機能無視（テスト用、あるいはSRBIがない場合）
    if( macom.valid == FALSE )
    {
        return;
    }
    else
    {
        if( macom.ready == FALSE )  // SRBIが起動していない
        {
            // SRBIが起動していないのにAutoになったら、即エラー
            if( Mode_GetCurrentMode() == modeAuto )
            {
                Error_Set(E_SRBI_NOT_READY);   // 0x4EA1
            }
            else
            {
                //
            }

            macom.right.healthy  = FALSE;
            macom.center.healthy = FALSE;
            macom.left.healthy   = FALSE;
            macom.rear.healthy   = FALSE;

        }
        else   // SRBI動作中
        {
            if( macom.diagReady == TRUE )
            {
                // SRBI-Safetyの通信チェック
                // 通信異常状態が２秒以上続いたら、エラーとする
                if( macom.recTimer > T_2SEC )
                {
                    macom.recTimer = T_2SEC;
                    Error_Set(E_SRBI_HEARTBEAT);     // 0x4EA0
                    // 自己診断フラグはクリア
                    MacomRadar_SelfDiagnosisClear(&macom.right);
                    MacomRadar_SelfDiagnosisClear(&macom.center);
                    MacomRadar_SelfDiagnosisClear(&macom.left);
                    MacomRadar_SelfDiagnosisClear(&macom.rear);
                }
                else
                {
                    // SRBI-MACOMの通信チェック
                    MacomRadar_CheckRbiSrrCommunication(&macom.right);   // 0x4E71
                    MacomRadar_CheckRbiSrrCommunication(&macom.center);  // 0x4E81
                    MacomRadar_CheckRbiSrrCommunication(&macom.left);    // 0x4E91
                    MacomRadar_CheckRbiSrrCommunication(&macom.rear);    // 0x4EA1

                    // 本体故障診断
                    MacomRadar_SelfDiagnosis(&macom.right);
                    MacomRadar_SelfDiagnosis(&macom.center);
                    MacomRadar_SelfDiagnosis(&macom.left);
                    MacomRadar_SelfDiagnosis(&macom.rear);
                }
            }
            else
            {
                // 自己診断フラグはクリア
                MacomRadar_SelfDiagnosisClear(&macom.right);
                MacomRadar_SelfDiagnosisClear(&macom.center);
                MacomRadar_SelfDiagnosisClear(&macom.left);
                MacomRadar_SelfDiagnosisClear(&macom.rear);
            }

            if( macom.recTimer < T_5SEC )
            {
 	           macom.recTimer++;
            }
        }
    }
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
static StructMacom* MacomManager_GetRadarObject(MacomPosition pos)
{
    StructMacom *pRadar;

    if( pos == posSrrRight )
    {
        pRadar = &macom.right;
    }
    else if( pos == posSrrCenter )
    {
        pRadar = &macom.center;
    }
    else if( pos == posSrrLeft )
    {
        pRadar = &macom.left;
    }
    else if( pos == posSrrRear )
    {
        pRadar = &macom.rear;
    }
    else
    {
        pRadar = NULL;
    }
    
    return(pRadar);
}

//---------------------------------------------------------------------------
/**
 * 電源チェック
 * MACOMレーダの電源はMMR1Cと共通、MMR1C側でONOFFをコントロールするので
 * MACOM側で電源が入っているかチェックする
 */
//---------------------------------------------------------------------------
static void MacomManager_CheckOdsPower(void)
{
    static sint16 onTimer = 0;
    static sint16 offTimer = 0;
    static bool warnFlag = OFF;
    ModeType mode;
    
    
    mode = Mode_GetCurrentMode();

    // MMR1CODS用電源がない場合は何もしない
    if( LuxPower_isAvailable() == FALSE )
    {
        onTimer  = 0;
        offTimer = 0;
        warnFlag = OFF;
        return;
    }
    else
    {
        // 次へ
    }

    // エンジンOFFのときは、電源はOFFになるので、故障診断はしない
    if( Engine_GetStatus() == OFF )
    {
        macom.diagReady = FALSE;
        onTimer  = 0;
        offTimer = 0;
        warnFlag = OFF;
        return;
    }

    // レーダ電源がONになり、5秒以上経過したら故障診断を開始
    if( LuxPower_GetOutput() == ON )
    {
        if( onTimer >= T_5SEC )
        {
            macom.diagReady = TRUE;
            onTimer = T_5SEC;
        }
        else
        {
            onTimer++;
        }
        offTimer = 0;

        if( warnFlag == ON )
        {
            Warning_Clear(E_MMR1CODS_POWER_OFF);   // 0x4EB2
            warnFlag = OFF;
        }
        else
        {
            //
        }
    }
    else
    {
        if( offTimer >= T_5SEC )
        {
            offTimer = T_5SEC;
        }
        else
        {
            offTimer++;
        }

        macom.diagReady = FALSE;
        onTimer = 0;

        // レーダの電源がOFFなのに、自動走行しようとしたらエラー
        if( ( mode == modeAuto ) || ( mode == modeError ) )
        {
            if( offTimer >= T_5SEC )
            {
                Error_Set(E_MMR1CODS_POWER_OFF);   // 0x4EB2
            }
            else
            {
                Warning_Set(E_MMR1CODS_POWER_OFF);   // 0x4EB2
                warnFlag = ON;
            }
        }
        else if( mode == modeStop )
        {
            Warning_Set(E_MMR1CODS_POWER_OFF);   // 0x4EB2
            warnFlag = ON;
        }
        else
        {
            warnFlag = OFF;
        }
    }
}

/* end of file */

