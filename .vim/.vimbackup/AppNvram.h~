/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2005 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: SfNvram.h,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: Nvram
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/

#ifndef __SF_NVRAM_H__
#define __SF_NVRAM_H__

#include "kcommon.h"
#include "ahscommon.h"
#include "Acc3Param.h"
//#include "PotTable.h"
#include "MacomCommon.h"
#include "FurukawaCommon.h"
#include "AhsAuxDevice.h"

#define NUM_ERROR_HISTORY   16

typedef enum{
    nvItemMotor      = 1,
    nvItemAcc3Range1 = 2,
    nvItemAcc3Range2 = 3,
    nvItemAcc3Range3 = 4,
    nvItemAcc3Range4 = 5,
    nvItemAcc3Sens1  = 6,
    nvItemAcc3Sens2  = 7,
    nvItemAcc3Sens3  = 8,
    nvItemAcc3Sens4  = 9,
    nvItemAcc3Offset1  = 10,
    nvItemAcc3Offset2  = 11,
    nvItemAcc3Offset3  = 12,
    nvItemAcc3Offset4  = 13,
    nvItemOdsTheshold  = 14,
    nvItemMaskCentral  = 15,
    nvItemFireExit     = 16,
    nvItemAcc3exist1   = 17,
    nvItemAcc3exist2   = 18,
    nvItemAcc3exist3   = 19,
    nvItemAcc3exist4   = 20,
    nvItemClipExtend   = 21,
    nvItemLuxExist1    = 22,
    nvItemLuxExist2    = 23,
    nvItemLuxOffset1   = 24,
    nvItemLuxOffset2   = 25,
    nvItemSrrExist1    = 26,
    nvItemSrrExist2    = 27,
    nvItemSrrExist3    = 28,
    nvItemSrrExist4    = 29,
    nvItemSrrOffset1   = 30,
    nvItemSrrOffset2   = 31,
    nvItemSrrOffset3   = 32,
    nvItemSrrOffset4   = 33,
    nvItemAcc3Power    = 34,
    nvItemClipAllowance = 35,
    nvItemTargetRange   = 36,
    nvItemTruckType     = 37,
    nvItemRearFreeZoneW = 38,
    nvItemRearFreeZoneL    = 39,
    nvItemLeftChokeExist    = 40,
    nvItemRightChokeExist   = 41,
    nvItemChokeRangeThresh  = 42,
    nvItemChokeAngleRThresh = 43,
    nvItemChokeAngleLThresh = 44,
    nvItemChokePowerThresh  = 45
} EnumNvramItem;

/**
 * 初期化
 */
extern void AppNvram_Init(void);
extern void AppNvram_Main(void);
extern void AppNvram_KeyOff(void);

extern void AppNvram_SetInitData(void);

/**
 * NVRAMに保存する変数のアドレス
 */
extern uint16* AppNvram_GetBufferAddress(void);
extern sint16  AppNvram_GetBufferSize(void);

/**
 * レーダの基本閾値
 */
extern sint16 SfNvram_GetRadarDefaultThreshold(void);
extern void   SfNvram_SetDefaultThreshold(sint16 thresh);

/**
 * レーダの反射強度閾値
 */
extern sint16 SfNvram_GetRadarPowerThreshold(void);
extern void   SfNvram_SetRadarPowerThreshold(sint16 thresh);

/**
 * クリッピングエリア幅
 */
extern sint16 SfNvram_GetClippingAllowance(void);
extern void   SfNvram_SetClippingAllowance(sint16 thresh);

/**
 * ターゲットの検知距離閾値
 */
extern sint16 SfNvram_GetTargetRangeThreshold(void);
extern void   SfNvram_SetTargetRangeThreshold(sint16 thresh);

/**
 * マスクシステムありなし
 */
extern sint16 SfNvram_GetMaskCentralFlag(void);
extern void   SfNvram_SetMaskCentralFlag(sint16 thresh);

/**
 * 角度オフセット
 */
extern sint16 SfNvram_GetRadarOffset(RadarPosition pos);
extern void   SfNvram_SetRadarOffset(RadarPosition pos, sint16 offset);

/**
 * 距離補正係数
 */
extern sint16 SfNvram_GetRadarRangeCoefficient(RadarPosition pos);
extern void   SfNvram_SetRadarRangeCoefficient(RadarPosition pos, sint16 coefficient);

/**
 * 感度補正
 */
extern sint16 SfNvram_GetRadarSensitivity(RadarPosition pos);
extern void   SfNvram_SetRadarRangeSensitivity(RadarPosition pos, sint16 sensitivity);

/**
 * 回転機構原点
 */
extern sint16 SfNvram_GetMotorOrigin(void);
extern void   SfNvram_SetMotorOrigin(sint16 origin);

/**
 * クリッピングエリア延長許可、不許可
 */
extern sint16 SfNvram_GetClipAreaExtend(void);
extern void   SfNvram_SetClipAreaExtend(sint16 flag);

/**
 * 
 */
extern sint16 SfNvram_GetFireExtinguisherExist(void);
extern void   SfNvram_SetFireExtinguisherExist(sint16 flag);

/**
 * 
 */
extern bool   AppNvram_IsInitialized(void);
extern uint16 SfNvram_GetVirgin(void);
extern void   SfNvram_BecomeVirgin(void);

/**
 * 
 */
extern sint16 SfNvram_GetAcc3Installed(RadarPosition pos);
extern void   SfNvram_SetAcc3Installed(RadarPosition pos, sint16 flag);


/**
 * 
 */
extern sint16 SfNvram_GetLuxInstalled(LuxPosition pos);
extern void   SfNvram_SetLuxInstalled(LuxPosition pos, sint16 flag);

extern sint16 SfNvram_GetLuxOffset(LuxPosition pos);
extern void   SfNvram_SetLuxOffset(LuxPosition pos, sint16 offset);

extern sint16 SfNvram_GetSrrInstalled(MacomPosition pos);
extern void   SfNvram_SetSrrInstalled(MacomPosition pos, sint16 flag);

extern sint16 SfNvram_GetSrrOffset(MacomPosition pos);
extern void   SfNvram_SetSrrOffset(MacomPosition pos, sint16 offset);

/**
 * 
 */
extern uint16 SfNvram_GetErrorHistory(sint16 index);
extern void   SfNvram_SetErrorHistory(uint16 code);
extern void   SfNvram_ClearErrorHistory(void);

/**
 * NV-RAMに記憶するトラックタイプ
 */
extern sint16 AppNvram_GetTruckType(void);
extern void AppNvram_SetTruckType(sint16 value);

/**
 * リアセンサの検知フリーエリア定義
 */
extern uint16 AppNvram_GetRearFreeZoneWidth(void);
extern void AppNvram_SetRearFreeZoneWidth(uint16 value);

extern uint16 AppNvram_GetRearFreeZoneLengh(void);
extern void AppNvram_SetRearFreeZoneLengh(uint16 value);

/**
 * エラー履歴バッファのうちもっとも古いバッファのインデックスを取得する
 */
extern sint16 SfNvram_GetOldestErrorIndex(void);

/**
 * NVRAMの値を直接変更する
 */
extern void SfNvram_ChangeNvramFromLaptop(EnumNvramItem item, uint16 value);


/** 
 * モジュール情報の表示
 */
extern void SfNvram_ShowInfo(void);

/**
 * Trucktype RPC拡張のAuxDevice取得
 */
extern sint16 SfNvram_GetSfAuxDevice(sint8 index);
extern void   SfNvram_SetSfAuxDevice(sint8 index, sint16 value); 
extern sint16 AppNvram_GetOdsType(void);
extern sint16 AppNvram_GetSystemIoVersion(void);

extern uint16 SfNvram_GetParameterVirgin(void);

/**
 * 
 */
extern bool SfNvram_GetLeftChokeExist(void);
extern void SfNvram_SetLeftChokeExist(bool flag);

/**
 * 
 */
extern bool SfNvram_GetRightChokeExist(void);
extern void SfNvram_SetRightChokeExist(bool flag);

/**
 * 
 */
extern sint16 SfNvram_GetTouchSensorInstalled(void);
extern void   SfNvram_SetTouchSensorInstalled(bool flag);

/**
 * 
 */
extern uint32 SfNvram_GetOdsCalibRequired(void);

extern sint16 AppNvram_GetChokeRangeThresh(void);
extern void   AppNvram_SetChokeRangeThresh(sint16 thresh);

extern sint16 AppNvram_GetChokeAngleRThresh(void);
extern void   AppNvram_SetChokeAngleRThresh(sint16 thresh);

extern sint16 AppNvram_GetChokeAngleLThresh(void);
extern void   AppNvram_SetChokeAngleLThresh(sint16 thresh);

extern sint16 AppNvram_GetChokePowerThresh(void);
extern void   AppNvram_SetChokePowerThresh(sint16 thresh);

//logging data
extern uint32 AppNvram_GetLoggingKeyOn(void);
extern void   AppNvram_SetLoggingKeyOn(uint32 data);

extern uint32 AppNvram_GetLoggingModeManual(void);
extern void   AppNvram_SetLoggingModeManual(uint32 data);

extern uint32 AppNvram_GetLoggingModeStop(void);
extern void   AppNvram_SetLoggingModeStop(uint32 data);

extern uint32 AppNvram_GetLoggingModeAuto(void);
extern void   AppNvram_SetLoggingModeAuto(uint32 data);

extern uint32 AppNvram_GetLoggingModeError(void);
extern void   AppNvram_SetLoggingModeError(uint32 data);

extern uint32 AppNvram_GetLoggingModeMaintenance(void);
extern void   AppNvram_SetLoggingModeMaintenance(uint32 data);

#endif ///#ifndef __SF_NVRAM_H__
