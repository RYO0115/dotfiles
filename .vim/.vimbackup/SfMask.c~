/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2005 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: SfMask.c,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: Safety Controller
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/

#include <string.h>
#include "SfMask.h"
#include "CanIDManager.h"
#include "RpcManager.h"
#include "AhsTools.h"
#include "MaskData.h"
#include "Router.h"
#include "AppNvram.h"
#include "ErrorManager.h"
#include "WarningManager.h"
#include "ModeManager.h"
#include "TestCode.h"
#include "AppMain.h"

#define     RES_MASK_SET    0x01
#define     RES_MASK_DEL    0x02
#define     RES_MASK_LIST   0x03

/**
 * Mask Result RPC構造体
 */
typedef struct{
    sint16   id;
    sint8    result;
    sint8    code;
} StructRpcMaskResult;

/**
 * MASK ID LIST構造体
 */
typedef struct{
    sint16 num;
    sint16 id[MAX_NUM_MASK_AREA];
} StructMaskIdListRpc;

/**
 * マスククラスの属性定義
 */
typedef struct{
    StructMaskData       maskArea[MAX_NUM_MASK_AREA];  /** マスクデータ */
    StructMaskIdListRpc  list;                         /** マスクリスト */
    sint16   sendReqQue[MAX_NUM_MASK_AREA];            /** 送信要求キュー(Mask ID) */
    bool     fSendReq;
    bool     listReceive;        /** マスクリストを受信したかどうか */
    sint16   maskNum;            /** マスクデータの数 */
    bool     valid;
    bool     ready;
    bool     printFlag;
} StructMaskInfo;

/** マスククラスのオブジェクト
 */
static StructMaskInfo maskInfo;

/** プライベート関数
 */
static void   Mask_SendResult(sint16 id, sint8 result, sint8 code);
static void   Mask_SendIdList(void);
static void   Mask_CheckMaskList(void);
static void   Mask_SendMaskDataReq(void);
static sint16 Mask_GetNextSendReqMask(void);
static void   Mask_RemoveMaskIdFromSendReqQue(sint16 id);
static bool   Mask_IsAlreadyExist(sint16 id);
static sint16 Mask_PrintfEachMask(sint16 index);
static void   Mask_PrintfMaskData(void);

//---------------------------------------------------------------------------
/**
 * 初期化
 */
//---------------------------------------------------------------------------
void Mask_Init(void)
{
    sint16 i;

    // マスクありなし
    maskInfo.valid = SfNvram_GetMaskCentralFlag();

    maskInfo.listReceive = OFF;
    maskInfo.maskNum     = 0;
    maskInfo.fSendReq    = OFF;
    maskInfo.ready       = OFF;
    maskInfo.printFlag   = OFF;

    // マスクリストの初期化
    maskInfo.list.num    = 0;

    for( i=0; i<MAX_NUM_MASK_AREA; i++ )
    {
        maskInfo.list.id[i]    = -1;
        maskInfo.sendReqQue[i] = -1;
    }

    // マスクデータの初期化
    for( i=0; i<MAX_NUM_MASK_AREA; i++ )
    {
        MaskData_Init(&maskInfo.maskArea[i]);
    }
}

//---------------------------------------------------------------------------
/**
 * メインルーチン（毎サイクル１回だけ実行すること）
 */
//---------------------------------------------------------------------------
void Mask_Main(void)
{
    if( maskInfo.valid == ON )
    {
        // マスクリストを受信するまでスタートアップを送信する
        Mask_SendStartUp();
        
        // マスク送信キューにIDがあったら送信要求をする
        Mask_SendMaskDataReq();
        
        // 
        if( ( Mode_GetCurrentMode() == modeAuto ) && ( maskInfo.ready == OFF ) )
        {
            Error_Set(E_MASK_STILL_SENDING);
        }
        
        // マスク情報のPrintf表示（テスト用）
        Mask_PrintfMaskData();

        // マスクの数が上限に達したら、ワーニングを立てて、セントラルに伝える
        if( maskInfo.maskNum >= MAX_NUM_MASK_AREA )
        {
            Warning_Set(E_MASK_BUFFER_FULL);
        }
    }
}


//---------------------------------------------------------------------------
/**
 * MASK_STARTUPの送信
 */
//---------------------------------------------------------------------------
void Mask_SendStartUp(void)
{
    static uint16 timer=0;

    if( Router_IsReady() == OFF )
    {
        return;  // まだROUTERが起動していない
    }

    // マスクリストがまだ来ていなければStartupを30秒毎に送信する
    if( maskInfo.listReceive == OFF )
    {
        if( ( timer++ % T_30SEC ) == T_5SEC )
        {
            RpcManager_SendMsg( CAN_A,
                                MASK_STARTUP,
                                CanIDManager_GetRouterCanID(),
                                CanIDManager_GetRouterPriority(),
                                0,
                                (uint8*)NULL);
        }
    }
}


//---------------------------------------------------------------------------
/**
 * マスク登録RPCの受信
 */
//---------------------------------------------------------------------------
void Mask_ReceiveSetMask(const rpc_T* rpc)
{
    sint16 i,id;
    bool   ret, result;

TestCode_SetNumber(30020);

    // マスク無しなら何もしない
    if( maskInfo.valid == OFF )
    {
        return;
    }

    result = FALSE;

    // マスクID
    id = Tools_GetPtrToShortS( (uint8*)&rpc->args[0]);


    // 指定されたIDのマスクが、既に登録されているかどうか
    if( Mask_IsAlreadyExist(id) == TRUE ) 
    {
        result = FALSE;
    }
    else
    {
        // あいているマスクがあるか
        for(i=0;i<MAX_NUM_MASK_AREA;i++)
        {
            if( MaskData_IsAvailable(&maskInfo.maskArea[i]) == TRUE )
            {
                // マスクデータに登録する
                ret = MaskData_Set(&maskInfo.maskArea[i],rpc->args);
                
                if( ret == TRUE )
                {
                    // マスクデータの数を１つ増やす
                    maskInfo.maskNum++;
                    
                    // 登録成功
                    result = TRUE;
                }
                else
                {
                    // 登録失敗（IDエラーまたは頂点数多すぎる）
                    result = FALSE;
                }

                // マスク送信要求リストから削除する
                Mask_RemoveMaskIdFromSendReqQue(id);

                // マスクデータ受信したら、次のマスクデータの送信要求をする
                maskInfo.fSendReq = ON;
                
                break;
            }
        }
    }

    // セントラルにリザルトを返す
    Mask_SendResult(id, (sint8)result, RES_MASK_SET);

TestCode_SetNumber(30021);

}

//---------------------------------------------------------------------------
/**
 * マスク削除RPCの受信
 */
//---------------------------------------------------------------------------
void Mask_ReceiveDeleteMask(const rpc_T* rpc)
{
    sint16 i,id;
    bool   result;

TestCode_SetNumber(30022);

    // マスク無しなら何もしない
    if( maskInfo.valid == OFF )
    {
        return;
    }

    result = FALSE;

    // マスクID
    id = Tools_GetPtrToShortS( (uint8*)&rpc->args[0]);

    for(i=0;i<MAX_NUM_MASK_AREA;i++)
    {
        // 削除要求のあったマスクIDを探す
        if( maskInfo.maskArea[i].id == id )
        {
            // 削除する
            if( MaskData_Delete(&maskInfo.maskArea[i]) == TRUE )
            {
                // マスク数を１つ減らす
                maskInfo.maskNum--;

                // マスク削除成功
                result = TRUE;
            }
            break;
        }
    }

    // リザルトを返す
    Mask_SendResult(id, (sint8)result, RES_MASK_DEL);

TestCode_SetNumber(30023);
}


//---------------------------------------------------------------------------
/**
 * マスクリストの受信
 */
//---------------------------------------------------------------------------
void Mask_RecieveIdList(const rpc_T* rpc)
{
    sint16 i;

TestCode_SetNumber(30024);

    // マスク無しなら何もしない
    if( maskInfo.valid == OFF )
    {
        return;
    }

    // 一度でも受信したらReceiveフラグをセットする
    maskInfo.listReceive = ON;
    
    // IDリストを一旦クリア
    for( i=0; i<MAX_NUM_MASK_AREA; i++ )
    {
        maskInfo.list.id[i] = -1;
    }

    // IDをリストにコピー
    maskInfo.list.num = Tools_GetPtrToShortS( (uint8*)(&rpc->args[0]) );

    /** 最大数制限 08/02/16 by tojima
     */
    if( maskInfo.list.num > MAX_NUM_MASK_AREA )
    {
        maskInfo.list.num = MAX_NUM_MASK_AREA;
    }

    for( i=0; i<maskInfo.list.num; i++ )
    {
        maskInfo.list.id[i] = Tools_GetPtrToShortS( (uint8*)(&rpc->args[2+2*i]) );
    }

    // 自分の持っているマスクとリストを比較する
    Mask_CheckMaskList();

    // 自分の持っているマスクリストをセントラルに報告
    Mask_SendIdList();

TestCode_SetNumber(30025);
}

//---------------------------------------------------------------------------
/**
 * マスク情報をPrintf表示する
 */
//---------------------------------------------------------------------------
void Mask_ShowMaskInfo(void)
{
    maskInfo.printFlag = ON;
}

//---------------------------------------------------------------------------
/** 
 * 登録されているマスク数の取得
 */
//---------------------------------------------------------------------------
sint16 Mask_GetMaskNum(void)
{
    return(maskInfo.maskNum);
}

sint8 Mask_GetMaskPriority(sint16 index)
{
    return(maskInfo.maskArea[index].prior);
}
void*  Mask_GetMaskArea(sint16 index)
{
    return((void*)&maskInfo.maskArea[index]);
}

//---------------------------------------------------------------------------
/**
 * 登録されているマスクで指定されたマスクタイプの取得
 */
//---------------------------------------------------------------------------
MaskType Mask_GetMaskType(MaskCategory category, sint16 index)
{
    if( index > MAX_NUM_MASK_AREA ) 
    {
        // インデックス異常の場合は、マスクなしと同じ扱いとする
        return( maskRegular );
    }
    else
    {
        // マスクがセットされている場合
        if( maskInfo.maskArea[index].id != -1 )
        {
            if( category == maskCategoryRadar )
            {
                return(maskInfo.maskArea[index].maskTypeRadar);
            }
            else if( category == maskCategoryTruckRadar )
            {
                return(maskInfo.maskArea[index].maskTypeTRadar);
            }   
            else if( category == maskCategoryREG )
            {
                return(maskInfo.maskArea[index].maskTypeREG);
            }
            else if( category == maskCategoryUtility )
            {
                return(maskInfo.maskArea[index].maskTypeUtil);
            }
            else if( category == maskCategoryLux )
            {
                return(maskInfo.maskArea[index].maskTypeLux);
            }
            else if( category == maskCategorySrrFront )
            {
                return(maskInfo.maskArea[index].maskTypeSrrFront);
            }
            else if( category == maskCategorySrrRear )
            {
                return(maskInfo.maskArea[index].maskTypeSrrRear);
            }
            else
            {
                return(maskRegular);
            }
        }
        else
        {
            // マスクがセットされていない場合は、マスク無しと同じ扱いとする
            return(maskRegular);
        }
    }
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// プライベート関数
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**
 * 自分の持っているマスクリストをセントラルに報告する
 */
//---------------------------------------------------------------------------
static void Mask_SendIdList(void)
{
    StructMaskIdListRpc idbuf;  // RPC送信用バッファ
    sint16 i;

    // 送信バッファクリア
    idbuf.num = 0;
    for( i=0; i<MAX_NUM_MASK_AREA; i++ )
    {
        idbuf.id[i] = -1;
    }

    // 全マスクデータを調べて、マスク数とIDのリストを作る
    for( i=0; i<MAX_NUM_MASK_AREA; i++ )
    {
        if( maskInfo.maskArea[i].id != -1 )
        {
            idbuf.id[idbuf.num] = maskInfo.maskArea[i].id;
            idbuf.num++;
        }
    }

    // セントラルに送信
    RpcManager_SendMsg( CAN_A,
                        MASKLIST_REPLY,
                        CanIDManager_GetRouterCanID(),
                        CanIDManager_GetRouterPriority(),
                        (uint32)(2 + 2*idbuf.num),
                        (uint8*)&idbuf);

    // リストを受信したら、セントラルにマスクデータ送信要求フラグを立てる
    maskInfo.fSendReq = ON;


}



//---------------------------------------------------------------------------
/**
 * リザルトの送信
 */
//---------------------------------------------------------------------------
static void Mask_SendResult(sint16 id, sint8 result, sint8 code)
{
    StructRpcMaskResult arg;
    
    arg.id     = id;
    arg.result = result;
    arg.code   = code;

    RpcManager_SendMsg( CAN_A,
                        MASKRESULT,
                        CanIDManager_GetRouterCanID(),
                        CanIDManager_GetRouterPriority(),
                        (uint32)sizeof(StructRpcMaskResult),
                        (uint8*)&arg);
}


//---------------------------------------------------------------------------
/**
 * 受信したマスクリストと持っているマスクデータを比較して、内容があっているかどうか調べる
 * もし自分が持っていないIDがマスクリストにあったら、送信要求する
 * もしマスクリストに載っていないマスクを持っていたら、それは削除する
 */
//---------------------------------------------------------------------------
static void Mask_CheckMaskList(void)
{
    sint16 i,j,num=0;
    sint16 id;
    bool maskExistBuff[MAX_NUM_MASK_AREA];  // マスクデータにあるマスクが、IDリストの中に存在するかどうか
    bool newMask;

    // 送信要求リストバッファをクリアする
    for( i=0; i<MAX_NUM_MASK_AREA; i++ ) 
    {
        maskInfo.sendReqQue[i] = -1;
        maskExistBuff[i] = OFF;
    }

    // 受信したマスクリストに含まれているIDが、既に持っているマスクデータにあるか
    // どうか比較する
    for( i=0; i<maskInfo.list.num; i++ ) 
    {
        id = maskInfo.list.id[i];
        newMask = ON;
        
        for( j=0; j<MAX_NUM_MASK_AREA; j++ ) // マスクデータ
        {
            if( id == maskInfo.maskArea[j].id )
            {
                // 既に持っている
                newMask = OFF;
                maskExistBuff[j] = ON;
                break;
            }
        }

        // マスクを持っていなかったら、送信要求バッファに入れる
        if( newMask == ON )
        {
            maskInfo.sendReqQue[num] = id;
            num++;

            // あり得ないが一応チェック
            if( num >=MAX_NUM_MASK_AREA )
            {
                break;
            }
        }
    }

    // マスクリストに載っていないマスクは削除する
    for( i=0; i<MAX_NUM_MASK_AREA; i++ )
    {
        if( maskExistBuff[i] == OFF )
        {
            if( MaskData_Delete(&maskInfo.maskArea[i]) == TRUE )
            {
                maskInfo.maskNum--;
            }
        }
    }
}

//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
static void Mask_SendMaskDataReq(void)
{
    sint16 maskId;
    static uint32 lastSendTime = 0;
    static uint32 time = 0;

    time++;
    
    // 前回送信より30秒経過したか、または送信要求フラグが立っていたら
    // 送信要求リストにあるIDを一つだけ送信する
    if( ( maskInfo.fSendReq == ON ) || ( time - lastSendTime > T_30SEC ) )
    {
        maskId = Mask_GetNextSendReqMask();
        
        if( maskId != -1 ) 
        {

            RpcManager_SendMsg( CAN_A,
                                MASKDATA_REQ,
                                CanIDManager_GetRouterCanID(),
                                CanIDManager_GetRouterPriority(),
                                2,
                                (uint8*)&maskId);

            lastSendTime = time;
        }
        else
        {
            // すべてのマスクを受信
            maskInfo.ready = ON;
        }

        maskInfo.fSendReq = OFF;
    }
}

//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
static sint16 Mask_GetNextSendReqMask(void)
{
    sint16 i;

    // 送信要求リストにあるものを探す
    for( i=0; i<MAX_NUM_MASK_AREA; i++ ) 
    {
        if( maskInfo.sendReqQue[i] != -1 )
        {
            return(maskInfo.sendReqQue[i]);
        }
    }
    return(-1);
}
//---------------------------------------------------------------------------
/**
 */
//---------------------------------------------------------------------------
static void Mask_RemoveMaskIdFromSendReqQue(sint16 id)
{
    sint16 i;

    if(id != -1)
    {
        // 送信要求リストにあるものを探す
        for( i=0; i<MAX_NUM_MASK_AREA; i++ ) 
        {
            if( maskInfo.sendReqQue[i] == id )
            {
                maskInfo.sendReqQue[i] = -1;
                return;
            }
        }
    }
}

//---------------------------------------------------------------------------
/**
 * @retval TRUE  既にマスクが存在する
 * @retval FALSE 
 */
//---------------------------------------------------------------------------
static bool Mask_IsAlreadyExist(sint16 id)
{
    sint16 i;

    for( i=0; i<MAX_NUM_MASK_AREA; i++ )
    {
        // 既に指定されたIDのマスクが存在する
        if( id == maskInfo.maskArea[i].id ) 
        {
            return(TRUE);
        }
    }
    
    // 指定されたIDのマスクは存在しない
    return(FALSE);
}


//---------------------------------------------------------------------------
/**
 * マスク情報のPrintf表示
 */
//---------------------------------------------------------------------------
static sint16 Mask_PrintfEachMask(sint16 index)
{
    sint16 i;
    char str[128];

        if( index==0 )
        {
            CanDebugPrintf("Mask Data");
        }

    if(maskInfo.maskArea[index].id == -1 ) 
    {
        CanDebugPrintf("Blank");
    }
    else
    {
        sprintf(str," id %d type=<E:%d L:%d SF:%d SR:%d>", maskInfo.maskArea[index].id,
                                                 maskInfo.maskArea[index].maskTypeRadar,
                                                 maskInfo.maskArea[index].maskTypeLux,
                                                 maskInfo.maskArea[index].maskTypeSrrFront,
                                                 maskInfo.maskArea[index].maskTypeSrrRear);

        CanDebugPrintf(str);

        for( i=0; i<maskInfo.maskArea[index].numVertex; i++ )
        {
            sprintf(str," %d [%ld,%ld]", i,
                                        maskInfo.maskArea[index].x[i],
                                        maskInfo.maskArea[index].y[i]);
            CanDebugPrintf(str);
        }
	}	
        return(index);
}

//---------------------------------------------------------------------------
/**
 *
 */
//---------------------------------------------------------------------------
static void Mask_PrintfMaskData(void)
{
    static sint16 printIndex = 0;

    // マスク情報のPrintf表示
    if( maskInfo.printFlag == ON )
    {
        if( ( AdtMain_GetMainCounter() % T_500MSEC ) ==0 )
        {
			if(Mask_PrintfEachMask(printIndex) >=MAX_NUM_MASK_AREA-1)
            {
                maskInfo.printFlag = OFF;
            }
            printIndex++;
        }
    }
    else
    {
        printIndex = 0;
    }

}

/* end of file */

