/** 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * KOMATSU "Front Runner" / AHS Embeded Controller Software
 * Copyright (C) 2005 Komatsu Ltd. All rights reserved.
 * 
 *  $RCSfile: SfRpcTable.c,v $
 * $Revision: 1.1.1.1 $
 *   $Author: tojima $
 *     $Date: 2005/07/06 06:36:19 $
 *    $State: Exp $
 *
 *    @brief: RPC
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/
#include "rpc_api.h"

#include "AppRpcTable.h"

#include "ahscommon.h"
#include "RpcNoDefine.h"
#include "CanIDManager.h"
#include "RpcManager.h"

#include "Trajectory.h"
#include "SpeedProfile.h"
#include "Course.h"
#include "ModeManager.h"

#include "ControllerManager.h"
#include "SafetyCont.h"
#include "DriveCont.h"
#include "Router.h"
#include "Supervisor.h"

#include "SfReg.h"
#include "RpcService.h"
#include "TruckInfo.h"
#include "Acc3Manager.h"
#include "SfMask.h"
#include "SfMaintenance.h"
#include "SfInspection.h"
#include "Headlight.h"
#include "Horn.h"
#include "ModeLamp.h"
#include "OdsPower.h"
#include "Engine.h"
//#include "VhmsSmrData.h"

#include "EmergencyStop.h"
//#include "InterfaceModule.h"
//#include "GeCaution.h"
#include "AntiRutting.h"
#include "ReleaseCheck.h"
#include "Mbi.h"
#include "CrMonitor.h"
#include "DriveCANAHeartbeat.h"
#include "CrVersion.h"
#include "TruckType.h"
#include "MacomManager.h"
#include "Mmr1cManager.h" //Furukawa
#include "Ars408Manager.h"//Continental

//#include "IfmBroadCastMsg.h"
//#include "IfmTruckSpeed.h"
//#include "IfmEngineSpeed.h"
//#include "IfmFuelLevel.h"
#include "TruckState.h"
#include "SfTransferRpc.h"
#include "ReceivedNetworkData.h"

static void RpcTable_CanAReceiveFunction(rpc_T* rpc);

//---------------------------------------------------------------------------
/** RPC受信ルックアップテーブル
	書式
	{ RPC No, 実行する関数 }
*/
//---------------------------------------------------------------------------
/**
 * CAN-A用のRPC受信用テーブル
 */
static const rpc_lkuptbl_entry_T ahs_lkuptbl_A[] =
{
    // Startup Protocol
    { REQUEST_VERSION_MSG,       RpcTable_CanAReceiveFunction },
    { VERSION_INFO_MSG,          RpcTable_CanAReceiveFunction },
    { SUPERVISOR_INFO_MSG,       RpcTable_CanAReceiveFunction },
    { DRIVE_INFO_MSG,            RpcTable_CanAReceiveFunction },

    { A_HEART_BEAT,              RpcTable_CanAReceiveFunction },
    { N_HEART_BEAT,              RpcTable_CanAReceiveFunction },

    // Vehecle Control
    { A_LH_TRAJECTORY_RESET_MSG, RpcTable_CanAReceiveFunction },
    { A_LH_TRAJECTORY_DATA,      RpcTable_CanAReceiveFunction },
    { A_LH_SPEED_PROFILE,        RpcTable_CanAReceiveFunction },

    // Op Mode
    { A_AUTO_ORDER,              RpcTable_CanAReceiveFunction },
    { A_SUSPEND_ORDER,           RpcTable_CanAReceiveFunction },
    { A_DRIVE_ERROR_CANCEL,      RpcTable_CanAReceiveFunction },
    { A_STOP_EG,                 RpcTable_CanAReceiveFunction },
    { A_START_EG,                RpcTable_CanAReceiveFunction },

    // Command
    { A_EMERGENCY_STOP,          RpcTable_CanAReceiveFunction },
    { A_HEADLIGHT_ON,            RpcTable_CanAReceiveFunction },
    { A_HEADLIGHT_OFF,           RpcTable_CanAReceiveFunction },
    { A_HEADLIGHT_HI_ON,         RpcTable_CanAReceiveFunction },
    { A_HEADLIGHT_HI_OFF,        RpcTable_CanAReceiveFunction },
    { A_RADAR_RESET,             RpcTable_CanAReceiveFunction },
    { N_HORN_ORDER,              RpcTable_CanAReceiveFunction },
    { N_HORN_ORDER_DRIVE,        RpcTable_CanAReceiveFunction },
    { A_ALL_MODELAMP_ON,         RpcTable_CanAReceiveFunction },

    // MASK
    { SETMASK,                   RpcTable_CanAReceiveFunction },
    { DELETEMASK,                RpcTable_CanAReceiveFunction },
    { MASKLIST,                  RpcTable_CanAReceiveFunction },

    // Maintenance
	{ MNT_COMMAND,               RpcTable_CanAReceiveFunction },
    { TRUCK_TYPE_SET_REQ,        RpcTable_CanAReceiveFunction },
    { TRUCK_AUX_DEVICE_SET,      RpcTable_CanAReceiveFunction },
	{ TRUCK_AUX_DEVICES_INFO,    RpcTable_CanAReceiveFunction },
    { TRUCK_AUX_DEVICES_REQ,     RpcTable_CanAReceiveFunction },
	{ TRUCK_AUX_DEVICES_SET,     RpcTable_CanAReceiveFunction },
    
    // Inspection
    { INSP_COMMAND,              RpcTable_CanAReceiveFunction },
    { SET_INSP_STATUS_SAFE,      RpcTable_CanAReceiveFunction },

    // リリースチェック
    { IS_RELEASE_READY,          RpcTable_CanAReceiveFunction },
    
    // MBI
    { RPC_MBI_HEARTBEAT,           RpcTable_CanAReceiveFunction },
//    { IM_REALTIME_DATA,          RpcTable_CanAReceiveFunction },
//    { GE_FAULT_CODE,             RpcTable_CanAReceiveFunction },
//    { IM_BROADCAST_DATA,         RpcTable_CanAReceiveFunction },
//    { IM_TRUCK_SPEED,            RpcTable_CanAReceiveFunction },
//    { IM_ENGINE_SPEED,           RpcTable_CanAReceiveFunction },
//    { IM_FUEL_LEVEL,             RpcTable_CanAReceiveFunction },
//    { VSM_GET_SMR,               RpcTable_CanAReceiveFunction },
    { TRUCK_IDENTIFIER_INFO,     RpcTable_CanAReceiveFunction },
	{ CR_MONITOR_DATA,           RpcTable_CanAReceiveFunction },
	{ CR_ANSWER_VERSION,         RpcTable_CanAReceiveFunction },
	{ SEND_FR_POWER_ERROR,       RpcTable_CanAReceiveFunction },

    // Anti-Rutting(Offset指令）
    { OFFSET_TRAVEL_MSG,         RpcTable_CanAReceiveFunction },
    
    // モニパソ
    { CR_MONITOR_COMMAND,        RpcTable_CanAReceiveFunction },
    { CR_ASK_VERSION,            RpcTable_CanAReceiveFunction },
    
    // サポートツール

    // NV-RAM 初期化
    { NV_RAM_CLEAR,              RpcTable_CanAReceiveFunction },
    
	// TEST
    { SAFESEND0,                 RpcTable_CanAReceiveFunction },
    { SAFESEND1,                 RpcTable_CanAReceiveFunction },
    { SAFESEND2,                 RpcTable_CanAReceiveFunction },
    { SAFESEND3,                 RpcTable_CanAReceiveFunction },
    { SAFESEND4,                 RpcTable_CanAReceiveFunction },
    { SAFESEND5,                 RpcTable_CanAReceiveFunction },
    { SAFESEND6,                 RpcTable_CanAReceiveFunction },
    { SAFESEND7,                 RpcTable_CanAReceiveFunction },
    { SAFESEND8,                 RpcTable_CanAReceiveFunction },
    { SAFESEND9,                 RpcTable_CanAReceiveFunction },
    { SAFESENDa,                 RpcTable_CanAReceiveFunction },
    { SAFESENDb,                 RpcTable_CanAReceiveFunction },
    { SAFESENDc,                 RpcTable_CanAReceiveFunction },
    { SAFESENDd,                 RpcTable_CanAReceiveFunction },
    { SAFESENDe,                 RpcTable_CanAReceiveFunction },
    { SAFESENDf,                 RpcTable_CanAReceiveFunction },
	
	// トラックデータ
    { RPC_CR_AHS_TRUCK_DATA1,        RpcTable_CanAReceiveFunction },
    { RPC_CR_AHS_TRUCK_DATA2,        RpcTable_CanAReceiveFunction },
    { RPC_CR_AHS_TRUCK_DATA3,        RpcTable_CanAReceiveFunction },
	
	{0, NULL},
};

/**
 * CAN-B用のRPC受信用テーブル
 */
static const rpc_lkuptbl_entry_T ahs_lkuptbl_B[] = 
{
    // Startup Protocol
    {REQUEST_VERSION_MSG,        SafetyCont_ReceiveVersionReq },

    // Drive Controller
    {N_POSITION,        TruckInfo_ReceiveNposition        },
    {N_REG_COMMAND,     Reg_ReceiveCommand                },

	// Radar
	{ACC3_TRACK_MSG,    Acc3Manager_ReceiveTrackData      },
	{ACC3_SERIAL_NO,    Acc3Manager_ReceiveRadarSerialNo  },
	{ACC3_YAW_RATE,     Acc3Manager_ReceiveYawRateData  },

	//Furukawa
	{MMR1C_TRACK_MSG,      Mmr1cManager_ReceiveClippedTargetMsg  },
	{MMR1C_STATUS_MSG,     Mmr1cManager_ReceiveErrorMsg  },

	//Continental
	{ARS408_TRACK_MSG,      Ars408Manager_ReceiveClippedTargetMsg  },
	{ARS408_STATUS_MSG,     Ars408Manager_ReceiveErrorMsg  },

	// MBI
	{RPC_MBI_HEARTBEAT,             Mbi_ReceiveHeartbeat  },
//    {IM_REALTIME_DATA,          Ifm_ReceiveMsg          },
//    {GE_FAULT_CODE,             GeCaution_ReceiveMsg    },
	{TRUCK_IDENTIFIER_INFO,     TruckType_ReceiveId_CanB},
//    {VSM_GET_SMR,               Vhms_ReceiveMsg         },
//    {IM_BROADCAST_DATA,         IfmBroadCast_ReceiveMsg },
//    {IM_TRUCK_SPEED,            IfmTruckSpeed_ReceiveMsg  },
//    {IM_ENGINE_SPEED,           IfmEngineSpeed_ReceiveMsg },
//    {IM_FUEL_LEVEL,             IfmFuelLevel_ReceiveMsg   },

	// モニパソ
	{CR_MONITOR_COMMAND,    CrMonitor_ReceiveCommand    },
	{CR_ASK_VERSION,        CrVersion_ReceiveVersionReq   },
	{TRUCK_IDENTIFIER_REQ,  SfTransferRpc_ReceiveReq},
	{GET_FR_POWER_ERROR,    SfTransferRpc_ReceiveReq},

	// Maintenance
	{MNT_COMMAND,                   Maintenance_ReceiveCommand_CanB   },
	{TRUCK_TYPE_SET_REQ,            TruckType_SetNVRAM           },
	{ TRUCK_AUX_DEVICE_SET,      Rpc_SetAuxDeviceR4                 },
	{TRUCK_AUX_DEVICES_REQ,         Rpc_InfoAuxDevice           },
	{ TRUCK_AUX_DEVICES_SET,     Rpc_SetAuxDeviceR5                 },

	// Engine Control
	{A_STOP_EG,                     Engine_ReceiveEGStopRpc         },
	{A_START_EG,                    Engine_ReceiveEGStartRpc        },

	// TEST
	{SAFESEND0,         Rpc_SafeSend0       },
	{SAFESEND1,         Rpc_SafeSend1       },
	{SAFESEND2,         Rpc_SafeSend2       },
	{SAFESEND3,         Rpc_SafeSend3       },
	{SAFESEND4,         Rpc_SafeSend4       },
	{SAFESEND5,         Rpc_SafeSend5       },
	{SAFESEND6,         Rpc_SafeSend6       },
    {SAFESEND7,         Rpc_SafeSend7       },
    {SAFESEND8,         Rpc_SafeSend8       },
	{SAFESEND9,         Rpc_SafeSend9       },
    {SAFESENDa,         Rpc_SafeSendA       },
    {SAFESENDb,         Rpc_SafeSendB       },
    {SAFESENDc,         Rpc_SafeSendC       },
    {SAFESENDd,         Rpc_SafeSendD       },
    {SAFESENDe,         Rpc_SafeSendE       },
    {SAFESENDf,         Rpc_SafeSendF       },

    {N_HORN_ORDER,                  Horn_HonkRpc                       },
    {N_HORN_ORDER_DRIVE,            Horn_HonkExRpc                     },

    {A_HEADLIGHT_ON,                Headlight_BothOnRpc   },
    {A_HEADLIGHT_OFF,               Headlight_BothOffRpc  },
    {A_ALL_MODELAMP_ON,             ModeLamp_AllOnRpc                  },

	// MACOM Short Range Radar
	{MACOM_TRACK_MSG,         MacomManager_ReceiveTrackDataMsg    },
	{ MACOM_VERSION_MSG,         MacomManager_ReceiveVersionInfoMsg },
	{MACOM_COM_STATUS,        MacomManager_ReceiveStatusMsg       },

	// Lux
//  {LUX_TRACK_HEADER,        LuxManager_ReceiveTrackHeaderMsg    },
//  {LUX_TRACK_MSG,           LuxManager_ReceiveTrackMsg          },
//	{LUX_ERROR_MSG,           LuxManager_ReceiveErrorMsg          },
//	{LUX_CLIP_TRACK_MSG,      LuxManager_ReceiveClippedTargetMsg  },
//	{LUX_CALIB_PARAM_REQ,     LuxManager_ReceiveCalibParamReq     },

	// Op Mode
	{A_AUTO_ORDER,                  Mode_ReceiveGoAutoRpc           },
	{A_SUSPEND_ORDER,               Mode_ReceiveGoSuspendRpc        },
	{A_DRIVE_ERROR_CANCEL,          Mode_ReceiveErrorResetRpc       },

	// Inspection
	{INSP_COMMAND,                  Inspection_ReceiveCommand        },
	{SET_INSP_STATUS_SAFE,          Inspection_ReceiveInspStatus     },

	{0, NULL},
};



/**
 * ノードアドレス変換テーブル
 *
 * 登録するデータの並び順は
 *(送信先他ノードアドレス << 24 | 送信元他ノードアドレス <<16 | RPC ID )を
 *符号なし32bit整数型値とみなし、これが昇順であること 
 *データの並び順が昇順ではないルックアップテーブルを登録しようとすると
 *RpcListenOnlyTbl()はエラーとなる
 **/

static const rpc_listenonlytbl_T ahs_listentable_B[] =
{
//	{SAFETY_B, DRINAV_B,   MBI_A,            GE_FAULT_CODE         },
	{SAFETY_B, DRINAV_B,   MBI_A,            RPC_MBI_HEARTBEAT     },
//	{SAFETY_B, DRINAV_B,   MBI_A,            IM_REALTIME_DATA      },
//	{SAFETY_B, DRINAV_B,   MBI_A,            IM_BROADCAST_DATA     },
	{SAFETY_B, MBI_A,      PCTOOL,           TRUCK_IDENTIFIER_REQ  },
	{SAFETY_B, MBI_A,      PCTOOL,           TRUCK_AUX_DEVICES_REQ },
	{SAFETY_B, MBI_A,      PCTOOL,           TRUCK_AUX_DEVICES_SET },
    {SAFETY_B, MBI_A,      PCTOOL,           CR_MONITOR_COMMAND    },
	{SAFETY_B, MBI_A,      PCTOOL,           CR_ASK_VERSION        },
	{SAFETY_B, MBI_A,      PCTOOL,           GET_FR_POWER_ERROR    },
	{SAFETY_B, MBI_A,      FLIGHT_RECORDER,  TRUCK_IDENTIFIER_REQ  },
	{SAFETY_B, MBI_A,      FLIGHT_RECORDER,  TRUCK_AUX_DEVICES_REQ },
	{SAFETY_B, MBI_A,      FLIGHT_RECORDER,  TRUCK_AUX_DEVICES_SET },
    {SAFETY_B, MBI_A,      FLIGHT_RECORDER,  CR_MONITOR_COMMAND    },
	{SAFETY_B, MBI_A,      FLIGHT_RECORDER,  CR_ASK_VERSION        },
	{SAFETY_B, MBI_A,      FLIGHT_RECORDER,  GET_FR_POWER_ERROR    },
//	{SAFETY_B, DUMMY_NODE, PCTOOL,           CR_MONITOR_COMMAND    },
//	{SAFETY_B, DUMMY_NODE, PCTOOL2,          CR_MONITOR_COMMAND    }
};

static rpc_listenonlytbl_T ahs_listentable_A[] =
{
//       自身,   送信先,  送信元,    RPCID  ※データは昇順(toOtherAddr | fromOtherAddr | rpcid) 
//	{SAFETY_A, DRINAV_A,   MBI_A,   GE_FAULT_CODE          },
	{SAFETY_A, DRINAV_A,   MBI_A,   RPC_CR_AHS_TRUCK_DATA1 },
	{SAFETY_A, DRINAV_A,   MBI_A,   RPC_CR_AHS_TRUCK_DATA2 },
	{SAFETY_A, DRINAV_A,   MBI_A,   RPC_CR_AHS_TRUCK_DATA3 },
	{SAFETY_A, DRINAV_A,   MBI_A,   RPC_MBI_HEARTBEAT      },
//	{SAFETY_A, DRINAV_A,   MBI_A,   IM_REALTIME_DATA       },
//	{SAFETY_A, DRINAV_A,   MBI_A,   IM_BROADCAST_DATA      },
//	{SAFETY_A, DUMMY_NODE, PCTOOL,  CR_MONITOR_COMMAND     },
//	{SAFETY_A, DUMMY_NODE, PCTOOL2, CR_MONITOR_COMMAND     }
};

rpc_lkuptbl_entry_T* RpcTable_GetTableA(void)
{
    return((rpc_lkuptbl_entry_T*)ahs_lkuptbl_A);
}
rpc_lkuptbl_entry_T* RpcTable_GetTableB(void)
{
    return((rpc_lkuptbl_entry_T*)ahs_lkuptbl_B);
}

/*
 * RPCノード変換テーブル
 */
rpc_listenonlytbl_T* RpcTable_GetListenOnlyTableA(void)
{
//	return(NULL);
	return((rpc_listenonlytbl_T*)ahs_listentable_A);
	
}
rpc_listenonlytbl_T* RpcTable_GetListenOnlyTableB(void)
{
	return((rpc_listenonlytbl_T*)ahs_listentable_B);
}

uint32 RpcTable_GetListenOnlyTableSizeA(void)
{
//	return(0);
	return( sizeof(ahs_listentable_A) / sizeof(rpc_listenonlytbl_T) );

}
uint32 RpcTable_GetListenOnlyTableSizeB(void)
{
	return( sizeof(ahs_listentable_B) / sizeof(rpc_listenonlytbl_T) );
}

/*
 * RPC 受信関数のラッピング関数
 */
static void RpcTable_CanAReceiveFunction(rpc_T* rpc)
{ 
    // ROUTER/SUPERVISORの受信間隔リセット
    if( rpc->dst == CanIDManager_GetRouterCanID() ) { Router_ClearRpcInterval(); }
    if( rpc->dst == CanIDManager_GetSupervisorCanID() ) { Supervisor_ClearRpcInterval(); }
    
    // RPC No 毎に受信関数を割り振る
    switch(rpc->rpcid)
    {
        // Startup Protocol
        case REQUEST_VERSION_MSG       : SafetyCont_ReceiveVersionReq(rpc);            break;
        case VERSION_INFO_MSG          : ControllerManager_ReceiveVersionInfoMsg(rpc); break;
        case SUPERVISOR_INFO_MSG       : Supervisor_ReceiveSupervisorInfoMsg(rpc);     break;
        case DRIVE_INFO_MSG            : DriveCont_ReceiveDriveInfoMsg(rpc);           break;

        case A_HEART_BEAT              : ControllerManager_ReceiveHeartbeatRpc(rpc);   break;
        case N_HEART_BEAT              : DriveCANAHeartbeat_Receive(rpc);              break;

        // Vehecle Control
        case A_LH_TRAJECTORY_RESET_MSG : Course_ReceiveTrajectoryReset(rpc);           break;
        case A_LH_TRAJECTORY_DATA      : Trajectory_ReceiveMsg(rpc);                   break;
        case A_LH_SPEED_PROFILE        : SpeedProfile_ReceiveMsg(rpc);                 break;

        // Op Mode
        case A_AUTO_ORDER              : Mode_ReceiveGoAutoRpc(rpc);                   break;
        case A_SUSPEND_ORDER           : Mode_ReceiveGoSuspendRpc(rpc);                break;
        case A_DRIVE_ERROR_CANCEL      : Mode_ReceiveErrorResetRpc(rpc);               break;
        case A_STOP_EG                 : Engine_ReceiveEGStopRpc(rpc);                 break;
        case A_START_EG                : Engine_ReceiveEGStartRpc(rpc);                break;

        // Command
        case A_EMERGENCY_STOP          : EmergencyStop_ReceiveEmergencyStop(rpc);      break;
        case A_HEADLIGHT_ON            : Headlight_BothOnRpc(rpc);                     break;
        case A_HEADLIGHT_OFF           : Headlight_BothOffRpc(rpc);                    break;
        case A_HEADLIGHT_HI_ON         : Headlight_BeamOnRpc(rpc);                     break;
        case A_HEADLIGHT_HI_OFF        : Headlight_BeamOffRpc(rpc);                    break;
        case A_RADAR_RESET             : OdsPower_CycleRpc(rpc);                       break;
        case N_HORN_ORDER              : Horn_HonkRpc(rpc);                            break;
        case N_HORN_ORDER_DRIVE        : Horn_HonkExRpc(rpc);                          break;
        case A_ALL_MODELAMP_ON         : ModeLamp_AllOnRpc(rpc);                       break;

        // MASK
        case SETMASK                   : Mask_ReceiveSetMask(rpc);                     break;
        case DELETEMASK                : Mask_ReceiveDeleteMask(rpc);                  break;
        case MASKLIST                  : Mask_RecieveIdList(rpc);                      break;

        // Maintenance
        case MNT_COMMAND               : Maintenance_ReceiveCommand_CanA(rpc);         break;
        case TRUCK_TYPE_SET_REQ        : TruckType_SetNVRAM(rpc);                      break;
        case TRUCK_AUX_DEVICE_SET      : Rpc_SetAuxDeviceR4(rpc);                      break;
    	case TRUCK_AUX_DEVICES_INFO    : SfTransferRpc_ReceiveInfo(rpc);               break;
        case TRUCK_AUX_DEVICES_REQ     : Rpc_InfoAuxDevice(rpc);                       break;
    	case TRUCK_AUX_DEVICES_SET     : Rpc_SetAuxDeviceR5(rpc);                      break;
        
        // Inspection
        case INSP_COMMAND              : Inspection_ReceiveCommand(rpc);               break;
        case SET_INSP_STATUS_SAFE      : Inspection_ReceiveInspStatus(rpc);            break;

        // リリースチェック
        case IS_RELEASE_READY          : ReleaseCheck_ReceiveMsg(rpc);                 break;
        
        // MBI
        case RPC_MBI_HEARTBEAT         : Mbi_ReceiveHeartbeat(rpc);                    break;
//        case IM_REALTIME_DATA          : Ifm_ReceiveMsg(rpc);                          break;
//        case GE_FAULT_CODE             : GeCaution_ReceiveMsg(rpc);                    break;
//        case IM_BROADCAST_DATA         : IfmBroadCast_ReceiveMsg(rpc);                 break;
//        case IM_TRUCK_SPEED            : IfmTruckSpeed_ReceiveMsg(rpc);                break;
//        case IM_ENGINE_SPEED           : IfmEngineSpeed_ReceiveMsg(rpc);               break;
//        case IM_FUEL_LEVEL             : IfmFuelLevel_ReceiveMsg(rpc);                 break;
//        case VSM_GET_SMR               : Vhms_ReceiveMsg(rpc);                         break;
        case TRUCK_IDENTIFIER_INFO     : TruckType_ReceiveId_CanA(rpc);                break;
    	case CR_MONITOR_DATA           : SfTransferRpc_ReceiveInfo(rpc);               break;
    	case CR_ANSWER_VERSION         : SfTransferRpc_ReceiveInfo(rpc);               break;
    	case SEND_FR_POWER_ERROR       : SfTransferRpc_ReceiveInfo(rpc);               break;

        // Anti-Rutting(Offset指令）
        case OFFSET_TRAVEL_MSG         : AntiRutting_ReceiveOffsetTravelMsg(rpc);      break;
        
        // モニパソ
        case CR_MONITOR_COMMAND        : CrMonitor_ReceiveCommand(rpc);                break;
        case CR_ASK_VERSION            : CrVersion_ReceiveVersionReq(rpc);             break;
        
        // サポートツール

        // NV-RAM 初期化
        case NV_RAM_CLEAR              : Rpc_NV_RAM_CLEAR(rpc);                        break;
        
        // TEST
        case SAFESEND0                 : Rpc_SafeSend0(rpc);                           break;
        case SAFESEND1                 : Rpc_SafeSend1(rpc);                           break;
        case SAFESEND2                 : Rpc_SafeSend2(rpc);                           break;
        case SAFESEND3                 : Rpc_SafeSend3(rpc);                           break;
        case SAFESEND4                 : Rpc_SafeSend4(rpc);                           break;
        case SAFESEND5                 : Rpc_SafeSend5(rpc);                           break;
        case SAFESEND6                 : Rpc_SafeSend6(rpc);                           break;
        case SAFESEND7                 : Rpc_SafeSend7(rpc);                           break;
        case SAFESEND8                 : Rpc_SafeSend8(rpc);                           break;
        case SAFESEND9                 : Rpc_SafeSend9(rpc);                           break;
        case SAFESENDa                 : Rpc_SafeSendA(rpc);                           break;
        case SAFESENDb                 : Rpc_SafeSendB(rpc);                           break;
        case SAFESENDc                 : Rpc_SafeSendC(rpc);                           break;
        case SAFESENDd                 : Rpc_SafeSendD(rpc);                           break;
        case SAFESENDe                 : Rpc_SafeSendE(rpc);                           break;
        case SAFESENDf                 : Rpc_SafeSendF(rpc);                           break;

		// トラックデータ用
        case RPC_CR_AHS_TRUCK_DATA1          : ReceivedNetworkData_ReceiveMsg1(rpc);         break;
        case RPC_CR_AHS_TRUCK_DATA2          : ReceivedNetworkData_ReceiveMsg2(rpc);         break;
        case RPC_CR_AHS_TRUCK_DATA3          : ReceivedNetworkData_ReceiveMsg3(rpc);         break;
        
        default : break;
    }
}
